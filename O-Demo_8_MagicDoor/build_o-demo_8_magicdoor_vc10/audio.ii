# 1 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/src/audio.cpp"
# 1 "c:\\Users\\1106786\\Dropbox\\Dropbox\\PG life\\Project Impact\\Code\\Demos\\O-Demo_8_MagicDoor\\build_o-demo_8_magicdoor_vc10//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "c:/Users/1106786/Dropbox/Dropbox/PG life/Project Impact/Code/Demos/O-Demo_8_MagicDoor/build_o-demo_8_magicdoor_vc10/temp_defines_debug.h" 1
# 1 "<command-line>" 2
# 1 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/src/audio.cpp"
# 1 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/h/audio.h" 1


# 1 "c:/marmalade/6.2/s3e/h/s3e.h" 1
# 19 "c:/marmalade/6.2/s3e/h/s3e.h"
# 1 "c:/marmalade/6.2/s3e/h/s3eAccelerometer.h" 1
# 15 "c:/marmalade/6.2/s3e/h/s3eAccelerometer.h"
# 1 "c:/marmalade/6.2/s3e/h/s3eTypes.h" 1
# 35 "c:/marmalade/6.2/s3e/h/s3eTypes.h"
typedef unsigned char s3e_uint8_t;
typedef signed char s3e_int8_t;
typedef unsigned short int s3e_uint16_t;
typedef signed short int s3e_int16_t;
typedef unsigned int s3e_uint32_t;
typedef signed int s3e_int32_t;
# 49 "c:/marmalade/6.2/s3e/h/s3eTypes.h"
  typedef signed long long s3e_int64_t;
  typedef unsigned long long s3e_uint64_t;
# 72 "c:/marmalade/6.2/s3e/h/s3eTypes.h"
typedef s3e_uint64_t uint64_t;
typedef s3e_int64_t int64_t;
typedef s3e_uint32_t uint32_t;
typedef s3e_int32_t int32_t;
typedef s3e_uint16_t uint16_t;
typedef s3e_int16_t int16_t;
typedef s3e_uint8_t uint8_t;
typedef s3e_int8_t int8_t;
# 94 "c:/marmalade/6.2/s3e/h/s3eTypes.h"
    typedef int intptr_t;
    typedef unsigned int uintptr_t;
# 106 "c:/marmalade/6.2/s3e/h/s3eTypes.h"
typedef unsigned int uint;
typedef unsigned short int ushort;
typedef unsigned long int ulong;
typedef unsigned char uint8;
typedef signed char int8;







typedef int64_t int64;
typedef uint64_t uint64;





typedef unsigned int uint32;






typedef signed int int32;






typedef uint16_t uint16;




typedef int16_t int16;
# 224 "c:/marmalade/6.2/s3e/h/s3eTypes.h"
typedef enum s3eResult
{
    S3E_RESULT_SUCCESS = 0,
    S3E_RESULT_ERROR = 1
} s3eResult;




typedef uint8 s3eBool;
# 242 "c:/marmalade/6.2/s3e/h/s3eTypes.h"
typedef wchar_t s3eWChar;
# 254 "c:/marmalade/6.2/s3e/h/s3eTypes.h"
typedef int32 (*s3eCallback) (void* systemData, void* userData);
# 16 "c:/marmalade/6.2/s3e/h/s3eAccelerometer.h" 2
# 64 "c:/marmalade/6.2/s3e/h/s3eAccelerometer.h"
typedef enum s3eAccelerometerError
{
    S3E_ACCELEROMETER_ERR_NONE = 0,
    S3E_ACCELEROMETER_ERR_PARAM = 1,
    S3E_ACCELEROMETER_ERR_UNAVAIL = 5
} s3eAccelerometerError;







extern "C" s3eAccelerometerError s3eAccelerometerGetError();
# 86 "c:/marmalade/6.2/s3e/h/s3eAccelerometer.h"
extern "C" const char* s3eAccelerometerGetErrorString();






typedef enum s3eAccelerometerProperty
{
    S3E_ACCELEROMETER_AVAILABLE = 0
} s3eAccelerometerProperty;

extern "C" int32 s3eAccelerometerGetInt(s3eAccelerometerProperty property);
# 108 "c:/marmalade/6.2/s3e/h/s3eAccelerometer.h"
extern "C" s3eResult s3eAccelerometerStart();







extern "C" void s3eAccelerometerStop();






extern "C" int32 s3eAccelerometerGetX();






extern "C" int32 s3eAccelerometerGetY();






extern "C" int32 s3eAccelerometerGetZ();
# 20 "c:/marmalade/6.2/s3e/h/s3e.h" 2
# 1 "c:/marmalade/6.2/s3e/h/s3eAudio.h" 1
# 62 "c:/marmalade/6.2/s3e/h/s3eAudio.h"
typedef enum s3eAudioCodec
{
    S3E_AUDIO_CODEC_MIDI = 1,
    S3E_AUDIO_CODEC_MP3 = 2,
    S3E_AUDIO_CODEC_AAC = 3,
    S3E_AUDIO_CODEC_AACPLUS = 4,
    S3E_AUDIO_CODEC_QCP = 5,
    S3E_AUDIO_CODEC_PCM = 6,
    S3E_AUDIO_CODEC_SPF = 7,
    S3E_AUDIO_CODEC_AMR = 8,
    S3E_AUDIO_CODEC_MP4 = 9
} s3eAudioCodec;






typedef enum s3eAudioStatus
{





    S3E_AUDIO_STOPPED = 0,




    S3E_AUDIO_PLAYING = 1,




    S3E_AUDIO_PAUSED = 2,
# 106 "c:/marmalade/6.2/s3e/h/s3eAudio.h"
    S3E_AUDIO_FAILED = 3
} s3eAudioStatus;
# 116 "c:/marmalade/6.2/s3e/h/s3eAudio.h"
typedef enum s3eAudioProperty
{





    S3E_AUDIO_VOLUME = 0,





    S3E_AUDIO_STATUS = 1,





    S3E_AUDIO_POSITION = 2,
# 148 "c:/marmalade/6.2/s3e/h/s3eAudio.h"
    S3E_AUDIO_VOLUME_DEFAULT = 3,





    S3E_AUDIO_CHANNEL = 4,





    S3E_AUDIO_NUM_CHANNELS = 5,

    S3E_AUDIO_AVAILABLE = 6,







    S3E_AUDIO_MUTES_S3ESOUND = 7,






    S3E_AUDIO_DURATION = 8,






    S3E_AUDIO_PLAYBACK_FROM_HTTP_AVAILABLE = 9
} s3eAudioProperty;
# 202 "c:/marmalade/6.2/s3e/h/s3eAudio.h"
extern "C" int32 s3eAudioGetInt(s3eAudioProperty property);
# 222 "c:/marmalade/6.2/s3e/h/s3eAudio.h"
extern "C" s3eResult s3eAudioSetInt(s3eAudioProperty property, int32 value);
# 232 "c:/marmalade/6.2/s3e/h/s3eAudio.h"
typedef enum s3eAudioCallback
{
# 249 "c:/marmalade/6.2/s3e/h/s3eAudio.h"
    S3E_AUDIO_STOP = 2,

    S3E_AUDIO_CALLBACK_MAX
} s3eAudioCallback;






typedef struct s3eAudioCallbackData
{

    uint32 m_ChannelID;
} s3eAudioCallbackData;
# 284 "c:/marmalade/6.2/s3e/h/s3eAudio.h"
extern "C" s3eResult s3eAudioRegister(s3eAudioCallback cbid, s3eCallback fn, void* userData);
# 300 "c:/marmalade/6.2/s3e/h/s3eAudio.h"
extern "C" s3eResult s3eAudioUnRegister(s3eAudioCallback cbid, s3eCallback fn);
# 309 "c:/marmalade/6.2/s3e/h/s3eAudio.h"
typedef enum s3eAudioError
{
    S3E_AUDIO_ERR_NONE = 0,
    S3E_AUDIO_ERR_PARAM = 1,
    S3E_AUDIO_ERR_TOO_MANY = 2,
    S3E_AUDIO_ERR_ALREADY_REG = 3,
    S3E_AUDIO_ERR_NOT_FOUND = 4,
    S3E_AUDIO_ERR_UNAVAIL = 5,
    S3E_AUDIO_ERR_DEVICE = 6,
    S3E_AUDIO_ERR_UNSUPPORTED = 7,
    S3E_AUDIO_ERR_MEM = 8,
    S3E_AUDIO_ERR_INVALID_DRIVE = 10,
    S3E_AUDIO_ERR_INVALID_PATH = 11,
    S3E_AUDIO_ERR_FILEFORMAT = 1000,
    S3E_AUDIO_ERR_WRONG_STATE = 1001
} s3eAudioError;
# 338 "c:/marmalade/6.2/s3e/h/s3eAudio.h"
extern "C" s3eAudioError s3eAudioGetError();
# 352 "c:/marmalade/6.2/s3e/h/s3eAudio.h"
extern "C" const char* s3eAudioGetErrorString();
# 426 "c:/marmalade/6.2/s3e/h/s3eAudio.h"
extern "C" s3eResult s3eAudioPlay(const char* filename, uint32 repeatCount =1);
# 497 "c:/marmalade/6.2/s3e/h/s3eAudio.h"
extern "C" s3eResult s3eAudioPlayFromBuffer(void* buffer, uint32 bufferLen, uint32 repeatCount =0);
# 522 "c:/marmalade/6.2/s3e/h/s3eAudio.h"
extern "C" s3eResult s3eAudioPause();
# 541 "c:/marmalade/6.2/s3e/h/s3eAudio.h"
extern "C" s3eResult s3eAudioResume();
# 555 "c:/marmalade/6.2/s3e/h/s3eAudio.h"
extern "C" void s3eAudioStop();
# 566 "c:/marmalade/6.2/s3e/h/s3eAudio.h"
extern "C" s3eBool s3eAudioIsPlaying();
# 580 "c:/marmalade/6.2/s3e/h/s3eAudio.h"
extern "C" s3eBool s3eAudioIsCodecSupported(s3eAudioCodec codec);





# 1 "c:/marmalade/6.2/s3e/h/legacy/s3eAudio_legacy.h" 1
# 587 "c:/marmalade/6.2/s3e/h/s3eAudio.h" 2
# 21 "c:/marmalade/6.2/s3e/h/s3e.h" 2
# 1 "c:/marmalade/6.2/s3e/h/s3eCompression.h" 1
# 33 "c:/marmalade/6.2/s3e/h/s3eCompression.h"
typedef enum s3eCompressionAlgorithms
{
    S3E_COMPRESSION_ALG_AUTO = 0,
    S3E_COMPRESSION_ALG_NONE = 1,







    S3E_COMPRESSION_ALG_ZLIB = 2,







    S3E_COMPRESSION_ALG_GZIP = 3,





    S3E_COMPRESSION_ALG_LZMA = 4,

    S3E_COMPRESSION_ALG_MAX
} s3eCompressionAlgorithms;






typedef enum s3eCompressionError
{
    S3E_COMPRESSION_ERR_NONE = 0,
    S3E_COMPRESSION_ERR_PARAM = 1,
    S3E_COMPRESSION_ERR_TOO_MANY = 2,
    S3E_COMPRESSION_ERR_DEVICE = 6,
    S3E_COMPRESSION_ERR_MEM = 8,

    S3E_COMPRESSION_ERR_BAD_DATA = 1000,
    S3E_COMPRESSION_ERR_INSUFF = 1002
} s3eCompressionError;





typedef struct s3eDecompressionHandle s3eDecompressionHandle;
# 95 "c:/marmalade/6.2/s3e/h/s3eCompression.h"
typedef struct s3eDecompressionInput
{

    void* m_Data;

    int32 m_Size;
} s3eDecompressionInput;
# 137 "c:/marmalade/6.2/s3e/h/s3eCompression.h"
extern "C" s3eDecompressionHandle* s3eCompressionDecompInit(s3eCompressionAlgorithms alg, s3eCallback inputFn, void* userData);
# 190 "c:/marmalade/6.2/s3e/h/s3eCompression.h"
extern "C" s3eResult s3eCompressionDecompRead(s3eDecompressionHandle* handle, void* bufferOut, uint32* lenOut);
# 210 "c:/marmalade/6.2/s3e/h/s3eCompression.h"
extern "C" s3eResult s3eCompressionDecompFinal(s3eDecompressionHandle* handle);
# 260 "c:/marmalade/6.2/s3e/h/s3eCompression.h"
extern "C" s3eResult s3eCompressionDecomp(void* bufferIn, uint32 lenIn, void** bufferOut, uint32 *lenOut, s3eCompressionAlgorithms algorithm);
# 273 "c:/marmalade/6.2/s3e/h/s3eCompression.h"
extern "C" s3eCompressionError s3eCompressionGetError();
# 286 "c:/marmalade/6.2/s3e/h/s3eCompression.h"
extern "C" const char* s3eCompressionGetErrorString();
# 22 "c:/marmalade/6.2/s3e/h/s3e.h" 2
# 1 "c:/marmalade/6.2/s3e/h/s3eConfig.h" 1
# 16 "c:/marmalade/6.2/s3e/h/s3eConfig.h"
# 1 "c:/marmalade/6.2/s3e/h/s3eFile.h" 1
# 33 "c:/marmalade/6.2/s3e/h/s3eFile.h"
typedef struct s3eFile s3eFile;
# 58 "c:/marmalade/6.2/s3e/h/s3eFile.h"
typedef enum s3eFileSeekOrigin
{
    S3E_FILESEEK_SET = 0,
    S3E_FILESEEK_CUR = 1,
    S3E_FILESEEK_END = 2
} s3eFileSeekOrigin;




typedef struct s3eFileList s3eFileList;
# 89 "c:/marmalade/6.2/s3e/h/s3eFile.h"
typedef enum s3eFileProperty
{






    S3E_FILE_ROM_EXISTS = 1,





    S3E_FILE_BYTES_TOTAL = 2,




    S3E_FILE_BYTES_FREE = 3
} s3eFileProperty;
# 119 "c:/marmalade/6.2/s3e/h/s3eFile.h"
typedef enum s3eFileStats
{







    S3E_FILE_ISFILE = 0,







    S3E_FILE_ISDIR = 1,






    S3E_FILE_ISUSER = 2,
# 156 "c:/marmalade/6.2/s3e/h/s3eFile.h"
    S3E_FILE_ISWRITABLE = 3,





    S3E_FILE_SIZE = 4,
# 172 "c:/marmalade/6.2/s3e/h/s3eFile.h"
    S3E_FILE_MODIFIED_DATE = 5,
# 184 "c:/marmalade/6.2/s3e/h/s3eFile.h"
    S3E_FILE_DRIVE_BYTES_FREE = 6,
# 193 "c:/marmalade/6.2/s3e/h/s3eFile.h"
    S3E_FILE_DRIVE = 7,
# 202 "c:/marmalade/6.2/s3e/h/s3eFile.h"
    S3E_FILE_DRIVE_BYTES_TOTAL = 8,






    S3E_FILE_REAL_PATH = 9,
} s3eFileStats;
# 228 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" int32 s3eFileGetInt(s3eFileProperty property);
# 253 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" int64 s3eFileGetFileInt(const char* filename, s3eFileStats stat);
# 278 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" char* s3eFileGetFileString(const char* filename, s3eFileStats stat, char* str, int len);
# 287 "c:/marmalade/6.2/s3e/h/s3eFile.h"
typedef enum s3eFileError
{
    S3E_FILE_ERR_NONE = 0,
    S3E_FILE_ERR_PARAM = 1,
    S3E_FILE_ERR_TOO_MANY = 2,
    S3E_FILE_ERR_ALREADY_REG = 3,
    S3E_FILE_ERR_NOT_FOUND = 4,
    S3E_FILE_ERR_UNAVAIL = 5,
    S3E_FILE_ERR_DEVICE = 6,
    S3E_FILE_ERR_UNSUPPORTED = 7,
    S3E_FILE_ERR_MEM = 8,
    S3E_FILE_ERR_GENERIC = 9,
    S3E_FILE_ERR_INVALID_DRIVE = 10,
    S3E_FILE_ERR_INVALID_PATH = 11,
    S3E_FILE_ERR_DATA = 12,

    S3E_FILE_ERR_INVALID_MODE = 1000,
    S3E_FILE_ERR_EXISTS = 1001,
    S3E_FILE_ERR_NOT_EMPTY = 1002,
    S3E_FILE_ERR_ACCESS = 1003,
    S3E_FILE_ERR_NO_MORE = 1004,
    S3E_FILE_ERR_EOF = 1005
} s3eFileError;
# 322 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" s3eFileError s3eFileGetError();
# 336 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" const char* s3eFileGetErrorString();
# 387 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" s3eFile* s3eFileOpen(const char* filename, const char* mode);
# 406 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" s3eFile* s3eFileOpenFromMemory(void* buffer, uint32 bufferLen);
# 423 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileClose(s3eFile* file);
# 444 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileFlush(s3eFile* file);
# 475 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" uint32 s3eFileRead(void* buffer, uint32 elemSize, uint32 noElems, s3eFile* file);
# 502 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" uint32 s3eFileWrite(const void* buffer, uint32 elemSize, uint32 noElems, s3eFile* file);
# 516 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" int s3eFilePrintf(s3eFile* f, const char *fmt, ...);
# 536 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" int32 s3eFileGetChar(s3eFile* file);
# 559 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" int32 s3eFilePutChar(char c, s3eFile* file);
# 597 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" char* s3eFileReadString(char* string, uint32 maxLen, s3eFile* file);
# 620 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" s3eBool s3eFileEOF(s3eFile* file);
# 655 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileSeek(s3eFile* file, int32 offset, s3eFileSeekOrigin origin);
# 671 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" int32 s3eFileTell(s3eFile* file);
# 688 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" int32 s3eFileGetSize(s3eFile* file);
# 714 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileMakeDirectory(const char* dirName);
# 739 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileDeleteDirectory(const char* dirName);
# 755 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" s3eBool s3eFileCheckExists(const char* filename);
# 789 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileRename(const char* src, const char* dest);
# 814 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileDelete(const char* filename);
# 842 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileTruncate(const char* filename, uint32 length);
# 852 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" uint64 s3eFileGetLastWriteTime(const char* filename);
# 881 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" s3eFileList* s3eFileListDirectory(const char* dirName);
# 903 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileListNext(s3eFileList* handle, char* filename, int filenameLen);
# 918 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileListClose(s3eFileList* handle);







typedef struct s3eUsrFile s3eUsrFile;
# 936 "c:/marmalade/6.2/s3e/h/s3eFile.h"
typedef s3eUsrFile*(*s3eUserOpenFn)(const char* filename, const char *mode);
# 948 "c:/marmalade/6.2/s3e/h/s3eFile.h"
typedef uint32 (*s3eUserReadFn)(void* buffer, uint32 elemLen, uint32 noElems, s3eUsrFile *file);
# 960 "c:/marmalade/6.2/s3e/h/s3eFile.h"
typedef uint32 (*s3eUserWriteFn)(const void* buffer, uint32 elemLen, uint32 noElems, s3eUsrFile *file);
# 969 "c:/marmalade/6.2/s3e/h/s3eFile.h"
typedef s3eBool (*s3eUserEOFFn)(s3eUsrFile* file);
# 980 "c:/marmalade/6.2/s3e/h/s3eFile.h"
typedef s3eResult (*s3eUserSeekFn)(s3eUsrFile* file, int32 offset, s3eFileSeekOrigin origin);
# 989 "c:/marmalade/6.2/s3e/h/s3eFile.h"
typedef int32 (*s3eUserTellFn)(s3eUsrFile* file);
# 998 "c:/marmalade/6.2/s3e/h/s3eFile.h"
typedef s3eResult (*s3eUserCloseFn)(s3eUsrFile* file);




typedef struct s3eUsrFileList s3eUsrFileList;
# 1013 "c:/marmalade/6.2/s3e/h/s3eFile.h"
typedef s3eUsrFileList* (*s3eUserListDirFn)(const char* path);
# 1027 "c:/marmalade/6.2/s3e/h/s3eFile.h"
typedef s3eResult (*s3eUserListNextFn)(s3eUsrFileList* handle, char* filename, int filenameLen);
# 1037 "c:/marmalade/6.2/s3e/h/s3eFile.h"
typedef s3eResult (*s3eUserListCloseFn)(s3eUsrFileList* handle);
# 1047 "c:/marmalade/6.2/s3e/h/s3eFile.h"
typedef s3eResult (*s3eUserDeleteFn)(const char* filename);
# 1084 "c:/marmalade/6.2/s3e/h/s3eFile.h"
typedef struct
{
    s3eUserOpenFn m_Open;
    s3eUserReadFn m_Read;
    s3eUserEOFFn m_EOF;
    s3eUserSeekFn m_Seek;
    s3eUserTellFn m_Tell;
    s3eUserCloseFn m_Close;

    s3eUserListDirFn m_ListDir;
    s3eUserListNextFn m_ListNext;
    s3eUserListCloseFn m_ListClose;

    s3eUserWriteFn m_Write;
    s3eUserDeleteFn m_Delete;

    void* m_Reserved[5];
} s3eFileUserCallbacks;
# 1114 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileAddUserFileSys(s3eFileUserCallbacks* callbacks);
# 1124 "c:/marmalade/6.2/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileRemoveUserFileSys(s3eFileUserCallbacks* callbacks);





# 1 "c:/marmalade/6.2/s3e/h/legacy/s3eFile_legacy.h" 1
# 16 "c:/marmalade/6.2/s3e/h/legacy/s3eFile_legacy.h"
typedef enum s3eFilePath
{
    S3E_FILEPATH_ROM,
    S3E_FILEPATH_RAM,
    S3E_FILEPATH_MMC,
    S3E_FILEPATH_MAX
} s3eFilePath;
# 34 "c:/marmalade/6.2/s3e/h/legacy/s3eFile_legacy.h"
extern "C" uint64 s3eFileGetFree(s3eFilePath path);
# 1131 "c:/marmalade/6.2/s3e/h/s3eFile.h" 2
# 17 "c:/marmalade/6.2/s3e/h/s3eConfig.h" 2
# 39 "c:/marmalade/6.2/s3e/h/s3eConfig.h"
typedef enum s3eConfigError
{
    S3E_CONFIG_ERR_NONE = 0,
    S3E_CONFIG_ERR_PARAM = 1,

    S3E_CONFIG_ERR_NOT_FOUND = 4,

    S3E_CONFIG_ERR_PARSE = 6
} s3eConfigError;
# 67 "c:/marmalade/6.2/s3e/h/s3eConfig.h"
extern "C" s3eConfigError s3eConfigGetError();
# 81 "c:/marmalade/6.2/s3e/h/s3eConfig.h"
extern "C" const char* s3eConfigGetErrorString();
# 104 "c:/marmalade/6.2/s3e/h/s3eConfig.h"
extern "C" s3eResult s3eConfigGetString(const char* group, const char* name, char* value);

extern "C" s3eResult s3eConfigGetStringHash(uint32 hash, char* value);
# 133 "c:/marmalade/6.2/s3e/h/s3eConfig.h"
extern "C" s3eResult s3eConfigGetInt(const char* group, const char* name, int* value);

extern "C" s3eResult s3eConfigGetIntHash(uint32 hash, int* value);
# 23 "c:/marmalade/6.2/s3e/h/s3e.h" 2
# 1 "c:/marmalade/6.2/s3e/h/s3eCrypto.h" 1
# 33 "c:/marmalade/6.2/s3e/h/s3eCrypto.h"
typedef struct s3eSHA1 s3eSHA1;
# 42 "c:/marmalade/6.2/s3e/h/s3eCrypto.h"
typedef enum s3eCryptoError
{
    S3E_CRYPTO_ERR_NONE = 0,
    S3E_CRYPTO_ERR_PARAM = 1,
    S3E_CRYPTO_ERR_TOO_MANY = 2,
    S3E_CRYPTO_ERR_DEVICE = 6,


    S3E_CRYPTO_ERR_INVALID_SIG = 1000,
    S3E_CRYPTO_ERR_SIG_CHECK = 1001
} s3eCryptoError;
# 68 "c:/marmalade/6.2/s3e/h/s3eCrypto.h"
extern "C" uint32 s3eCryptoRand();
# 84 "c:/marmalade/6.2/s3e/h/s3eCrypto.h"
extern "C" s3eResult s3eCryptoSha1(const uint8* data, uint32 dataLen, uint8* hash);
# 100 "c:/marmalade/6.2/s3e/h/s3eCrypto.h"
extern "C" s3eSHA1* s3eCryptoSha1Init();
# 117 "c:/marmalade/6.2/s3e/h/s3eCrypto.h"
extern "C" s3eResult s3eCryptoSha1Update(s3eSHA1* ctx, const uint8* data, uint32 dataLen);
# 133 "c:/marmalade/6.2/s3e/h/s3eCrypto.h"
extern "C" s3eResult s3eCryptoSha1Final(s3eSHA1* ctx, uint8* hash);
# 150 "c:/marmalade/6.2/s3e/h/s3eCrypto.h"
extern "C" s3eResult s3eCryptoVerifyRsa(uint8* sig, int sigLen,
                                     uint8* hash, int hashLen,
                                     uint8* mod, int modLen,
                                     uint8* exp, int expLen);
# 166 "c:/marmalade/6.2/s3e/h/s3eCrypto.h"
extern "C" s3eCryptoError s3eCryptoGetError();
# 180 "c:/marmalade/6.2/s3e/h/s3eCrypto.h"
extern "C" const char* s3eCryptoGetErrorString();
# 24 "c:/marmalade/6.2/s3e/h/s3e.h" 2
# 1 "c:/marmalade/6.2/s3e/h/s3eDebug.h" 1
# 38 "c:/marmalade/6.2/s3e/h/s3eDebug.h"
typedef enum s3eDebugProperty
{



    S3E_DEBUG_TRACE_ENABLED = 0,





    S3E_DEBUG_TRACE_TO_FILE = 1,




    S3E_DEBUG_ASSERT_ENABLED = 2,





    S3E_DEBUG_AVAILABLE = 3,




    S3E_DEBUG_FONT_SCALE = 4,




    S3E_DEBUG_FONT_WIDTH = 5,




    S3E_DEBUG_FONT_HEIGHT = 6

} s3eDebugProperty;
# 95 "c:/marmalade/6.2/s3e/h/s3eDebug.h"
extern "C" int32 s3eDebugGetInt(s3eDebugProperty property);
# 113 "c:/marmalade/6.2/s3e/h/s3eDebug.h"
extern "C" s3eResult s3eDebugSetInt(s3eDebugProperty property, int32 value);







typedef enum s3eDebugCallback
{
# 137 "c:/marmalade/6.2/s3e/h/s3eDebug.h"
    S3E_DEBUG_ASSERT = 0,
# 152 "c:/marmalade/6.2/s3e/h/s3eDebug.h"
    S3E_DEBUG_ERROR = 1,

    S3E_DEBUG_CALLBACK_MAX
} s3eDebugCallback;
# 180 "c:/marmalade/6.2/s3e/h/s3eDebug.h"
extern "C" s3eResult s3eDebugRegister(s3eDebugCallback cbid, s3eCallback fn, void* userData);
# 197 "c:/marmalade/6.2/s3e/h/s3eDebug.h"
extern "C" s3eResult s3eDebugUnRegister(s3eDebugCallback cbid, s3eCallback fn);
# 206 "c:/marmalade/6.2/s3e/h/s3eDebug.h"
typedef enum s3eDebugError
{
    S3E_DEBUG_ERR_NONE = 0,
    S3E_DEBUG_ERR_PARAM = 1,
    S3E_DEBUG_ERR_TOO_MANY = 2,
    S3E_DEBUG_ERR_ALREADY_REG = 3,
    S3E_DEBUG_ERR_NOT_FOUND = 4
} s3eDebugError;
# 226 "c:/marmalade/6.2/s3e/h/s3eDebug.h"
extern "C" s3eDebugError s3eDebugGetError();
# 239 "c:/marmalade/6.2/s3e/h/s3eDebug.h"
extern "C" const char* s3eDebugGetErrorString();

typedef enum s3eErrorShowResult
{

    S3E_ERROR_SHOW_CONTINUE = 0,

    S3E_ERROR_SHOW_STOP = 1,

    S3E_ERROR_SHOW_IGNORE = 2,





    S3E_ERROR_SHOW_AGAIN = 3
} s3eErrorShowResult;




typedef enum s3eMessageType
{





    S3E_MESSAGE_CONTINUE = 0,





    S3E_MESSAGE_CONTINUE_STOP = 1,






    S3E_MESSAGE_CONTINUE_STOP_IGNORE = 2
} s3eMessageType;







extern "C" s3eBool s3eDebugIsDebuggerPresent();
# 305 "c:/marmalade/6.2/s3e/h/s3eDebug.h"
extern "C" void s3eDebugOutputString(const char* pStr);
# 317 "c:/marmalade/6.2/s3e/h/s3eDebug.h"
extern "C" s3eErrorShowResult s3eDebugErrorShow(s3eMessageType type, const char* string);






extern "C" s3eErrorShowResult s3eDebugErrorPrintf(const char* fmt, ...)

__attribute__((format(printf, 1, 2)))

;
# 342 "c:/marmalade/6.2/s3e/h/s3eDebug.h"
extern "C" s3eErrorShowResult s3eDebugAssertShow(s3eMessageType type, const char* string);
# 355 "c:/marmalade/6.2/s3e/h/s3eDebug.h"
extern "C" void s3eDebugTraceLine(const char* string);






extern "C" int s3eDebugTracePrintf(const char* fmt, ...)

__attribute__((format(printf, 1, 2)))

;






extern "C" void s3eDebugTraceClearFile();
# 382 "c:/marmalade/6.2/s3e/h/s3eDebug.h"
extern "C" void s3eDebugTraceFlush();
# 407 "c:/marmalade/6.2/s3e/h/s3eDebug.h"
extern "C" void s3eDebugPrint(int x, int y, const char* string, s3eBool wrap);






extern "C" void s3eDebugPrintf(int x, int y, s3eBool wrap, const char* fmt, ...)

__attribute__((format(printf, 4, 5)))

;







extern "C" s3eBool s3eDebugTraceChannelSwitch(const char* channel, s3eBool new_state);
# 25 "c:/marmalade/6.2/s3e/h/s3e.h" 2
# 1 "c:/marmalade/6.2/s3e/h/s3eDevice.h" 1
# 39 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
typedef enum s3eDeviceError
{
    S3E_DEVICE_ERR_NONE = 0,
    S3E_DEVICE_ERR_PARAM = 1,
    S3E_DEVICE_ERR_TOO_MANY = 2,
    S3E_DEVICE_ERR_ALREADY_REG = 3,
    S3E_DEVICE_ERR_NOT_FOUND = 4,
    S3E_DEVICE_ERR_UNAVAIL = 5,
    S3E_DEVICE_ERR_DEVICE = 6,
    S3E_DEVICE_ERR_UNSUPPORTED = 7,
    S3E_DEVICE_ERR_MEM = 8,
    S3E_DEVICE_ERR_GENERIC = 9,
    S3E_DEVICE_ERR_INVALID_DRIVE = 10,
    S3E_DEVICE_ERR_INVALID_PATH = 11
} s3eDeviceError;
# 66 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
extern "C" s3eDeviceError s3eDeviceGetError();
# 80 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
extern "C" const char* s3eDeviceGetErrorString();
# 89 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
typedef enum s3eDeviceFPUType
{
    S3E_DEVICE_FPU_NONE = 0,
    S3E_DEVICE_FPU_VFP = 1,
    S3E_DEVICE_FPU_VFPV3 = 2,
    S3E_DEVICE_FPU_NEON = 3
} s3eDeviceFPUType;






typedef enum s3eDeviceProperty
{







    S3E_DEVICE_OS = 0,





    S3E_DEVICE_CLASS = 1,
# 128 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_ID = 2,





    S3E_DEVICE_PHONE_NUMBER = 3,





    S3E_DEVICE_LANGUAGE = 4,






    S3E_DEVICE_STATE = 5,




    S3E_DEVICE_FREE_RAM = 6,




    S3E_DEVICE_TOTAL_RAM = 7,







    S3E_DEVICE_ARCHITECTURE = 8,
# 175 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_S3E_VERSION = 9,





    S3E_DEVICE_BATTERY_LEVEL = 10,






    S3E_DEVICE_LEFT_SOFTKEY_IS_BACK = 11,






    S3E_DEVICE_MAINS_POWER = 12,
# 204 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_OS_VERSION = 13,





    S3E_DEVICE_CHIPSET = 14,
# 219 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_EXIT_CODE = 15,





    S3E_DEVICE_FPU = 16,





    S3E_DEVICE_BACK_SOFTKEY_POSITION = 17,





    S3E_DEVICE_ADVANCE_SOFTKEY_POSITION = 18,
# 248 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_SDK_VERSION = 19,
# 257 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_LOCALE = 20,





    S3E_DEVICE_NAME = 21,







    S3E_DEVICE_SUPPORTS_SIGNAL_HANDLING = 22,







    S3E_DEVICE_EXIT_SIGNAL = 23,







    S3E_DEVICE_PROXIMITY = 24,
# 303 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_UNIQUE_ID = 25,
# 314 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_IMSI = 26,





    S3E_DEVICE_SILENT_MODE = 27,




    S3E_DEVICE_NUM_CPU_CORES = 28,




    S3E_DEVICE_MEM_TOTAL = 29,






    S3E_DEVICE_MEM_FREE = 30,





    S3E_DEVICE_TIMEZONE = 31,





    S3E_DEVICE_3D_MODE = 32,






    S3E_DEVICE_PROCESS_ID = 33

} s3eDeviceProperty;






typedef enum s3eDeviceOSID
{

    S3E_OS_ID_WINDOWS = 3,

    S3E_OS_ID_LINUX = 5,

    S3E_OS_ID_ARM_SEMIH = 8,

    S3E_OS_ID_OSX = 13,

    S3E_OS_ID_IPHONE = 14,

    S3E_OS_ID_BADA = 18,

    S3E_OS_ID_ANDROID = 19,

    S3E_OS_ID_QNX = 24,

    S3E_OS_ID_ROKU = 25,


    S3E_OS_ID_SYMBIAN = 1,

    S3E_OS_ID_BREW = 2,

    S3E_OS_ID_WINMOBILE = 4,

    S3E_OS_ID_WIPI = 6,

    S3E_OS_ID_NDS = 7,

    S3E_OS_ID_NUCLEUS = 9,

    S3E_OS_ID_NGI = 10,

    S3E_OS_ID_WINCE = 11,

    S3E_OS_ID_SHARPEMP = 12,

    S3E_OS_ID_UIQ = 15,

    S3E_OS_ID_PS3 = 16,

    S3E_OS_ID_X360 = 17,

    S3E_OS_ID_WEBOS = 20,

    S3E_OS_ID_PSP = 21,

    S3E_OS_ID_WII = 22,
    S3E_OS_ID_MEEGO = 23

} s3eDeviceOSID;






typedef enum s3eDeviceClassID
{
    S3E_DEVICE_CLASS_UNKNOWN = 0,

    S3E_DEVICE_CLASS_WINDOWS_GENERIC = 3000,
    S3E_DEVICE_CLASS_LINUX_GENERIC = 5000,
    S3E_DEVICE_CLASS_LINUX_DESKTOP = 5001,
    S3E_DEVICE_CLASS_LINUX_EMBED = 5002,
    S3E_DEVICE_CLASS_ARM_SEMIH_GENERIC = 8000,
    S3E_DEVICE_CLASS_OSX_DESKTOP = 11000,
    S3E_DEVICE_CLASS_IPHONE = 12000,
    S3E_DEVICE_CLASS_BADA_GENERIC = 15000,
    S3E_DEVICE_CLASS_ANDROID_GENERIC = 16000,
    S3E_DEVICE_CLASS_QNX = 19000,

    S3E_DEVICE_CLASS_SYMBIAN_GENERIC = 1000,
    S3E_DEVICE_CLASS_SYMBIAN_SERIES60 = 1001,
    S3E_DEVICE_CLASS_SYMBIAN_SERIES60_EMULATOR = 1002,
    S3E_DEVICE_CLASS_SYMBIAN_UIQ = 1003,
    S3E_DEVICE_CLASS_SYMBIAN_UIQ_EMULATOR = 1004,
    S3E_DEVICE_CLASS_BREW_GENERIC = 2000,
    S3E_DEVICE_CLASS_BREW_QCIF_3G = 2001,
    S3E_DEVICE_CLASS_BREW_QCIF_25G = 2002,
    S3E_DEVICE_CLASS_BREW_SQCIF_25G = 2003,
    S3E_DEVICE_CLASS_BREW_QVGA_3G = 2004,
    S3E_DEVICE_CLASS_WINCE_GENERIC = 4000,
    S3E_DEVICE_CLASS_WINMOBILE_SP = 4001,
    S3E_DEVICE_CLASS_WINMOBILE_PPC = 4002,
    S3E_DEVICE_CLASS_WIPI_GENERIC = 6000,
    S3E_DEVICE_CLASS_NDS_GENERIC = 7000,
    S3E_DEVICE_CLASS_NDS_NDSI = 7001,
    S3E_DEVICE_CLASS_NUCLEUS_GENERIC = 9000,
    S3E_DEVICE_CLASS_NGI_GENERIC = 10000,
    S3E_DEVICE_CLASS_PS3 = 13000,
    S3E_DEVICE_CLASS_X360 = 14000,
    S3E_DEVICE_CLASS_PSP = 17000,
    S3E_DEVICE_CLASS_WII = 18000

} s3eDeviceClassID;




typedef enum s3eDeviceLanguage
{
    S3E_DEVICE_LANGUAGE_UNKNOWN = 0,
    S3E_DEVICE_LANGUAGE_ENGLISH = 1,
    S3E_DEVICE_LANGUAGE_FRENCH = 2,
    S3E_DEVICE_LANGUAGE_GERMAN = 3,
    S3E_DEVICE_LANGUAGE_SPANISH = 4,
    S3E_DEVICE_LANGUAGE_ITALIAN = 5,
    S3E_DEVICE_LANGUAGE_PORTUGUESE = 6,
    S3E_DEVICE_LANGUAGE_DUTCH = 7,
    S3E_DEVICE_LANGUAGE_TURKISH = 8,
    S3E_DEVICE_LANGUAGE_CROATIAN = 9,
    S3E_DEVICE_LANGUAGE_CZECH = 10,
    S3E_DEVICE_LANGUAGE_DANISH = 11,
    S3E_DEVICE_LANGUAGE_FINNISH = 12,
    S3E_DEVICE_LANGUAGE_HUNGARIAN = 13,
    S3E_DEVICE_LANGUAGE_NORWEGIAN = 14,
    S3E_DEVICE_LANGUAGE_POLISH = 15,
    S3E_DEVICE_LANGUAGE_RUSSIAN = 16,
    S3E_DEVICE_LANGUAGE_SERBIAN = 17,
    S3E_DEVICE_LANGUAGE_SLOVAK = 18,
    S3E_DEVICE_LANGUAGE_SLOVENIAN = 19,
    S3E_DEVICE_LANGUAGE_SWEDISH = 20,
    S3E_DEVICE_LANGUAGE_UKRAINIAN = 21,
    S3E_DEVICE_LANGUAGE_GREEK = 22,
    S3E_DEVICE_LANGUAGE_JAPANESE = 23,
    S3E_DEVICE_LANGUAGE_SIMPL_CHINESE = 24,
    S3E_DEVICE_LANGUAGE_TRAD_CHINESE = 25,
    S3E_DEVICE_LANGUAGE_KOREAN = 26,
    S3E_DEVICE_LANGUAGE_ICELANDIC = 27,
    S3E_DEVICE_LANGUAGE_FLEMISH = 28,
    S3E_DEVICE_LANGUAGE_THAI = 29,
    S3E_DEVICE_LANGUAGE_AFRIKAANS = 30,
    S3E_DEVICE_LANGUAGE_ALBANIAN = 31,
    S3E_DEVICE_LANGUAGE_AMHARIC = 32,
    S3E_DEVICE_LANGUAGE_ARABIC = 33,
    S3E_DEVICE_LANGUAGE_ARMENIAN = 34,
    S3E_DEVICE_LANGUAGE_AZERBAIJANI = 35,
    S3E_DEVICE_LANGUAGE_TAGALOG = 36,
    S3E_DEVICE_LANGUAGE_BELARUSSIAN = 37,
    S3E_DEVICE_LANGUAGE_BENGALI = 38,
    S3E_DEVICE_LANGUAGE_BULGARIAN = 39,
    S3E_DEVICE_LANGUAGE_BURMESE = 40,
    S3E_DEVICE_LANGUAGE_CATALAN = 41,
    S3E_DEVICE_LANGUAGE_ESTONIAN = 42,
    S3E_DEVICE_LANGUAGE_FARSI = 43,
    S3E_DEVICE_LANGUAGE_GAELIC = 44,
    S3E_DEVICE_LANGUAGE_GEORGIAN = 45,
    S3E_DEVICE_LANGUAGE_GUJARATI = 46,
    S3E_DEVICE_LANGUAGE_HEBREW = 47,
    S3E_DEVICE_LANGUAGE_HINDI = 48,
    S3E_DEVICE_LANGUAGE_INDONESIAN = 49,
    S3E_DEVICE_LANGUAGE_IRISH = 50,
    S3E_DEVICE_LANGUAGE_KANNADA = 51,
    S3E_DEVICE_LANGUAGE_KAZAKH = 52,
    S3E_DEVICE_LANGUAGE_KHMER = 53,
    S3E_DEVICE_LANGUAGE_LAO = 54,
    S3E_DEVICE_LANGUAGE_LATVIAN = 55,
    S3E_DEVICE_LANGUAGE_LITHUANIAN = 56,
    S3E_DEVICE_LANGUAGE_MACEDONIAN = 57,
    S3E_DEVICE_LANGUAGE_MALAY = 58,
    S3E_DEVICE_LANGUAGE_MALAYALAM = 59,
    S3E_DEVICE_LANGUAGE_MARATHI = 60,
    S3E_DEVICE_LANGUAGE_MOLDOVIAN = 61,
    S3E_DEVICE_LANGUAGE_MONGOLIAN = 62,
    S3E_DEVICE_LANGUAGE_PUNJABI = 63,
    S3E_DEVICE_LANGUAGE_ROMANIAN = 64,
    S3E_DEVICE_LANGUAGE_SINHALESE = 65,
    S3E_DEVICE_LANGUAGE_SOMALI = 66,
    S3E_DEVICE_LANGUAGE_SWAHILI = 67,
    S3E_DEVICE_LANGUAGE_TAJIK = 68,
    S3E_DEVICE_LANGUAGE_TAMIL = 69,
    S3E_DEVICE_LANGUAGE_TELUGU = 70,
    S3E_DEVICE_LANGUAGE_TIBETAN = 71,
    S3E_DEVICE_LANGUAGE_TIGRINYA = 72,
    S3E_DEVICE_LANGUAGE_TURKMEN = 73,
    S3E_DEVICE_LANGUAGE_URDU = 74,
    S3E_DEVICE_LANGUAGE_UZBEK = 75,
    S3E_DEVICE_LANGUAGE_VIETNAMESE = 76,
    S3E_DEVICE_LANGUAGE_WELSH = 77,
    S3E_DEVICE_LANGUAGE_ZULU = 78
} s3eDeviceLanguage;






typedef enum s3eDeviceArchitecture
{
    S3E_DEVICE_ARCHITECTURE_ARM4T = 0,
    S3E_DEVICE_ARCHITECTURE_ARM4 = 1,
    S3E_DEVICE_ARCHITECTURE_ARM5T = 2,
    S3E_DEVICE_ARCHITECTURE_ARM5TE = 3,
    S3E_DEVICE_ARCHITECTURE_ARM5TEJ = 4,
    S3E_DEVICE_ARCHITECTURE_ARM6 = 5,
    S3E_DEVICE_ARCHITECTURE_ARM6K = 6,
    S3E_DEVICE_ARCHITECTURE_ARM6T2 = 7,
    S3E_DEVICE_ARCHITECTURE_ARM6Z = 8,
    S3E_DEVICE_ARCHITECTURE_ARM7 = 12,
    S3E_DEVICE_ARCHITECTURE_X86 = 9,
    S3E_DEVICE_ARCHITECTURE_PPC = 10,
    S3E_DEVICE_ARCHITECTURE_AMD64 = 11,
    S3E_DEVICE_ARCHITECTURE_MIPS = 13,
    S3E_DEVICE_ARCHITECTURE_MAX = 14
} s3eDeviceArchitecture;
# 582 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
typedef enum s3eDeviceSoftKeyPosition
{
    S3E_DEVICE_SOFTKEY_BOTTOM_LEFT = 0,
    S3E_DEVICE_SOFTKEY_BOTTOM_RIGHT = 1,
    S3E_DEVICE_SOFTKEY_TOP_RIGHT = 2,
    S3E_DEVICE_SOFTKEY_TOP_LEFT = 3
} s3eDeviceSoftKeyPosition;
# 623 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
extern "C" const char* s3eDeviceGetString(s3eDeviceProperty property);
# 658 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
extern "C" int32 s3eDeviceGetInt(s3eDeviceProperty property);
# 678 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
extern "C" s3eResult s3eDeviceSetInt(s3eDeviceProperty property, int32 value);
# 706 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
extern "C" int64 s3eDeviceYield(int32 ms =0);
# 728 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
extern "C" void s3eDeviceUnYield();
# 756 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
extern "C" void s3eDeviceYieldUntilEvent(int32 ms =0x7fffffffL);
# 791 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
extern "C" s3eResult s3eDeviceExecPushNext(const char* filename, const char* config_prepend =__null, const char* config_append =__null);
# 807 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
extern "C" void s3eDeviceExit(int code =0) __attribute__ ((noreturn));






typedef enum s3eDeviceState
{




    S3E_DEVICE_STATE_PAUSED = 3,





    S3E_DEVICE_STATE_EXITING = 4,




    S3E_DEVICE_STATE_RUNNING = 5
} s3eDeviceState;
# 844 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
typedef enum s3eDeviceCallback
{
# 857 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_PAUSE = 0,
# 869 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_UNPAUSE = 1,
# 881 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_EXIT = 2,
# 897 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_VOL_UP = 17,
# 913 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_VOL_DOWN = 18,
# 931 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_MAINS_POWER_CHANGED = 20,
# 943 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_BACKGROUND = 22,
# 955 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_FOREGROUND = 23,
# 969 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_NETWORK_ONLINE = 24,
# 983 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_NETWORK_OFFLINE = 25,
# 997 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_SIMULATOR_RESTART = 26,
# 1013 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_APPLICATION_ACTIVE = 27,
# 1029 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_APPLICATION_INACTIVE = 28,
# 1045 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_APPLICATION_FULLSCREEN = 29,
# 1061 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_APPLICATION_THUMBNAIL = 30,
# 1077 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    S3E_DEVICE_APPLICATION_INVISIBLE = 31,

    S3E_DEVICE_CALLBACK_MAX
} s3eDeviceCallback;
# 1098 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
typedef struct s3eDeviceVolChangeInfo
{





    s3eBool m_VolUp;
# 1123 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
    s3eBool m_OverrideDefaultBehaviour;
} s3eDeviceVolChangeInfo;





typedef struct s3eDeviceStateChangeInfo
{



    int32 m_State;
} s3eDeviceStateChangeInfo;
# 1158 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
extern "C" s3eResult s3eDeviceRegister(s3eDeviceCallback cbid, s3eCallback fn, void* userdata);
# 1178 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
extern "C" s3eResult s3eDeviceUnRegister(s3eDeviceCallback cbid, s3eCallback fn);







extern "C" void s3eDeviceRequestQuit();
# 1197 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
extern "C" s3eBool s3eDeviceCheckQuitRequest();
# 1207 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
extern "C" s3eBool s3eDeviceCheckPauseRequest();
# 1221 "c:/marmalade/6.2/s3e/h/s3eDevice.h"
extern "C" void s3eDeviceBacklightOn();


extern "C" s3eBool s3eDeviceNetworkCheckStart();


extern "C" s3eBool s3eDeviceNetworkCheckStop();


extern "C" void s3eDeviceLoaderCallStart(s3eBool lock, void* function);


extern "C" void s3eDeviceLoaderCallDone(s3eBool lock, void* function);
# 26 "c:/marmalade/6.2/s3e/h/s3e.h" 2
# 1 "c:/marmalade/6.2/s3e/h/s3eExt.h" 1
# 31 "c:/marmalade/6.2/s3e/h/s3eExt.h"
typedef enum s3eExtError
{
    S3E_EXT_ERR_NONE = 0,
    S3E_EXT_ERR_PARAM = 1,
    S3E_EXT_ERR_NOT_FOUND = 4
} s3eExtError;
# 49 "c:/marmalade/6.2/s3e/h/s3eExt.h"
extern "C" s3eExtError s3eExtGetError();
# 63 "c:/marmalade/6.2/s3e/h/s3eExt.h"
extern "C" const char* s3eExtGetErrorString();
# 96 "c:/marmalade/6.2/s3e/h/s3eExt.h"
extern "C" s3eResult s3eExtGet(const char* extension, void* functions, uint32 functionsLen);
# 106 "c:/marmalade/6.2/s3e/h/s3eExt.h"
extern "C" s3eResult s3eExtGetHash(uint32 hash, void* functions, uint32 functionsLen);

static inline s3eBool s3eExtAvailable(const char* extension, int32 len =0)
{
    if (s3eExtGet(extension, __null, len) == S3E_RESULT_SUCCESS)
        return (1);
    else
        return (0);
}
# 27 "c:/marmalade/6.2/s3e/h/s3e.h" 2

# 1 "c:/marmalade/6.2/s3e/h/s3eKeyboard.h" 1
# 38 "c:/marmalade/6.2/s3e/h/s3eKeyboard.h"
typedef enum s3eKey
{
    s3eKeyFirst = 0,

    s3eKeyEsc = 1,
    s3eKeyTab = 2,
    s3eKeyBackspace = 3,
    s3eKeyEnter = 4,
    s3eKeyLeftShift = 5,
    s3eKeyLeftControl = 6,
    s3eKeyReserved = 7,
    s3eKeySpace = 8,
    s3eKeyLeft = 9,
    s3eKeyUp = 10,
    s3eKeyRight = 11,
    s3eKeyDown = 12,
    s3eKey0 = 13,
    s3eKey1 = 14,
    s3eKey2 = 15,
    s3eKey3 = 16,
    s3eKey4 = 17,
    s3eKey5 = 18,
    s3eKey6 = 19,
    s3eKey7 = 20,
    s3eKey8 = 21,
    s3eKey9 = 22,
    s3eKeyA = 23,
    s3eKeyB = 24,
    s3eKeyC = 25,
    s3eKeyD = 26,
    s3eKeyE = 27,
    s3eKeyF = 28,
    s3eKeyG = 29,
    s3eKeyH = 30,
    s3eKeyI = 31,
    s3eKeyJ = 32,
    s3eKeyK = 33,
    s3eKeyL = 34,
    s3eKeyM = 35,
    s3eKeyN = 36,
    s3eKeyO = 37,
    s3eKeyP = 38,
    s3eKeyQ = 39,
    s3eKeyR = 40,
    s3eKeyS = 41,
    s3eKeyT = 42,
    s3eKeyU = 43,
    s3eKeyV = 44,
    s3eKeyW = 45,
    s3eKeyX = 46,
    s3eKeyY = 47,
    s3eKeyZ = 48,
    s3eKeyF1 = 49,
    s3eKeyF2 = 50,
    s3eKeyF3 = 51,
    s3eKeyF4 = 52,
    s3eKeyF5 = 53,
    s3eKeyF6 = 54,
    s3eKeyF7 = 55,
    s3eKeyF8 = 56,
    s3eKeyF9 = 57,
    s3eKeyF10 = 58,
    s3eKeyNumPad0 = 59,
    s3eKeyNumPad1 = 60,
    s3eKeyNumPad2 = 61,
    s3eKeyNumPad3 = 62,
    s3eKeyNumPad4 = 63,
    s3eKeyNumPad5 = 64,
    s3eKeyNumPad6 = 65,
    s3eKeyNumPad7 = 66,
    s3eKeyNumPad8 = 67,
    s3eKeyNumPad9 = 68,
    s3eKeyNumPadPlus = 69,
    s3eKeyNumPadMinus = 70,
    s3eKeyNumPadEnter = 71,
    s3eKeyRSK = 72,
    s3eKeyLSK = 73,
    s3eKeyLS = 74,
    s3eKeyRS = 75,
    s3eKeyHash = 76,
    s3eKeyStar = 77,


    s3eKeyOk = 78,
    s3eKeyCLR = 79,


    s3eKeyVolUp = 80,
    s3eKeyVolDown = 81,


    s3eKeyCamera = 82,
    s3eKeyMic = 83,
    s3eKeyFn = 84,
    s3eKeySym = 85,


    s3eKeyAccept = 86,
    s3eKeyEnd = 87,
    s3eKeyHomePage = 88,

    s3eKeyButton1 = 89,
    s3eKeyButton2 = 90,
    s3eKeyButton3 = 91,
    s3eKeyButton4 = 92,
    s3eKeyButton5 = 93,
    s3eKeyButton6 = 94,
    s3eKeyButton7 = 95,
    s3eKeyButton8 = 96,

    s3eKeyF11 = 97,
    s3eKeyF12 = 98,
    s3eKeyLeftAlt = 99,

    s3eKeyRightControl = 100,
    s3eKeyRightAlt = 101,
    s3eKeyRightShift = 102,
    s3eKeyBacktick = 103,
    s3eKeyComma = 104,
    s3eKeyPeriod = 105,
    s3eKeySlash = 106,
    s3eKeyBackSlash = 107,
    s3eKeySemicolon = 108,
    s3eKeyApostrophe = 109,
    s3eKeyLeftBracket = 110,
    s3eKeyRightBracket = 111,
    s3eKeyEquals = 112,
    s3eKeyMinus = 113,
    s3eKeyCapsLock = 114,

    s3eKeyNumPadPeriod = 115,
    s3eKeyNumPadSlash = 116,
    s3eKeyNumLock = 117,
    s3eKeyInsert = 118,
    s3eKeyHome = 119,
    s3eKeyPageUp = 120,
    s3eKeyPageDown = 121,
    s3eKeyKbEnd = 122,
    s3eKeyDelete = 123,
    s3eKeyPause = 124,
    s3eKeyAt = 125,
    s3eKeyBack = 126,
    s3eKeyMenu = 127,
    s3eKeySearch = 128,
    s3eKey3DMode = 129,
    s3eKeyMyApps = 130,

    s3eKeyAbsGameA = 200,
    s3eKeyAbsGameB = 201,
    s3eKeyAbsGameC = 202,
    s3eKeyAbsGameD = 203,
    s3eKeyAbsUp = 204,
    s3eKeyAbsDown = 205,
    s3eKeyAbsLeft = 206,
    s3eKeyAbsRight = 207,
    s3eKeyAbsOk = 208,
    s3eKeyAbsASK = 209,
    s3eKeyAbsBSK = 210,

    s3eKeyCount = 211
} s3eKey;
# 236 "c:/marmalade/6.2/s3e/h/s3eKeyboard.h"
typedef enum s3eKeyboardNumpadOrientation
{
    S3E_NUMPAD_ORIENT_NORMAL = 0,
    S3E_NUMPAD_ORIENT_ROT90 = 1,
    S3E_NUMPAD_ORIENT_ROT180 = 2,
    S3E_NUMPAD_ORIENT_ROT270 = 3
} s3eKeyboardNumpadOrientation;






typedef enum s3eKeyboardProperty
{





    S3E_KEYBOARD_HAS_NUMPAD = 0,






    S3E_KEYBOARD_HAS_ALPHA = 1,






    S3E_KEYBOARD_HAS_DIRECTION = 2,






    S3E_KEYBOARD_NUMPAD_ORIENTATION = 3,
# 303 "c:/marmalade/6.2/s3e/h/s3eKeyboard.h"
    S3E_KEYBOARD_GET_CHAR = 4
} s3eKeyboardProperty;







typedef enum s3eKeyboardError
{
    S3E_KEYBOARD_ERR_NONE = 0,
    S3E_KEYBOARD_ERR_PARAM = 1,
    S3E_KEYBOARD_ERR_TOO_MANY = 2,
    S3E_KEYBOARD_ERR_ALREADY_REG = 3,
    S3E_KEYBOARD_ERR_NOT_FOUND = 4,
    S3E_KEYBOARD_ERR_UNAVAIL = 5,

    S3E_KEYBOARD_ERR_DEVICE = 6
} s3eKeyboardError;






typedef enum s3eKeyboardCallback
{
# 344 "c:/marmalade/6.2/s3e/h/s3eKeyboard.h"
    S3E_KEYBOARD_KEY_EVENT = 0,
# 359 "c:/marmalade/6.2/s3e/h/s3eKeyboard.h"
    S3E_KEYBOARD_CHAR_EVENT = 1,

    S3E_KEYBOARD_CALLBACK_MAX
} s3eKeyboardCallback;






typedef struct s3eKeyboardEvent
{

    s3eKey m_Key;

    uint32 m_Pressed;
} s3eKeyboardEvent;






typedef struct s3eKeyboardCharEvent
{

    s3eWChar m_Char;
} s3eKeyboardCharEvent;
# 409 "c:/marmalade/6.2/s3e/h/s3eKeyboard.h"
extern "C" int32 s3eKeyboardGetInt(s3eKeyboardProperty property);
# 429 "c:/marmalade/6.2/s3e/h/s3eKeyboard.h"
extern "C" s3eResult s3eKeyboardSetInt(s3eKeyboardProperty property, int32 value);
# 457 "c:/marmalade/6.2/s3e/h/s3eKeyboard.h"
extern "C" s3eResult s3eKeyboardRegister(s3eKeyboardCallback cbid, s3eCallback fn, void* userdata);
# 476 "c:/marmalade/6.2/s3e/h/s3eKeyboard.h"
extern "C" s3eResult s3eKeyboardUnRegister(s3eKeyboardCallback cbid, s3eCallback fn);
# 488 "c:/marmalade/6.2/s3e/h/s3eKeyboard.h"
extern "C" s3eKeyboardError s3eKeyboardGetError();
# 502 "c:/marmalade/6.2/s3e/h/s3eKeyboard.h"
extern "C" const char* s3eKeyboardGetErrorString();







extern "C" void s3eKeyboardClearState();







extern "C" s3eResult s3eKeyboardUpdate();
# 534 "c:/marmalade/6.2/s3e/h/s3eKeyboard.h"
extern "C" int32 s3eKeyboardGetState(s3eKey key);






extern "C" s3eWChar s3eKeyboardGetChar();
# 552 "c:/marmalade/6.2/s3e/h/s3eKeyboard.h"
extern "C" s3eKey s3eKeyboardAnyKey();
# 574 "c:/marmalade/6.2/s3e/h/s3eKeyboard.h"
extern "C" s3eResult s3eKeyboardGetDisplayName(char* dst, s3eKey key, s3eBool terminateString =(1));





# 1 "c:/marmalade/6.2/s3e/h/legacy/s3eKeyboard_legacy.h" 1
# 581 "c:/marmalade/6.2/s3e/h/s3eKeyboard.h" 2
# 29 "c:/marmalade/6.2/s3e/h/s3e.h" 2
# 1 "c:/marmalade/6.2/s3e/h/s3eLicense.h" 1
# 36 "c:/marmalade/6.2/s3e/h/s3eLicense.h"
typedef enum s3eLicenseStatus
{
    S3E_LICENSE_EXPIRED = 0,
    S3E_LICENSE_DEMO = 0x10,
    S3E_LICENSE_USECOUNT = 0x20,
    S3E_LICENSE_EXPIRYDATE = 0x21,
    S3E_LICENSE_EXPIRYMINSUSE = 0x22,
    S3E_LICENSE_PURCHASE = 0x100,
    S3E_LICENSE_SUBSCRIPTION = 0x200,
    S3E_LICENSE_UPGRADE = 0x300,
    S3E_LICENSE_NONCOMMERCIAL = 0x1000
} s3eLicenseStatus;






typedef enum s3eLicenseError
{
    S3E_LICENSE_ERR_NONE = 0,
    S3E_LICENSE_ERR_PARAM = 1
} s3eLicenseError;






typedef enum s3eLicenseProperty
{
    S3E_LICENSE_USES_LEFT,
    S3E_LICENSE_EXPIRY_DATE,
    S3E_LICENSE_MINS_LEFT,
    S3E_LICENSE_STATUS
} s3eLicenseProperty;




extern "C" int32 s3eLicenseGetInt(s3eLicenseProperty property);
# 88 "c:/marmalade/6.2/s3e/h/s3eLicense.h"
extern "C" s3eLicenseError s3eLicenseGetError();
# 102 "c:/marmalade/6.2/s3e/h/s3eLicense.h"
extern "C" const char* s3eLicenseGetErrorString();
# 111 "c:/marmalade/6.2/s3e/h/s3eLicense.h"
extern "C" s3eResult s3eLicenseBuy();
# 30 "c:/marmalade/6.2/s3e/h/s3e.h" 2
# 1 "c:/marmalade/6.2/s3e/h/s3eMemory.h" 1
# 38 "c:/marmalade/6.2/s3e/h/s3eMemory.h"
typedef enum s3eMemoryProperty
{
# 55 "c:/marmalade/6.2/s3e/h/s3eMemory.h"
    S3E_MEMORY_HEAP = 0,





    S3E_MEMORY_SIZE = 1,





    S3E_MEMORY_FREE = 2,





    S3E_MEMORY_USED = 3,






    S3E_MEMORY_LFB = 4,






    S3E_MEMORY_FLAGS = 5
} s3eMemoryProperty;







typedef enum s3eMemoryFlags
{



    S3E_MEMORY_NO_MSG_ON_FAIL = (1 << 0),
# 112 "c:/marmalade/6.2/s3e/h/s3eMemory.h"
    S3E_MEMORY_USE_STACK_ALLOCATOR = (1 << 1),
# 121 "c:/marmalade/6.2/s3e/h/s3eMemory.h"
    S3E_MEMORY_INACTIVE = (1 << 2)
} s3eMemoryFlags;
# 144 "c:/marmalade/6.2/s3e/h/s3eMemory.h"
extern "C" int32 s3eMemoryGetInt(s3eMemoryProperty property);
# 163 "c:/marmalade/6.2/s3e/h/s3eMemory.h"
extern "C" s3eResult s3eMemorySetInt(s3eMemoryProperty property, int32 value);
# 172 "c:/marmalade/6.2/s3e/h/s3eMemory.h"
typedef enum s3eMemoryError
{
    S3E_MEMORY_ERR_NONE = 0,
    S3E_MEMORY_ERR_PARAM = 1,
    S3E_MEMORY_ERR_UNAVAIL = 5,

    S3E_MEMORY_ERR_INVALID_PTR = 1000,
    S3E_MEMORY_ERR_NO_MEM = 1001,
    S3E_MEMORY_ERR_INVALID_STATE = 1002
} s3eMemoryError;
# 194 "c:/marmalade/6.2/s3e/h/s3eMemory.h"
extern "C" s3eMemoryError s3eMemoryGetError();
# 208 "c:/marmalade/6.2/s3e/h/s3eMemory.h"
extern "C" const char* s3eMemoryGetErrorString();
# 229 "c:/marmalade/6.2/s3e/h/s3eMemory.h"
extern "C" void* s3eMalloc(int size);
# 253 "c:/marmalade/6.2/s3e/h/s3eMemory.h"
extern "C" void* s3eRealloc(void* item, int newSize);
# 267 "c:/marmalade/6.2/s3e/h/s3eMemory.h"
extern "C" void s3eFree(void* item);
# 286 "c:/marmalade/6.2/s3e/h/s3eMemory.h"
extern "C" void* s3eMallocBase(int size);
# 312 "c:/marmalade/6.2/s3e/h/s3eMemory.h"
extern "C" void* s3eReallocBase(void* item, int newSize);
# 324 "c:/marmalade/6.2/s3e/h/s3eMemory.h"
extern "C" void s3eFreeBase(void* item);
# 345 "c:/marmalade/6.2/s3e/h/s3eMemory.h"
extern "C" s3eResult s3eMemoryHeapDestroy(int32 heapID, s3eBool failIfNotEmpty);
# 360 "c:/marmalade/6.2/s3e/h/s3eMemory.h"
extern "C" s3eResult s3eMemoryHeapCreate(int32 heapID);
# 369 "c:/marmalade/6.2/s3e/h/s3eMemory.h"
extern "C" void* s3eMemoryHeapAddress(int32 heapID);



typedef void*(*s3eMallocFn)(int size);
typedef void*(*s3eReallocFn)(void* item, int size);
typedef void (*s3eFreeFn)(void* item);




typedef struct s3eMemoryUsrMgr
{
    s3eMallocFn m_Malloc;
    s3eReallocFn m_Realloc;
    s3eFreeFn m_Free;
} s3eMemoryUsrMgr;
# 407 "c:/marmalade/6.2/s3e/h/s3eMemory.h"
extern "C" s3eResult s3eMemorySetUserMemMgr(s3eMemoryUsrMgr* callbacks);
# 429 "c:/marmalade/6.2/s3e/h/s3eMemory.h"
extern "C" s3eResult s3eMemoryGetUserMemMgr(s3eMemoryUsrMgr* callbacks);
# 31 "c:/marmalade/6.2/s3e/h/s3e.h" 2
# 1 "c:/marmalade/6.2/s3e/h/s3ePointer.h" 1
# 37 "c:/marmalade/6.2/s3e/h/s3ePointer.h"
typedef enum s3ePointerType
{
    S3E_POINTER_TYPE_INVALID = 0,
    S3E_POINTER_TYPE_MOUSE = 1,
    S3E_POINTER_TYPE_STYLUS = 2
} s3ePointerType;







typedef enum s3eStylusType
{
    S3E_STYLUS_TYPE_INVALID = 0,
    S3E_STYLUS_TYPE_STYLUS = 1,
    S3E_STYLUS_TYPE_FINGER = 2
} s3eStylusType;
# 68 "c:/marmalade/6.2/s3e/h/s3ePointer.h"
typedef enum s3ePointerProperty
{



    S3E_POINTER_AVAILABLE = 0,






    S3E_POINTER_HIDE_CURSOR = 1,




    S3E_POINTER_TYPE = 2,




    S3E_POINTER_STYLUS_TYPE = 3,




    S3E_POINTER_MULTI_TOUCH_AVAILABLE = 4

} s3ePointerProperty;
# 111 "c:/marmalade/6.2/s3e/h/s3ePointer.h"
extern "C" int32 s3ePointerGetInt(s3ePointerProperty property);
# 128 "c:/marmalade/6.2/s3e/h/s3ePointer.h"
extern "C" s3eResult s3ePointerSetInt(s3ePointerProperty property, int32 value);
# 137 "c:/marmalade/6.2/s3e/h/s3ePointer.h"
typedef enum s3ePointerCallback
{







    S3E_POINTER_BUTTON_EVENT,
# 155 "c:/marmalade/6.2/s3e/h/s3ePointer.h"
    S3E_POINTER_MOTION_EVENT,
# 166 "c:/marmalade/6.2/s3e/h/s3ePointer.h"
    S3E_POINTER_TOUCH_EVENT,
# 177 "c:/marmalade/6.2/s3e/h/s3ePointer.h"
    S3E_POINTER_TOUCH_MOTION_EVENT,
    S3E_POINTER_CALLBACK_MAX
} s3ePointerCallback;
# 201 "c:/marmalade/6.2/s3e/h/s3ePointer.h"
extern "C" s3eResult s3ePointerRegister(s3ePointerCallback cbid, s3eCallback fn, void* userData);
# 218 "c:/marmalade/6.2/s3e/h/s3ePointer.h"
extern "C" s3eResult s3ePointerUnRegister(s3ePointerCallback cbid, s3eCallback fn);
# 227 "c:/marmalade/6.2/s3e/h/s3ePointer.h"
typedef enum s3ePointerError
{
    S3E_POINTER_ERR_NONE = 0,
    S3E_POINTER_ERR_PARAM = 1,
    S3E_POINTER_ERR_TOO_MANY = 2,
    S3E_POINTER_ERR_ALREADY_REG = 3,
    S3E_POINTER_ERR_NOT_FOUND = 4,
    S3E_POINTER_ERR_UNAVAIL = 5
} s3ePointerError;







extern "C" s3ePointerError s3ePointerGetError();







extern "C" const char* s3ePointerGetErrorString();






typedef enum s3ePointerState
{
    S3E_POINTER_STATE_UP = 0,
    S3E_POINTER_STATE_DOWN = 1,
    S3E_POINTER_STATE_PRESSED = 2,
    S3E_POINTER_STATE_RELEASED = 4,
    S3E_POINTER_STATE_UNKNOWN
} s3ePointerState;






typedef enum s3ePointerButton
{
    S3E_POINTER_BUTTON_SELECT = 0,
    S3E_POINTER_BUTTON_LEFTMOUSE = 0,
    S3E_POINTER_BUTTON_RIGHTMOUSE = 1,
    S3E_POINTER_BUTTON_MIDDLEMOUSE = 2,
    S3E_POINTER_BUTTON_MOUSEWHEELUP = 3,
    S3E_POINTER_BUTTON_MOUSEWHEELDOWN = 4,
    S3E_POINTER_BUTTON_MAX
} s3ePointerButton;




typedef struct s3ePointerEvent
{

    s3ePointerButton m_Button;

    uint32 m_Pressed;

    int32 m_x;

    int32 m_y;
} s3ePointerEvent;




typedef struct s3ePointerMotionEvent
{

    int32 m_x;

    int32 m_y;
} s3ePointerMotionEvent;




typedef struct s3ePointerTouchEvent
{





    uint32 m_TouchID;

    uint32 m_Pressed;

    int32 m_x;

    int32 m_y;
} s3ePointerTouchEvent;




typedef struct s3ePointerTouchMotionEvent
{





    uint32 m_TouchID;

    int32 m_x;

    int32 m_y;
} s3ePointerTouchMotionEvent;






extern "C" s3ePointerState s3ePointerGetState(s3ePointerButton button);






extern "C" int32 s3ePointerGetX();






extern "C" int32 s3ePointerGetY();
# 375 "c:/marmalade/6.2/s3e/h/s3ePointer.h"
extern "C" s3ePointerState s3ePointerGetTouchState(uint32 touchID);
# 387 "c:/marmalade/6.2/s3e/h/s3ePointer.h"
extern "C" int32 s3ePointerGetTouchX(uint32 touchID);
# 399 "c:/marmalade/6.2/s3e/h/s3ePointer.h"
extern "C" int32 s3ePointerGetTouchY(uint32 touchID);







extern "C" s3eResult s3ePointerUpdate();
# 32 "c:/marmalade/6.2/s3e/h/s3e.h" 2
# 1 "c:/marmalade/6.2/s3e/h/s3eSecureStorage.h" 1
# 38 "c:/marmalade/6.2/s3e/h/s3eSecureStorage.h"
typedef enum s3eSecureStorageError
{
    S3E_SECURESTORAGE_ERR_NONE = 0,
    S3E_SECURESTORAGE_ERR_PARAM = 1,
    S3E_SECURESTORAGE_ERR_NOT_FOUND = 4,
    S3E_SECURESTORAGE_ERR_DEVICE = 6,
    S3E_SECURESTORAGE_ERR_INSUFF = 1000,
    S3E_SECURESTORAGE_ERR_CORRUPT = 1001
} s3eSecureStorageError;
# 59 "c:/marmalade/6.2/s3e/h/s3eSecureStorage.h"
extern "C" s3eSecureStorageError s3eSecureStorageGetError();
# 72 "c:/marmalade/6.2/s3e/h/s3eSecureStorage.h"
extern "C" const char* s3eSecureStorageGetErrorString();
# 96 "c:/marmalade/6.2/s3e/h/s3eSecureStorage.h"
extern "C" s3eResult s3eSecureStoragePut(void* data, uint16 size);
# 119 "c:/marmalade/6.2/s3e/h/s3eSecureStorage.h"
extern "C" s3eResult s3eSecureStorageGet(void* data, uint16 size);
# 33 "c:/marmalade/6.2/s3e/h/s3e.h" 2
# 1 "c:/marmalade/6.2/s3e/h/s3eSound.h" 1
# 46 "c:/marmalade/6.2/s3e/h/s3eSound.h"
typedef enum s3eSoundProperty
{





    S3E_SOUND_VOLUME = 0,
# 66 "c:/marmalade/6.2/s3e/h/s3eSound.h"
    S3E_SOUND_OUTPUT_FREQ = 1,







    S3E_SOUND_DEFAULT_FREQ = 2,




    S3E_SOUND_NUM_CHANNELS = 3,





    S3E_SOUND_USED_CHANNELS = 4,




    S3E_SOUND_AVAILABLE = 5,
# 103 "c:/marmalade/6.2/s3e/h/s3eSound.h"
    S3E_SOUND_VOLUME_DEFAULT = 6,
# 112 "c:/marmalade/6.2/s3e/h/s3eSound.h"
    S3E_SOUND_STEREO_ENABLED = 7
} s3eSoundProperty;
# 140 "c:/marmalade/6.2/s3e/h/s3eSound.h"
extern "C" int32 s3eSoundGetInt(s3eSoundProperty property);
# 162 "c:/marmalade/6.2/s3e/h/s3eSound.h"
extern "C" s3eResult s3eSoundSetInt(s3eSoundProperty property, int32 value);
# 171 "c:/marmalade/6.2/s3e/h/s3eSound.h"
typedef enum s3eSoundError
{
    S3E_SOUND_ERR_NONE = 0,
    S3E_SOUND_ERR_PARAM = 1,
    S3E_SOUND_ERR_TOO_MANY = 2,
    S3E_SOUND_ERR_ALREADY_REG = 3,
    S3E_SOUND_ERR_NOT_FOUND = 4,
    S3E_SOUND_ERR_UNAVAIL = 5
} s3eSoundError;
# 192 "c:/marmalade/6.2/s3e/h/s3eSound.h"
extern "C" s3eSoundError s3eSoundGetError();
# 205 "c:/marmalade/6.2/s3e/h/s3eSound.h"
extern "C" const char* s3eSoundGetErrorString();
# 219 "c:/marmalade/6.2/s3e/h/s3eSound.h"
extern "C" int s3eSoundGetFreeChannel();
# 234 "c:/marmalade/6.2/s3e/h/s3eSound.h"
extern "C" void s3eSoundPauseAllChannels();
# 248 "c:/marmalade/6.2/s3e/h/s3eSound.h"
extern "C" void s3eSoundResumeAllChannels();
# 263 "c:/marmalade/6.2/s3e/h/s3eSound.h"
extern "C" void s3eSoundStopAllChannels();






typedef enum s3eSoundChannelProperty
{
# 282 "c:/marmalade/6.2/s3e/h/s3eSound.h"
    S3E_CHANNEL_PITCH = 0,
# 291 "c:/marmalade/6.2/s3e/h/s3eSound.h"
    S3E_CHANNEL_RATE = 1,







    S3E_CHANNEL_USERVAR = 2,
# 308 "c:/marmalade/6.2/s3e/h/s3eSound.h"
    S3E_CHANNEL_VOLUME = 3,





    S3E_CHANNEL_STATUS = 4,





    S3E_CHANNEL_PAUSED = 5
} s3eSoundChannelProperty;
# 342 "c:/marmalade/6.2/s3e/h/s3eSound.h"
typedef enum s3eSoundChannelCallback
{
# 359 "c:/marmalade/6.2/s3e/h/s3eSound.h"
    S3E_CHANNEL_END_SAMPLE = 0,
# 405 "c:/marmalade/6.2/s3e/h/s3eSound.h"
    S3E_CHANNEL_GEN_AUDIO = 1,
# 419 "c:/marmalade/6.2/s3e/h/s3eSound.h"
    S3E_CHANNEL_STOP_AUDIO = 2,
# 443 "c:/marmalade/6.2/s3e/h/s3eSound.h"
    S3E_CHANNEL_GEN_AUDIO_STEREO = 3
} s3eSoundChannelCallback;
# 484 "c:/marmalade/6.2/s3e/h/s3eSound.h"
typedef struct s3eSoundEndSampleInfo
{



    int32 m_Channel;





    int32 m_RepsRemaining;






    int16* m_NewData;





    uint32 m_NumSamples;
} s3eSoundEndSampleInfo;
# 567 "c:/marmalade/6.2/s3e/h/s3eSound.h"
typedef struct s3eSoundGenAudioInfo
{
    int32 m_Channel;

    int16* m_Target;
    uint32 m_NumSamples;
    int32 m_Mix;

    int16* m_OrigStart;
    uint32 m_OrigNumSamples;
    uint32 m_OrigRepeat;

    s3eBool m_EndSample;
    s3eBool m_Stereo;
} s3eSoundGenAudioInfo;
# 609 "c:/marmalade/6.2/s3e/h/s3eSound.h"
extern "C" s3eResult s3eSoundChannelSetInt(int channel, s3eSoundChannelProperty property, int32 value);
# 628 "c:/marmalade/6.2/s3e/h/s3eSound.h"
extern "C" int32 s3eSoundChannelGetInt(int channel, s3eSoundChannelProperty property);
# 661 "c:/marmalade/6.2/s3e/h/s3eSound.h"
extern "C" s3eResult s3eSoundChannelPlay(int channel, int16* start, uint32 numSamples, int32 repeat, int32 loopfrom);
# 683 "c:/marmalade/6.2/s3e/h/s3eSound.h"
extern "C" s3eResult s3eSoundChannelStop(int channel);
# 704 "c:/marmalade/6.2/s3e/h/s3eSound.h"
extern "C" s3eResult s3eSoundChannelPause(int channel);
# 725 "c:/marmalade/6.2/s3e/h/s3eSound.h"
extern "C" s3eResult s3eSoundChannelResume(int channel);
# 754 "c:/marmalade/6.2/s3e/h/s3eSound.h"
extern "C" s3eResult s3eSoundChannelRegister(int channel, s3eSoundChannelCallback cbid, s3eCallback func, void* userData);
# 779 "c:/marmalade/6.2/s3e/h/s3eSound.h"
extern "C" s3eResult s3eSoundChannelUnRegister(int channel, s3eSoundChannelCallback cbid);
# 34 "c:/marmalade/6.2/s3e/h/s3e.h" 2
# 1 "c:/marmalade/6.2/s3e/h/s3eSocket.h" 1
# 36 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
typedef enum s3eSocketType
{
    S3E_SOCKET_TCP,
    S3E_SOCKET_UDP
} s3eSocketType;

typedef enum s3eNetworkType
{
    S3E_NETWORK_TYPE_NONE = 0,
    S3E_NETWORK_TYPE_UNKNOWN = 1,
    S3E_NETWORK_TYPE_LAN = 2,
    S3E_NETWORK_TYPE_WLAN = 3,
    S3E_NETWORK_TYPE_GPRS = 4,
    S3E_NETWORK_TYPE_UMTS = 5,
    S3E_NETWORK_TYPE_EVDO = 6,
    S3E_NETWORK_TYPE_CDMA2000 = 7,
    S3E_NETWORK_TYPE_HSDPA = 8,
    S3E_NETWORK_TYPE_WIMAX = 9,
    S3E_NETWORK_TYPE_BLUETOOTH = 10,
    S3E_NETWORK_TYPE_EDGE = 11,
    S3E_NETWORK_TYPE_CDMA = 12,
    S3E_NETWORK_TYPE_IDEN = 13,
    S3E_NETWORK_TYPE_LTE = 14,
    S3E_NETWORK_TYPE_EHRPD = 15,
    S3E_NETWORK_TYPE_HSPAPLUS = 16,
} s3eNetworkType;
# 88 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
typedef struct s3eSocket s3eSocket;
# 101 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
typedef uint32 s3eInetIPAddress;
# 114 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
typedef struct s3eInetAddress
{

    char m_Local;

    char m_LocalAddress[128];

    char m_Abstract;

    s3eInetIPAddress m_IPAddress;

    uint16 m_Port;

    char m_String[128];
} s3eInetAddress;
# 137 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
typedef enum s3eSocketProperty
{



    S3E_SOCKET_MAX_SOCKETS,



    S3E_SOCKET_NETWORK_AVAILABLE,



    S3E_SOCKET_NETWORK_TYPE,



    S3E_SOCKET_DOMAINNAME,



    S3E_SOCKET_HOSTNAME,



    S3E_SOCKET_HTTP_PROXY,



    S3E_SOCKET_UDP_AVAILABLE
} s3eSocketProperty;


typedef enum s3eSocketOption
{





    S3E_SOCKET_NODELAY = 1,







    S3E_SOCKET_KEEPALIVE = 2,







    S3E_SOCKET_BROADCAST = 3,
# 204 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
    S3E_SOCKET_ADD_MEMBERSHIP = 4,
# 217 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
    S3E_SOCKET_DROP_MEMBERSHIP = 5

} s3eSocketOption;
# 234 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" int32 s3eSocketGetInt(s3eSocketProperty socketProperty);
# 249 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eSocketSetOpt(s3eSocket* s, s3eSocketOption opt, void* value, int valueLen);
# 264 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eSocketGetOpt(s3eSocket* s, s3eSocketOption opt, void* out, int* outLen);
# 275 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" const char* s3eSocketGetString(s3eSocketProperty socketProperty);
# 284 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
typedef int32 (*s3eSocketCallbackFn)(s3eSocket* s, void* systemData, void* userData);
# 294 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
typedef enum s3eSocketError
{
    S3E_SOCKET_ERR_NONE = 0,
    S3E_SOCKET_ERR_PARAM = 1,
    S3E_SOCKET_ERR_TOO_MANY = 2,
    S3E_SOCKET_ERR_ALREADY_REG = 3,
    S3E_SOCKET_ERR_NOT_FOUND = 4,
    S3E_SOCKET_ERR_UNAVAIL = 5,
    S3E_SOCKET_ERR_UNSUPPORTED = 7,

    S3E_SOCKET_ERR_WOULDBLOCK = 1000,
    S3E_SOCKET_ERR_INPROGRESS = 1001,
    S3E_SOCKET_ERR_ALREADY = 1002,
    S3E_SOCKET_ERR_NOTSOCK = 1003,
    S3E_SOCKET_ERR_MSGSIZE = 1004,
    S3E_SOCKET_ERR_ADDRINUSE = 1005,
    S3E_SOCKET_ERR_NETDOWN = 1006,
    S3E_SOCKET_ERR_CONNRESET = 1007,
    S3E_SOCKET_ERR_ISCONN = 1008,
    S3E_SOCKET_ERR_NOTCONN = 1009,
    S3E_SOCKET_ERR_SHUTDOWN = 1010,
    S3E_SOCKET_ERR_TIMEDOUT = 1011,
    S3E_SOCKET_ERR_CONNREFUSED = 1012,
    S3E_SOCKET_ERR_UNKNOWN_HOST = 1013
} s3eSocketErrors;
# 333 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" s3eSocketErrors s3eSocketGetError();
# 347 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" const char* s3eSocketGetErrorString();
# 360 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eInetAton(s3eInetIPAddress* result, const char* addr);
# 370 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" uint32 s3eInetNtohl(uint32 addr);
# 380 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" uint32 s3eInetHtonl(uint32 addr);
# 390 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" uint16 s3eInetNtohs(uint16 addr);
# 400 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" uint16 s3eInetHtons(uint16 addr);
# 413 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" char* s3eInetNtoa(s3eInetIPAddress addr, char* buf, int len);
# 423 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" const char* s3eInetToString(const s3eInetAddress* s);
# 447 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eInetLookup(const char* hostname, s3eInetAddress* addr, s3eCallback func, void* userData);




extern "C" void s3eInetLookupCancel();
# 469 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" s3eSocket* s3eSocketCreate(s3eSocketType type, uint32 flags =0);
# 483 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eSocketClose(s3eSocket* socket);
# 514 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eSocketBind(s3eSocket* sock, const s3eInetAddress* addr, uint8 reuseAddress);
# 529 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eSocketGetLocalName(s3eSocket* sock, s3eInetAddress* addr);
# 542 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eSocketGetPeerName(s3eSocket* sock, s3eInetAddress* addr);
# 574 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eSocketConnect(s3eSocket* sock, const s3eInetAddress* addr, s3eSocketCallbackFn func, void* userdata);
# 595 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" int32 s3eSocketSend(s3eSocket* sock, const char* buf, uint32 len, int flags);
# 615 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" int32 s3eSocketRecv(s3eSocket* sock, char* buf, uint32 len, int flags);
# 636 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" int32 s3eSocketRecvFrom(s3eSocket* s, char* buf, uint32 len, int flags, s3eInetAddress* from);
# 661 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" int32 s3eSocketSendTo(s3eSocket* s, const char* buf, uint32 len, int flags, const s3eInetAddress* to);
# 681 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eSocketListen(s3eSocket* s, uint16 backlog);
# 702 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" s3eSocket* s3eSocketAccept(s3eSocket* s, s3eInetAddress* addr, s3eSocketCallbackFn callback, void* userdata);
# 716 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eSocketReadable(s3eSocket* s, s3eSocketCallbackFn readable, void* userData);
# 729 "c:/marmalade/6.2/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eSocketWritable(s3eSocket* s, s3eSocketCallbackFn writable, void* data);
# 35 "c:/marmalade/6.2/s3e/h/s3e.h" 2
# 1 "c:/marmalade/6.2/s3e/h/s3eSurface.h" 1
# 92 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
typedef enum s3eSurfacePixelType
{
    S3E_SURFACE_PIXEL_TYPE_RGB444 = 0x20 | 0x400 | 0x1,
    S3E_SURFACE_PIXEL_TYPE_RGB555 = 0x20 | 0x400 | 0x3,
    S3E_SURFACE_PIXEL_TYPE_RGB5551 = 0x20 | 0x400 | 0x6,
    S3E_SURFACE_PIXEL_TYPE_RGB565 = 0x20 | 0x400 | 0x2,
    S3E_SURFACE_PIXEL_TYPE_RGB666 = 0x40 | 0x400 | 0x4,
    S3E_SURFACE_PIXEL_TYPE_RGB888 = 0x40 | 0x400 | 0x5,
    S3E_SURFACE_PIXEL_TYPE_RGB888_3B = 0x30 | 0x400 | 0x5,
    S3E_SURFACE_PIXEL_TYPE_XRGB888 = 0x40 | 0x400 | 0x7,

    S3E_SURFACE_PIXEL_TYPE_BGR444 = 0x20 | 0x800 | 0x1,
    S3E_SURFACE_PIXEL_TYPE_BGR555 = 0x20 | 0x800 | 0x3,
    S3E_SURFACE_PIXEL_TYPE_BGR5551 = 0x20 | 0x800 | 0x6,
    S3E_SURFACE_PIXEL_TYPE_BGR565 = 0x20 | 0x800 | 0x2,
    S3E_SURFACE_PIXEL_TYPE_BGR666 = 0x40 | 0x800 | 0x4,
    S3E_SURFACE_PIXEL_TYPE_BGR888 = 0x40 | 0x800 | 0x5,
    S3E_SURFACE_PIXEL_TYPE_BGR888_3B = 0x30 | 0x800 | 0x5,
    S3E_SURFACE_PIXEL_TYPE_XBGR888 = 0x40 | 0x800 | 0x7
} s3eSurfacePixelType;






typedef enum s3eSurfaceBlitDirection
{

    S3E_SURFACE_BLIT_DIR_NORMAL = 0,


    S3E_SURFACE_BLIT_DIR_ROT90 = 1,


    S3E_SURFACE_BLIT_DIR_ROT180 = 2,


    S3E_SURFACE_BLIT_DIR_ROT270 = 3,





    S3E_SURFACE_BLIT_DIR_NATIVE = 4
} s3eSurfaceBlitDirection;






typedef struct s3eSurfaceInfo
{

    uint32 m_Width;

    uint32 m_Height;

    uint32 m_Pitch;

    s3eSurfacePixelType m_PixelType;

    void* m_Data;
} s3eSurfaceInfo;




extern "C" void s3eSurfaceClear(uint8 r, uint8 g, uint8 b);






extern "C" void s3eSurfaceBlank(uint8 bitpattern);







typedef enum s3eSurfaceProperty
{






    S3E_SURFACE_WIDTH = 0,







    S3E_SURFACE_HEIGHT = 1,






    S3E_SURFACE_PITCH = 2,





    S3E_SURFACE_PIXEL_TYPE = 3,


    S3E_SURFACE_DEVICE_WIDTH = 4,


    S3E_SURFACE_DEVICE_HEIGHT = 5,


    S3E_SURFACE_DEVICE_PIXEL_TYPE = 6,





    S3E_SURFACE_DEVICE_PITCH = 7,







    S3E_SURFACE_BLIT_DIRECTION = 8,


    S3E_SURFACE_DISPLAY = 9,





    S3E_SURFACE_NUM_DISPLAYS = 10,
# 249 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
    S3E_SURFACE_DEVICE_BLIT_DIRECTION = 11,
# 262 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
    S3E_SURFACE_DEVICE_WIDTH_QUANTISED = 12,
# 275 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
    S3E_SURFACE_DEVICE_HEIGHT_QUANTISED = 13,
# 291 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
    S3E_SURFACE_DEVICE_ORIENTATION_LOCK = 14,




    S3E_SURFACE_GL_MODE = 15,
} s3eSurfaceProperty;
# 311 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
extern "C" int32 s3eSurfaceGetInt(s3eSurfaceProperty property);
# 326 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
 extern "C" s3eResult s3eSurfaceSetInt(s3eSurfaceProperty property, int32 val);
# 337 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
typedef struct s3eSurfaceOrientation
{
    s3eBool m_OrientationChanged;
    uint32 m_Width;
    uint32 m_Height;
    s3eSurfaceBlitDirection m_DeviceBlitDirection;
    uint32 m_Pitch;
} s3eSurfaceOrientation;
# 354 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
typedef enum s3eSurfaceCallback
{
# 367 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
    S3E_SURFACE_COPYUP = 0,
# 380 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
    S3E_SURFACE_SCREENSIZE = 1,

    S3E_SURFACE_CALLBACK_MAX = 3
} s3eSurfaceCallback;
# 408 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
typedef struct s3eSurfaceCopyupInfo
{

    s3eSurfaceInfo m_SrcSurface;

    s3eSurfaceInfo m_DestSurface;

    uint32 m_X;

    uint32 m_Y;

    uint32 m_Width;

    uint32 m_Height;

    s3eSurfaceBlitDirection m_BlitDirection;
} s3eSurfaceCopyupInfo;
# 452 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
extern "C" s3eResult s3eSurfaceRegister(s3eSurfaceCallback cbid, s3eCallback fn, void* userData);
# 471 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
extern "C" s3eResult s3eSurfaceUnRegister(s3eSurfaceCallback cbid, s3eCallback fn);
# 480 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
typedef enum s3eSurfaceError
{
    S3E_SURFACE_ERR_NONE = 0,
    S3E_SURFACE_ERR_PARAM = 1,
    S3E_SURFACE_ERR_TOO_MANY = 2,
    S3E_SURFACE_ERR_ALREADY_REG = 3,
    S3E_SURFACE_ERR_NOT_FOUND = 4,
    S3E_SURFACE_ERR_DEVICE = 6,
    S3E_SURFACE_ERR_MEM = 8
} s3eSurfaceError;
# 502 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
extern "C" s3eSurfaceError s3eSurfaceGetError();
# 516 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
extern "C" const char* s3eSurfaceGetErrorString();
# 538 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
extern "C" void* s3eSurfacePtr();
# 573 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
extern "C" s3eResult s3eSurfaceShow();
# 663 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
extern "C" s3eResult s3eSurfaceSetup(s3eSurfacePixelType pixelType, uint32 pitch =0, void* ptr =__null, s3eSurfaceBlitDirection blitDirection =S3E_SURFACE_BLIT_DIR_NORMAL);
# 691 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
extern "C" void s3eSurfaceInvalidate(int32 x, int32 y, int32 dx, int32 dy);
# 705 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
extern "C" uint32 s3eSurfaceConvertRGB(uint8 r, uint8 g, uint8 b);
# 724 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
extern "C" s3eResult s3eSurfaceSetDisplayID(uint32 id);
# 734 "c:/marmalade/6.2/s3e/h/s3eSurface.h"
typedef enum
{
    S3E_SURFACE_ORIENTATION_LOCK_MIN = 0,




    S3E_SURFACE_ORIENTATION_FREE = 0,






    S3E_SURFACE_PORTRAIT = 1,






    S3E_SURFACE_LANDSCAPE = 2,





    S3E_SURFACE_PORTRAIT_FIXED = 3,





    S3E_SURFACE_LANDSCAPE_FIXED = 4,

    S3E_SURFACE_ORIENTATION_LOCK_MAX = 4
} s3eSurfaceOrientationLock;
# 36 "c:/marmalade/6.2/s3e/h/s3e.h" 2

# 1 "c:/marmalade/6.2/s3e/h/s3eThread.h" 1
# 59 "c:/marmalade/6.2/s3e/h/s3eThread.h"
typedef enum s3eThreadError
{
    S3E_THREAD_ERR_NONE = 0,
    S3E_THREAD_ERR_PARAM = 1,
    S3E_THREAD_ERR_TOO_MANY = 2,
    S3E_THREAD_ERR_ALREADY = 3,
    S3E_THREAD_ERR_UNKNOWN = 9,
    S3E_THREAD_ERR_TIMEOUT = 1000,
    S3E_THREAD_ERR_WRONG_THREAD = 1001
} s3eThreadError;


typedef struct _s3eThread s3eThread;


typedef struct _s3eThreadLock s3eThreadLock;


typedef struct _s3eThreadSem s3eThreadSem;
# 94 "c:/marmalade/6.2/s3e/h/s3eThread.h"
typedef void* (*s3eThreadStartFunc)(void*);
typedef void (*s3eThreadCleanupHandler)();

extern "C" {





s3eBool s3eThreadAvailable();
# 117 "c:/marmalade/6.2/s3e/h/s3eThread.h"
const char* s3eThreadGetErrorString();
# 130 "c:/marmalade/6.2/s3e/h/s3eThread.h"
s3eThreadError s3eThreadGetError();






int s3eThreadCount();
# 151 "c:/marmalade/6.2/s3e/h/s3eThread.h"
s3eThread* s3eThreadCreate(s3eThreadStartFunc startRoutine, void* arg =__null, s3eThreadCleanupHandler cleanup =__null, int stackSize =0, void* stackPtr =0);




s3eThread* s3eThreadGetCurrent();




void s3eThreadExit(void* retval);
# 170 "c:/marmalade/6.2/s3e/h/s3eThread.h"
s3eResult s3eThreadDetach(s3eThread* thread);
# 183 "c:/marmalade/6.2/s3e/h/s3eThread.h"
s3eResult s3eThreadJoin(s3eThread* thread, void** result =__null);







s3eResult s3eThreadCancel(s3eThread* thread);
# 205 "c:/marmalade/6.2/s3e/h/s3eThread.h"
s3eThreadLock* s3eThreadLockCreate();






s3eResult s3eThreadLockDestroy(s3eThreadLock* lock);
# 235 "c:/marmalade/6.2/s3e/h/s3eThread.h"
s3eResult s3eThreadLockAcquire(s3eThreadLock* lock, int timeout =-1);
# 248 "c:/marmalade/6.2/s3e/h/s3eThread.h"
s3eResult s3eThreadLockRelease(s3eThreadLock* lock);







s3eThreadSem* s3eThreadSemCreate(int initialValue);
# 268 "c:/marmalade/6.2/s3e/h/s3eThread.h"
s3eResult s3eThreadSemDestroy(s3eThreadSem* sem);
# 286 "c:/marmalade/6.2/s3e/h/s3eThread.h"
s3eResult s3eThreadSemWait(s3eThreadSem* sem, int timeout =-1);
# 301 "c:/marmalade/6.2/s3e/h/s3eThread.h"
s3eResult s3eThreadSemPost(s3eThreadSem* sem);
# 314 "c:/marmalade/6.2/s3e/h/s3eThread.h"
s3eResult s3eThreadSemGetValue(s3eThreadSem* sem, int* value);
# 333 "c:/marmalade/6.2/s3e/h/s3eThread.h"
s3eResult s3eThreadEnqueueCallback(s3eThread* thread, s3eCallback callback, void* userData);

}
# 38 "c:/marmalade/6.2/s3e/h/s3e.h" 2

# 1 "c:/marmalade/6.2/s3e/h/s3eTimer.h" 1
# 36 "c:/marmalade/6.2/s3e/h/s3eTimer.h"
typedef enum s3eTimerProperty
{
    S3E_TIMER_RESOLUTION
} s3eTimerProperty;
# 48 "c:/marmalade/6.2/s3e/h/s3eTimer.h"
typedef enum s3eTimerError
{
    S3E_TIMER_ERR_NONE = 0,
    S3E_TIMER_ERR_PARAM = 1,
    S3E_TIMER_ERR_TOO_MANY = 2,
    S3E_TIMER_ERR_ALREADY_REG = 3,
    S3E_TIMER_ERR_NOT_FOUND = 4,
    S3E_TIMER_ERR_UNAVAIL = 5
} s3eTimerError;
# 69 "c:/marmalade/6.2/s3e/h/s3eTimer.h"
extern "C" s3eTimerError s3eTimerGetError();
# 82 "c:/marmalade/6.2/s3e/h/s3eTimer.h"
extern "C" const char* s3eTimerGetErrorString();
# 98 "c:/marmalade/6.2/s3e/h/s3eTimer.h"
extern "C" int32 s3eTimerGetInt(s3eTimerProperty property);
# 112 "c:/marmalade/6.2/s3e/h/s3eTimer.h"
extern "C" int64 s3eTimerGetUST();
# 123 "c:/marmalade/6.2/s3e/h/s3eTimer.h"
extern "C" int64 s3eTimerGetUSTNanoseconds();




extern "C" uint64 s3eTimerGetMs();





extern "C" int64 s3eTimerGetUTC();
# 143 "c:/marmalade/6.2/s3e/h/s3eTimer.h"
extern "C" int64 s3eTimerGetLocaltimeOffset(int64* when =__null);
# 175 "c:/marmalade/6.2/s3e/h/s3eTimer.h"
extern "C" s3eResult s3eTimerSetTimer(uint32 ms, s3eCallback fn, void* userData);
# 196 "c:/marmalade/6.2/s3e/h/s3eTimer.h"
extern "C" s3eResult s3eTimerCancelTimer(s3eCallback fn, void* userData);
# 40 "c:/marmalade/6.2/s3e/h/s3e.h" 2

# 1 "c:/marmalade/6.2/s3e/h/s3eVersion.h" 1
# 42 "c:/marmalade/6.2/s3e/h/s3e.h" 2
# 1 "c:/marmalade/6.2/s3e/h/s3eVibra.h" 1
# 38 "c:/marmalade/6.2/s3e/h/s3eVibra.h"
typedef enum s3eVibraProperty
{





    S3E_VIBRA_AVAILABLE = 0,







    S3E_VIBRA_ENABLED = 1,





    S3E_VIBRA_THRESHOLD = 2
} s3eVibraProperty;
# 69 "c:/marmalade/6.2/s3e/h/s3eVibra.h"
typedef enum s3eVibraError
{
    S3E_VIBRA_ERR_NONE = 0,
    S3E_VIBRA_ERR_PARAM = 1,
    S3E_VIBRA_ERR_UNAVAIL = 5,
    S3E_VIBRA_ERR_DEVICE = 6,
    S3E_VIBRA_ERR_DISABLED = 1000
} s3eVibraError;
# 91 "c:/marmalade/6.2/s3e/h/s3eVibra.h"
extern "C" int32 s3eVibraGetInt(s3eVibraProperty property);
# 109 "c:/marmalade/6.2/s3e/h/s3eVibra.h"
extern "C" s3eResult s3eVibraSetInt(s3eVibraProperty property, int32 value);
# 122 "c:/marmalade/6.2/s3e/h/s3eVibra.h"
extern "C" s3eVibraError s3eVibraGetError();
# 135 "c:/marmalade/6.2/s3e/h/s3eVibra.h"
extern "C" const char* s3eVibraGetErrorString();
# 151 "c:/marmalade/6.2/s3e/h/s3eVibra.h"
extern "C" s3eResult s3eVibraVibrate(uint8 level, uint32 ms);






extern "C" void s3eVibraStop();
# 43 "c:/marmalade/6.2/s3e/h/s3e.h" 2
# 1 "c:/marmalade/6.2/s3e/h/s3eVideo.h" 1
# 80 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
typedef enum s3eVideoCodec
{







    S3E_VIDEO_CODEC_MPEG4 = 1,
# 98 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
    S3E_VIDEO_CODEC_3GPP = 2,





    S3E_VIDEO_CODEC_JPEG = 3,
# 113 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
    S3E_VIDEO_CODEC_3GPP_VIDEO_H263 = 4,
# 122 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
    S3E_VIDEO_CODEC_3GPP_VIDEO_H264 = 5,
# 131 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
    S3E_VIDEO_CODEC_3GPP_AUDIO_AMR = 6,







    S3E_VIDEO_CODEC_3GPP_AUDIO_AAC = 7,
# 148 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
    S3E_VIDEO_CODEC_MPEG4_VIDEO_MPEG4 = 8,
# 157 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
    S3E_VIDEO_CODEC_MPEG4_VIDEO_H264 = 9,







    S3E_VIDEO_CODEC_MPEG4_AUDIO_AAC = 10,






    S3E_VIDEO_CODEC_SWF = 11
} s3eVideoCodec;






typedef enum s3eVideoStatus
{




    S3E_VIDEO_STOPPED = 0,




    S3E_VIDEO_PLAYING = 1,




    S3E_VIDEO_PAUSED = 2,
# 205 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
    S3E_VIDEO_FAILED = 3
} s3eVideoStatus;
# 215 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
typedef enum s3eVideoProperty
{





    S3E_VIDEO_VOLUME = 0,





    S3E_VIDEO_STATUS = 1,





    S3E_VIDEO_POSITION = 2,
# 247 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
    S3E_VIDEO_VOLUME_DEFAULT = 3,


    S3E_VIDEO_AVAILABLE = 5

} s3eVideoProperty;
# 267 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
extern "C" int32 s3eVideoGetInt(s3eVideoProperty property);
# 286 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
extern "C" s3eResult s3eVideoSetInt(s3eVideoProperty property, int32 value);
# 296 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
typedef enum s3eVideoCallback
{
# 314 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
    S3E_VIDEO_STOP = 2,

    S3E_VIDEO_CALLBACK_MAX
} s3eVideoCallback;
# 339 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
extern "C" s3eResult s3eVideoRegister(s3eVideoCallback cbid, s3eCallback fn, void* userData);
# 357 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
extern "C" s3eResult s3eVideoUnRegister(s3eVideoCallback cbid, s3eCallback fn);
# 366 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
typedef enum s3eVideoError
{
    S3E_VIDEO_ERR_NONE = 0,
    S3E_VIDEO_ERR_PARAM = 1,
    S3E_VIDEO_ERR_TOO_MANY = 2,
    S3E_VIDEO_ERR_ALREADY_REG = 3,
    S3E_VIDEO_ERR_NOT_FOUND = 4,
    S3E_VIDEO_ERR_UNAVAIL = 5,
    S3E_VIDEO_ERR_DEVICE = 6,
    S3E_VIDEO_ERR_UNSUPPORTED = 7,
    S3E_VIDEO_ERR_MEM = 8,
    S3E_VIDEO_ERR_INVALID_DRIVE = 10,
    S3E_VIDEO_ERR_INVALID_PATH = 11,
    S3E_VIDEO_ERR_FILEFORMAT = 1000,
    S3E_VIDEO_ERR_WRONG_STATE = 1001
} s3eVideoError;
# 394 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
extern "C" s3eVideoError s3eVideoGetError();
# 408 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
extern "C" const char* s3eVideoGetErrorString();
# 498 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
extern "C" s3eResult s3eVideoPlay(const char* filename, uint32 repeatCount =1, int32 x =0, int32 y =0, int32 width =0, int32 height =0);
# 572 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
extern "C" s3eResult s3eVideoPlayFromBuffer(void* data, uint32 len, uint32 repeatCount =1, int32 x =0, int32 y =0, int32 width =0, int32 height =0);
# 598 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
extern "C" s3eResult s3eVideoPause();
# 619 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
extern "C" s3eResult s3eVideoResume();
# 636 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
extern "C" void s3eVideoStop();
# 648 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
extern "C" s3eBool s3eVideoIsPlaying();
# 672 "c:/marmalade/6.2/s3e/h/s3eVideo.h"
extern "C" s3eBool s3eVideoIsCodecSupported(s3eVideoCodec codec);







# 1 "c:/marmalade/6.2/s3e/h/legacy/s3eVideo_legacy.h" 1
# 681 "c:/marmalade/6.2/s3e/h/s3eVideo.h" 2
# 44 "c:/marmalade/6.2/s3e/h/s3e.h" 2
# 1 "c:/marmalade/6.2/s3e/h/s3eGL.h" 1
# 38 "c:/marmalade/6.2/s3e/h/s3eGL.h"
typedef enum s3eGLError
{
    S3E_GL_ERR_NONE = 0,
    S3E_GL_ERR_PARAM = 1,
    S3E_GL_ERR_TOO_MANY = 2,
    S3E_GL_ERR_ALREADY_REG = 3,
    S3E_GL_ERR_NOT_FOUND = 4,
    S3E_GL_ERR_UNAVAIL = 5,
} s3eGLError;






typedef enum s3eGLProperty
{





    S3E_GL_VERSION = 0,





    S3E_EGL_VERSION = 1,






    S3E_GL_MUST_SUSPEND = 2,

} s3eGLProperty;
# 87 "c:/marmalade/6.2/s3e/h/s3eGL.h"
extern "C" int32 s3eGLGetInt(s3eGLProperty property);
# 97 "c:/marmalade/6.2/s3e/h/s3eGL.h"
typedef enum s3eGLCallback
{
# 110 "c:/marmalade/6.2/s3e/h/s3eGL.h"
    S3E_GL_SUSPEND = 0,
# 122 "c:/marmalade/6.2/s3e/h/s3eGL.h"
    S3E_GL_RESUME = 1,

    S3E_GL_CALLBACK_MAX
} s3eGLCallback;
# 148 "c:/marmalade/6.2/s3e/h/s3eGL.h"
extern "C" s3eResult s3eGLRegister(s3eGLCallback cbid, s3eCallback fn, void* userdata);
# 168 "c:/marmalade/6.2/s3e/h/s3eGL.h"
extern "C" s3eResult s3eGLUnRegister(s3eGLCallback cbid, s3eCallback fn);
# 182 "c:/marmalade/6.2/s3e/h/s3eGL.h"
extern "C" s3eGLError s3eGLGetError();
# 196 "c:/marmalade/6.2/s3e/h/s3eGL.h"
extern "C" const char* s3eGLGetErrorString();
# 208 "c:/marmalade/6.2/s3e/h/s3eGL.h"
extern "C" void* s3eGLGetNativeWindow();
# 45 "c:/marmalade/6.2/s3e/h/s3e.h" 2
# 4 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/h/audio.h" 2
# 1 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSound.h" 1
# 16 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSound.h"
# 1 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwResHandlerWAV.h" 1
# 20 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwResHandlerWAV.h"
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwArray.h" 1
# 35 "c:/marmalade/6.2/modules/iwutil/h/IwArray.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/new" 1
# 21 "c:/marmalade/6.2/s3e/h/std/c++/new"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_prolog.h" 1
# 10 "c:/marmalade/6.2/s3e/h/std/c++/stl/_prolog.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_config.h" 1
# 62 "c:/marmalade/6.2/s3e/h/std/c++/stl/_config.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl_user_config.h" 1
# 63 "c:/marmalade/6.2/s3e/h/std/c++/stl/_config.h" 2




# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_config_compat.h" 1
# 68 "c:/marmalade/6.2/s3e/h/std/c++/stl/_config.h" 2



# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_site_config.h" 1
# 72 "c:/marmalade/6.2/s3e/h/std/c++/stl/_config.h" 2


# 1 "c:/marmalade/6.2/s3e/h/std/c++/config/stlcomp.h" 1
# 54 "c:/marmalade/6.2/s3e/h/std/c++/config/stlcomp.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/config/stl_gcc_s3e.h" 1
# 67 "c:/marmalade/6.2/s3e/h/std/c++/config/stl_gcc_s3e.h"
     typedef char __stl_char;
# 55 "c:/marmalade/6.2/s3e/h/std/c++/config/stlcomp.h" 2
# 75 "c:/marmalade/6.2/s3e/h/std/c++/stl/_config.h" 2
# 83 "c:/marmalade/6.2/s3e/h/std/c++/stl/_config.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/config/stl_confix.h" 1
# 84 "c:/marmalade/6.2/s3e/h/std/c++/stl/_config.h" 2
# 488 "c:/marmalade/6.2/s3e/h/std/c++/stl/_config.h"
namespace std { }
namespace __std_alias = std;
# 546 "c:/marmalade/6.2/s3e/h/std/c++/stl/_config.h"
namespace _STL { }

namespace stlport = _STL;
# 11 "c:/marmalade/6.2/s3e/h/std/c++/stl/_prolog.h" 2





# 1 "c:/marmalade/6.2/s3e/h/std/c++/config/_prolog.h" 1
# 17 "c:/marmalade/6.2/s3e/h/std/c++/stl/_prolog.h" 2
# 22 "c:/marmalade/6.2/s3e/h/std/c++/new" 2




# 1 "c:/marmalade/6.2/s3e/h/std/c++/cstddef" 1
# 37 "c:/marmalade/6.2/s3e/h/std/c++/cstddef"
# 1 "c:/marmalade/6.2/s3e/h/ext/../std/stddef.h" 1
# 15 "c:/marmalade/6.2/s3e/h/ext/../std/stddef.h"
typedef signed int ptrdiff_t;


    typedef unsigned int wint_t;
    typedef unsigned long int wctype_t;







typedef unsigned int size_t;
# 38 "c:/marmalade/6.2/s3e/h/std/c++/cstddef" 2



namespace _STL {
using ::ptrdiff_t;
using ::size_t;
}
# 27 "c:/marmalade/6.2/s3e/h/std/c++/new" 2
# 38 "c:/marmalade/6.2/s3e/h/std/c++/new"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/new.h" 1
# 52 "c:/marmalade/6.2/s3e/h/std/c++/new.h"
inline void* operator new(size_t, void* p) { return p;};
inline void* operator new[](size_t, void* p) { return p;};
inline void operator delete(void*, void*) {};
inline void operator delete[](void*, void*) {};
# 39 "c:/marmalade/6.2/s3e/h/std/c++/new" 2



# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_new.h" 1
# 11 "c:/marmalade/6.2/s3e/h/std/c++/stl/_new.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/exception" 1
# 58 "c:/marmalade/6.2/s3e/h/std/c++/exception"
# 1 "c:/marmalade/6.2/s3e/h/ext/../std/c++/exception.h" 1
# 18 "c:/marmalade/6.2/s3e/h/ext/../std/c++/exception.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/exception_gcc" 1
# 41 "c:/marmalade/6.2/s3e/h/std/c++/exception_gcc"
#pragma GCC visibility push(default)


extern "C++" {

namespace std
{
# 56 "c:/marmalade/6.2/s3e/h/std/c++/exception_gcc"
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();


    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }


    virtual ~bad_exception() throw();
  };


  typedef void (*terminate_handler) ();

  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();


  void terminate() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();


  void unexpected() __attribute__ ((__noreturn__));
# 104 "c:/marmalade/6.2/s3e/h/std/c++/exception_gcc"
  bool uncaught_exception() throw();
}

namespace __gnu_cxx
{
# 119 "c:/marmalade/6.2/s3e/h/std/c++/exception_gcc"
  void __verbose_terminate_handler ();
}

}


#pragma GCC visibility pop
# 19 "c:/marmalade/6.2/s3e/h/ext/../std/c++/exception.h" 2
# 59 "c:/marmalade/6.2/s3e/h/std/c++/exception" 2
# 75 "c:/marmalade/6.2/s3e/h/std/c++/exception"
namespace _STL {


using __std_alias::exception;
using __std_alias::bad_exception;
# 106 "c:/marmalade/6.2/s3e/h/std/c++/exception"
}
# 12 "c:/marmalade/6.2/s3e/h/std/c++/stl/_new.h" 2

namespace _STL {

struct nothrow_t {};


extern const nothrow_t nothrow;




class bad_alloc : public exception {
public:
  bad_alloc () throw() { }
  bad_alloc(const bad_alloc&) throw() { }
  bad_alloc& operator=(const bad_alloc&) throw() {return *this;}
  ~bad_alloc () throw() { }
  const char* what() const throw() { return "bad alloc"; }
};

}
# 50 "c:/marmalade/6.2/s3e/h/std/c++/stl/_new.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/new" 1
# 51 "c:/marmalade/6.2/s3e/h/std/c++/stl/_new.h" 2
# 80 "c:/marmalade/6.2/s3e/h/std/c++/stl/_new.h"
namespace _STL {





inline void* __stl_new(size_t __n) { void* __y = ::operator new(__n);if (__y == 0){;}return __y; }
inline void __stl_delete(void* __p) { ::operator delete(__p); }

}
# 43 "c:/marmalade/6.2/s3e/h/std/c++/new" 2



# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_epilog.h" 1
# 10 "c:/marmalade/6.2/s3e/h/std/c++/stl/_epilog.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/config/_epilog.h" 1
# 11 "c:/marmalade/6.2/s3e/h/std/c++/stl/_epilog.h" 2



# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_config_compat_post.h" 1
# 15 "c:/marmalade/6.2/s3e/h/std/c++/stl/_epilog.h" 2
# 47 "c:/marmalade/6.2/s3e/h/std/c++/new" 2
# 36 "c:/marmalade/6.2/modules/iwutil/h/IwArray.h" 2
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h" 1
# 15 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h"
# 1 "c:/marmalade/6.2/s3e/h/s3eTypes.h" 1
# 16 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h" 2
# 1 "c:/marmalade/6.2/s3e/h/s3eDebug.h" 1
# 17 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h" 2
# 1 "c:/marmalade/6.2/s3e/h/s3eDevice.h" 1
# 18 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h" 2
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwCore.h" 1
# 19 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h" 2


# 1 "c:/marmalade/6.2/s3e/h/std/stdarg.h" 1
# 15 "c:/marmalade/6.2/s3e/h/std/stdarg.h"
# 1 "c:/marmalade/6.2/s3e/h/std/sys/types.h" 1
# 16 "c:/marmalade/6.2/s3e/h/std/sys/types.h"
# 1 "c:/marmalade/6.2/s3e/h/std/stddef.h" 1
# 17 "c:/marmalade/6.2/s3e/h/std/sys/types.h" 2
# 1 "c:/marmalade/6.2/s3e/h/std/stdint.h" 1
# 19 "c:/marmalade/6.2/s3e/h/std/stdint.h"
typedef signed char int_least8_t;
typedef short int_least16_t;
typedef long int_least32_t;
typedef int64_t int_least64_t;

typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned long uint_least32_t;
typedef uint64_t uint_least64_t;

typedef signed char int_fast8_t;
typedef short int_fast16_t;
typedef long int_fast32_t;
typedef int64_t int_fast64_t;

typedef unsigned char uint_fast8_t;
typedef unsigned short uint_fast16_t;
typedef unsigned long uint_fast32_t;
typedef uint64_t uint_fast64_t;

typedef int64_t intmax_t;
typedef uint64_t uintmax_t;
# 18 "c:/marmalade/6.2/s3e/h/std/sys/types.h" 2
# 1 "c:/marmalade/6.2/s3e/h/std/sys/select.h" 1
# 24 "c:/marmalade/6.2/s3e/h/std/sys/select.h"
struct timeval;

typedef struct fd_set
{
    char fds_bits[256/8];
} fd_set;
# 39 "c:/marmalade/6.2/s3e/h/std/sys/select.h"
extern "C" {

int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);

}
# 19 "c:/marmalade/6.2/s3e/h/std/sys/types.h" 2



typedef long off_t;

typedef int64_t off64_t;


namespace _STL
{
typedef ::size_t size_t;
}


typedef uint u_int;
typedef uint8_t u_int8_t;
typedef uint16_t u_int16_t;
typedef uint32_t u_int32_t;
typedef uint64_t u_int64_t;

typedef unsigned short u_short;
typedef unsigned long u_long;
typedef unsigned char u_char;

typedef int ssize_t;
typedef int pid_t;
typedef short uid_t;
typedef short gid_t;
typedef int idtype_t;
typedef int id_t;
typedef uint32 mode_t;
typedef short dev_t;
typedef short ino_t;
typedef int key_t;
typedef void* caddr_t;
# 16 "c:/marmalade/6.2/s3e/h/std/stdarg.h" 2
# 54 "c:/marmalade/6.2/s3e/h/std/stdarg.h"
typedef __builtin_va_list va_list;
# 22 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h" 2
# 1 "c:/marmalade/6.2/s3e/h/std/stdio.h" 1
# 19 "c:/marmalade/6.2/s3e/h/std/stdio.h"
struct __XXFILE;
typedef struct __XXFILE FILE;

typedef uint32 fpos_t;
# 38 "c:/marmalade/6.2/s3e/h/std/stdio.h"
extern "C" {
# 54 "c:/marmalade/6.2/s3e/h/std/stdio.h"
extern FILE *__aeabi_stdin;
extern FILE *__aeabi_stdout;
extern FILE *__aeabi_stderr;
# 66 "c:/marmalade/6.2/s3e/h/std/stdio.h"
FILE *fopen(const char *path, const char *mode);
int fclose(FILE *fp);
int fcloseall();
int fflush(FILE *stream);

FILE *fopen(const char *path, const char *mode);
FILE *fdopen(int fildes, const char *mode);
FILE *freopen(const char *path, const char *mode, FILE *stream);

size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);

int fputc(int c, FILE *stream);
int fputs(const char *s, FILE *stream);
int putc(int c, FILE *stream);
int putchar(int c);
int puts(const char *s);

int fgetc(FILE *stream);
char *fgets(char *s, int size, FILE *stream);
int getc(FILE *stream);
int getchar(void);
char *gets(char *s);
int ungetc(int c, FILE *stream);

int fseek(FILE *stream, long offset, int whence);
long ftell(FILE *stream);
void rewind(FILE *stream);
int fgetpos(FILE *stream, fpos_t *pos);
int fsetpos(FILE *stream, fpos_t *pos);

void flockfile(FILE *filehandle);
int ftrylockfile(FILE *filehandle);
void funlockfile(FILE *filehandle);

int getc_unlocked(FILE *stream);
int getchar_unlocked(void);
int putc_unlocked(int c, FILE *stream);
int putchar_unlocked(int c);

FILE *popen(const char *command, const char *type);
int pclose(FILE *stream);

char *tempnam(const char *dir, const char *pfx);




int printf(const char *format, ...) __attribute__((format(printf, 1, 2)));



int fprintf(FILE *stream, const char* format, ...) __attribute__((format(printf, 2, 3)));



int sprintf(char *str, const char* format, ...) __attribute__((format(printf, 2, 3)));



int snprintf(char *str, size_t size, const char *format, ...) __attribute__((format(printf, 3, 4)));




int scanf(const char *format, ...);



int fscanf(FILE *stream, const char *format, ...);



int sscanf(const char *str, const char *format, ...);

void clearerr(FILE *stream);
int feof(FILE *stream);
int ferror(FILE *stream);
int fileno(FILE *stream);

int remove(const char *pathname);
int rename(const char *oldpath, const char *newpath);

void perror(const char *s);



FILE *tmpfile(void);
char *tmpnam(char *s);

void setbuf(FILE *stream, char *buf);
void setbuffer(FILE *stream, char *buf, size_t size);
void setlinebuf(FILE *stream);
int setvbuf(FILE *stream, char *buf, int mode , size_t size);



int vfprintf(FILE *stream, const char *format, va_list ap);
int vsprintf(char *str, const char *format, va_list ap);
int vsnprintf(char *str, size_t size, const char *format, va_list ap);
int vprintf(const char *format, va_list ap);
int asprintf(char **strp, const char *fmt, ...);
int vasprintf(char **strp, const char *fmt, va_list ap);

int vscanf(const char *format, va_list ap);
int vsscanf(const char *str, const char *format, va_list ap);
int vfscanf(FILE *stream, const char *format, va_list ap);

}
# 23 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h" 2
# 1 "c:/marmalade/6.2/s3e/h/std/stdlib.h" 1
# 16 "c:/marmalade/6.2/s3e/h/std/stdlib.h"
# 1 "c:/marmalade/6.2/s3e/h/std/malloc.h" 1
# 16 "c:/marmalade/6.2/s3e/h/std/malloc.h"
# 1 "c:/marmalade/6.2/s3e/h/std/alloca.h" 1
# 17 "c:/marmalade/6.2/s3e/h/std/alloca.h"
extern "C" {


    extern void *alloca(size_t __size);
# 35 "c:/marmalade/6.2/s3e/h/std/alloca.h"
}
# 17 "c:/marmalade/6.2/s3e/h/std/malloc.h" 2

extern "C" {

void *calloc(size_t nmemb, size_t size);
void *malloc(size_t size);
void free(void *ptr);
void *realloc(void *ptr, size_t size);

}
# 17 "c:/marmalade/6.2/s3e/h/std/stdlib.h" 2
# 28 "c:/marmalade/6.2/s3e/h/std/stdlib.h"
extern "C" {

double atof(const char* string);
int atoi(const char *nptr);
long atol(const char *nptr);
int64_t atoll(const char *nptr);
int64_t atoq(const char *nptr);
int abs(int j);
long int labs(long int j);
int64_t llabs(int64_t j);
void qsort(void *base, size_t nmemb, size_t size, int(*compar)(const void *, const void *));
void *bsearch(const void *key, const void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *));
void abort(void);
int putenv(char *string);
char *getenv(const char *name);
int setenv(const char *name, const char *value, int overwrite);
int unsetenv(const char *name);
void exit(int status) __attribute__ ((noreturn));
void _exit(int status) __attribute__ ((noreturn));
void _Exit(int status) __attribute__ ((noreturn));
unsigned long int strtoul(const char *nptr, char **endptr, int base);
uint64_t strtoull(const char *nptr, char **endptr, int base);
long int strtol(const char *nptr, char **endptr, int base);
int64_t strtoll(const char *nptr, char **endptr, int base);
double strtod(const char *nptr, char **endptr);
float strtof(const char *nptr, char **endptr);
long double strtold(const char *nptr, char **endptr);
int atexit(void (*function)(void));
int system(const char *command);
int posix_memalign(void **memptr, size_t alignment, size_t size);
char *mktemp(char *templ);
int mkstemp(char *templ);



int rand(void);
void srand(unsigned int seed);

long int random(void);
void srandom(unsigned int seed);

size_t __ctype_get_mb_cur_max();


int mblen(const char *s, size_t n);
int mbtowc(wchar_t *pwc, const char *s, size_t n);
int wctomb(char *s, wchar_t wc);
size_t mbstowcs(wchar_t *dest, const char *src, size_t n);
size_t wcstombs(char *dest, const wchar_t *src, size_t n);

typedef struct
{
    int quot;
    int rem;
} div_t;

typedef struct
{
    int quot;
    int rem;
} ldiv_t;

typedef struct
{
    int64_t quot;
    int64_t rem;
} lldiv_t;

div_t div(int numerator, int denominator);
ldiv_t ldiv(long numerator, long denominator);
lldiv_t lldiv(int64_t numerator, int64_t denominator);
# 112 "c:/marmalade/6.2/s3e/h/std/stdlib.h"
}
# 24 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h" 2
# 51 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h"
typedef void(*IwAssertTextCallback)(char* pBuffer);

extern "C" {

typedef s3eErrorShowResult(*IwAssertCallback)(const char* channel, const char* pExpr, const char* pFilename, int32 line, const char* message);
typedef s3eErrorShowResult(*IwErrorCallback)(const char* message);
# 65 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h"
 s3eBool IwDebugTraceIsChannelOn(const char* channel, s3eBool default_on);
# 74 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h"
void IwDebugTraceDisable(s3eBool disable);




 void IwDebugTraceSetTraceChannel(const char* channel);
# 91 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h"
 s3eBool IwDebugTraceChannelSwitch(const char* channel, s3eBool new_state);
# 101 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h"
 void IwDebugTraceLinePrintf(const char* fmt, ...)

__attribute__((format(printf, 1, 2)))

;






 void IwDebugTraceLineVPrintf(const char* fmt, va_list args);


 void IwDebugAssertSetUID(uint32 n);







 s3eBool IwDebugAssertIsChannelOn(const char* channel);







 void IwDebugClearConfigCache();
# 141 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h"
 void IwDebugAssertSetMessage(const char* fmt, ...)

__attribute__((format(printf, 1, 2)))

;
# 156 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h"
 void IwDebugAssertSetSolution(const char* fmt, ...)

__attribute__((format(printf, 1, 2)))

;







 s3eErrorShowResult IwDebugAssertShow(const char* pExpr, const char* pFilename, int32 line, uint8 ignorable);






 IwAssertTextCallback IwAssertRegisterTextCallback(IwAssertTextCallback fn);






 IwAssertCallback IwAssertRegisterCallback(IwAssertCallback fn);
# 192 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h"
 s3eErrorShowResult IwDebugErrorShow(const char* Args, ...)

__attribute__((format(printf, 1, 2)))

;






 IwErrorCallback IwDebugErrorRegisterCallback(IwErrorCallback fn);

}
# 353 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h"
    static inline void IwDebugExit()
    {
        abort();
    }
# 579 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/typeinfo" 1
# 21 "c:/marmalade/6.2/s3e/h/std/c++/typeinfo"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_prolog.h" 1
# 16 "c:/marmalade/6.2/s3e/h/std/c++/stl/_prolog.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/config/_prolog.h" 1
# 17 "c:/marmalade/6.2/s3e/h/std/c++/stl/_prolog.h" 2
# 22 "c:/marmalade/6.2/s3e/h/std/c++/typeinfo" 2





# 1 "c:/marmalade/6.2/s3e/h/std/c++/typeinfo.h" 1
# 20 "c:/marmalade/6.2/s3e/h/std/c++/typeinfo.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/exception" 1
# 75 "c:/marmalade/6.2/s3e/h/std/c++/exception"
namespace _STL {


using __std_alias::exception;
using __std_alias::bad_exception;
# 106 "c:/marmalade/6.2/s3e/h/std/c++/exception"
}
# 21 "c:/marmalade/6.2/s3e/h/std/c++/typeinfo.h" 2
namespace std
{
    using _STL::exception;
}
# 1 "c:/marmalade/6.2/s3e/h/std/c++/typeinfo_gcc" 1
# 39 "c:/marmalade/6.2/s3e/h/std/c++/typeinfo_gcc"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/exception" 1
# 75 "c:/marmalade/6.2/s3e/h/std/c++/exception"
namespace _STL {


using __std_alias::exception;
using __std_alias::bad_exception;
# 106 "c:/marmalade/6.2/s3e/h/std/c++/exception"
}
# 40 "c:/marmalade/6.2/s3e/h/std/c++/typeinfo_gcc" 2

#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 85 "c:/marmalade/6.2/s3e/h/std/c++/typeinfo_gcc"
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);

  protected:
    const char *__name;

  protected:
    explicit type_info(const char *__n): __name(__n) { }

  public:



    const char* name() const;


    bool before(const type_info& __arg) const;



    bool operator==(const type_info& __arg) const;
# 138 "c:/marmalade/6.2/s3e/h/std/c++/typeinfo_gcc"
    bool operator!=(const type_info& __arg) const
    { return !operator==(__arg); }


  public:

    virtual bool __is_pointer_p() const;

    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;
  };






  class bad_cast : public exception
  {
  public:
    bad_cast() throw() { }


    virtual ~bad_cast() throw();

    virtual const char* what() const throw();
  };


  class bad_typeid : public exception
  {
  public:
    bad_typeid () throw() { }


    virtual ~bad_typeid() throw();

    virtual const char* what() const throw();
  };
}

#pragma GCC visibility pop

}
# 26 "c:/marmalade/6.2/s3e/h/std/c++/typeinfo.h" 2
# 28 "c:/marmalade/6.2/s3e/h/std/c++/typeinfo" 2
# 43 "c:/marmalade/6.2/s3e/h/std/c++/typeinfo"
namespace _STL {



using __std_alias::type_info;



using __std_alias::bad_typeid;
# 61 "c:/marmalade/6.2/s3e/h/std/c++/typeinfo"
using __std_alias::bad_cast;


}
# 78 "c:/marmalade/6.2/s3e/h/std/c++/typeinfo"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_epilog.h" 1
# 10 "c:/marmalade/6.2/s3e/h/std/c++/stl/_epilog.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/config/_epilog.h" 1
# 11 "c:/marmalade/6.2/s3e/h/std/c++/stl/_epilog.h" 2



# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_config_compat_post.h" 1
# 15 "c:/marmalade/6.2/s3e/h/std/c++/stl/_epilog.h" 2
# 79 "c:/marmalade/6.2/s3e/h/std/c++/typeinfo" 2
# 580 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h" 2


template <class _To, class _From>
_To IwSafeCast(_From from)
{

    if (from != __null && dynamic_cast<_To>(from) == __null)
        {
            const _STL::type_info& srctype = typeid(*from);
            const char* src = srctype.name();
            const char* target = typeid(_To).name();
            do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Mis-casting pointer: 0x%p is a pointer to type '%s', which is not derived from '%s'", from, src, target); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h", 592, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    }

    return static_cast <_To> (from);
}
# 37 "c:/marmalade/6.2/modules/iwutil/h/IwArray.h" 2
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwMath.h" 1
# 16 "c:/marmalade/6.2/modules/iwutil/h/IwMath.h"
# 1 "c:/marmalade/6.2/s3e/h/std/float.h" 1
# 31 "c:/marmalade/6.2/s3e/h/std/float.h"
  extern "C" {
# 109 "c:/marmalade/6.2/s3e/h/std/float.h"
extern "C" {

unsigned _controlfp(unsigned, unsigned);
unsigned _clearfp(void);
unsigned _statusfp(void);

}
# 150 "c:/marmalade/6.2/s3e/h/std/float.h"
    }
# 17 "c:/marmalade/6.2/modules/iwutil/h/IwMath.h" 2
# 87 "c:/marmalade/6.2/modules/iwutil/h/IwMath.h"
static inline int32 IwRoundFraction(double aValue)
{
    double lPositive = (aValue < 0.0f) ? -aValue : aValue;
    double lDecimal = lPositive - (double) ((int32) lPositive);
    int32 lRetVal;

    if (aValue < 0.0f)
    {
        if (lDecimal >= 0.5f)
        {
            lRetVal = ((int32) aValue) - 1;
        }
        else
        {
            lRetVal = (int32) aValue;
        }
    }
    else
    {
        if (lDecimal >= 0.5f)
        {
            lRetVal = ((int32) aValue) + 1;
        }
        else
        {
            lRetVal = (int32) aValue;
        }
    }
    return lRetVal;
}







static inline uint8 iwlzc(uint32 a)
{
    uint8 r=0;
    if ((a >> 16) == 0) {r+=16; a<<=16;}
    if ((a >> 24) == 0) {r+=8; a<<=8;}
    if ((a >> 28) == 0) {r+=4; a<<=4;}
    if ((a >> 30) == 0) {r+=2; a<<=2;}
    if ((a >> 31) == 0) {r+=1;}
    return r;
}






static inline uint8 iwlog2(uint32 a)
{
    return (uint8)(31-iwlzc(a));
}
# 158 "c:/marmalade/6.2/modules/iwutil/h/IwMath.h"
static inline uint32 clz(uint32 a)
{

    int32 r=0;
    if ((a >> 16) == 0) {r+=16; a<<=16;}
    if ((a >> 24) == 0) {r+=8; a<<=8;}
    if ((a >> 28) == 0) {r+=4; a<<=4;}
    if ((a >> 30) == 0) {r+=2; a<<=2;}
    if ((a >> 31) == 0) {r+=1;}
    return r;
}
# 38 "c:/marmalade/6.2/modules/iwutil/h/IwArray.h" 2

# 1 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h" 1
       
# 18 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
# 1 "c:/marmalade/6.2/s3e/h/s3eFile.h" 1
# 19 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h" 2

class CIwManaged;
class CIwTextParserITX;
# 39 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
typedef void(*IwSerialiseUserCallback)();





struct IwSerialiseContext
{
    bool read;
    uint32 base;
    s3eFile* handle;
    char filename[160];
    uint32 bytesRead;
    uint32 callbackPeriod;
    uint8 buffer[8];
    int32 headBit;
    uint32 version;
    uint16 versionUser;
    uint16 pad;
    IwSerialiseUserCallback callback;
};
extern IwSerialiseContext g_IwSerialiseContext;
extern int g_IwSerialiseContextValid;
# 76 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
enum IwSerialiseMode
{
    IW_SERIALISE_WRITE = 0,
    IW_SERIALISE_READ = 1
};
# 89 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
static inline bool IwSerialiseIsReading() {return g_IwSerialiseContext.read == true;}
# 98 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
static inline bool IwSerialiseIsWriting() {return g_IwSerialiseContext.read == false;}
# 109 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
static inline void IwSerialiseSetUserVersion(uint16 v) {g_IwSerialiseContext.versionUser = v;}
# 118 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
static inline uint16 IwSerialiseGetUserVersion() {return g_IwSerialiseContext.versionUser;}







static inline bool IwIsSerialiseOpen(){return (g_IwSerialiseContextValid > 0);}
# 135 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
void IwSerialiseOpen(const char* filename, IwSerialiseMode mode, bool ram=false);
# 145 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
static inline void IwSerialiseOpen(const char* filename, bool read, bool ram=false)
{
    IwSerialiseOpen(filename, read ? IW_SERIALISE_READ : IW_SERIALISE_WRITE, ram);
}






bool IwSerialiseExists(const char* filename, bool ram=false);







bool IwSerialiseEOF();
# 173 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
void IwSerialiseOpenFromMemory(void* pBuffer, int size, IwSerialiseMode mode);







static inline void IwSerialiseOpenFromMemory(void* pBuffer, int size, bool read)
{
    IwSerialiseOpenFromMemory(pBuffer, size, read ? IW_SERIALISE_READ : IW_SERIALISE_WRITE);
}






void IwSerialiseClose();






void IwSerialiseResetCallbackCount();






void IwSerialiseSetCallbackPeriod(uint32 p);






void IwSerialiseSetCallback(IwSerialiseUserCallback cb);
# 221 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
static inline void _SerialiseScalarType(IwSerialiseContext& c, void* var, int itemSize, int numItems)
{

    if (c.read == true)
        s3eFileRead(var, itemSize, numItems, c.handle);
    else
        s3eFileWrite(var, itemSize, numItems, c.handle);
# 249 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
}
# 260 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
void IwSerialiseDouble(double& var, int n=1, int numBits=sizeof(double)*8, int stride=sizeof(double));
# 271 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
void IwSerialiseFloat(float& var, int n=1, int numBits=sizeof(float)*8, int stride=sizeof(float));
# 282 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
void IwSerialiseUInt64(uint64& var, int n=1, int numBits=sizeof(uint64)*8, int stride=sizeof(uint64));
# 293 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
void IwSerialiseInt64(int64& var, int n=1, int numBits=sizeof(int64)*8-1, int stride=sizeof(int64));
# 305 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
void IwSerialiseUInt32(uint32& var, int n=1, int numBits=sizeof(uint32)*8, int stride=sizeof(uint32));
# 316 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
void IwSerialiseInt32(int32& var, int n=1, int numBits=sizeof(int32)*8-1, int stride=sizeof(int32));
# 327 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
void IwSerialiseUInt16(uint16& var, int n=1, int numBits=sizeof(uint16)*8, int stride=sizeof(uint16));
# 338 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
void IwSerialiseInt16(int16& var, int n=1, int numBits=sizeof(int16)*8-1, int stride=sizeof(int16));
# 349 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
void IwSerialiseUInt8(uint8& var, int n=1, int numBits=sizeof(uint8)*8, int stride=sizeof(uint8));
# 360 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
void IwSerialiseInt8(int8& var, int n=1, int numBits=sizeof(int8)*8-1, int stride=sizeof(int8));
# 371 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
void IwSerialiseChar(char& var, int n=1, int numBits=sizeof(int8)*8-1, int stride=sizeof(char));
# 382 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
void IwSerialiseBool(bool& var, int n=1, int numBits=1, int stride=sizeof(bool));
# 392 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
void IwSerialiseEnum(void* pVar);





template <class T, bool SGN>
void _IwSerialiseBitDepthRequired(T& var, int n, int stride, void(*CB1)(T&, int, int, int))
{

    uint32 mb;
    if (g_IwSerialiseContext.read == false)
    {
        T* pVal = &var;
        uint32 t = n;
        mb = 1;
        while(t-- && (mb < sizeof(T)*8))
        {
            T v = *pVal;
            pVal += stride / sizeof(T);
            if (SGN)
            {
                if (v & (1ul << ((sizeof(T)*8) - 1)))
                    v = ~v;
            }
            while((v >= ((T)1 << mb)) && (mb < sizeof(T)*8))
                mb++;
        }
    }

    IwSerialiseUInt32(mb, 1, 6);
    (CB1)(var, n, mb, stride);



}
# 440 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
static inline void IwSerialiseCharBitDepthRequired(char& var, int n=1, int stride=sizeof(char))
{
    _IwSerialiseBitDepthRequired<char, true>(var, n, stride, IwSerialiseChar);
}
# 456 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
static inline void IwSerialiseInt8BitDepthRequired(int8& var, int n=1, int stride=sizeof(int8))
{
    _IwSerialiseBitDepthRequired<int8, true>(var, n, stride, IwSerialiseInt8);
}
# 472 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
static inline void IwSerialiseUInt8BitDepthRequired(uint8& var, int n=1, int stride=sizeof(uint8))
{
    _IwSerialiseBitDepthRequired<uint8, false>(var, n, stride, IwSerialiseUInt8);
}
# 488 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
static inline void IwSerialiseInt16BitDepthRequired(int16& var, int n=1, int stride=sizeof(int16))
{
    _IwSerialiseBitDepthRequired<int16, true>(var, n, stride, IwSerialiseInt16);
}
# 504 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
static inline void IwSerialiseUInt16BitDepthRequired(uint16& var, int n=1, int stride=sizeof(uint16))
{
    _IwSerialiseBitDepthRequired<uint16, false>(var, n, stride, IwSerialiseUInt16);
}
# 520 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
static inline void IwSerialiseInt32BitDepthRequired(int32& var, int n=1, int stride=sizeof(int32))
{
    _IwSerialiseBitDepthRequired<int32, true>(var, n, stride, IwSerialiseInt32);
}
# 536 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
static inline void IwSerialiseUInt32BitDepthRequired(uint32& var, int n=1, int stride=sizeof(uint32))
{
    _IwSerialiseBitDepthRequired<uint32, false>(var, n, stride, IwSerialiseUInt32);
}
# 591 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
void IwSerialiseMappedData(const uint16* pMap, void* _pData, int numStructs, int stride);
# 602 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
void IwSerialiseString(char* text, int maxLen=0);
# 615 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
void IwSerialiseManagedHash(void* pptr);






void IwSerialiseManagedObject(CIwManaged*& pObj);
# 633 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
void IwSerialiseFile(CIwTextParserITX* pParser, char const* filename, void* pptr, IwSerialiseMode mode);
# 642 "c:/marmalade/6.2/modules/iwutil/h/IwSerialise.h"
static inline void IwSerialiseFile(CIwTextParserITX* pParser, char const* filename, void* pptr, bool read)
{
    IwSerialiseFile(pParser, filename, pptr, read ? IW_SERIALISE_READ : IW_SERIALISE_WRITE);
}
# 40 "c:/marmalade/6.2/modules/iwutil/h/IwArray.h" 2

# 1 "c:/marmalade/6.2/modules/iwutil/h/IwAllocator.h" 1
# 19 "c:/marmalade/6.2/modules/iwutil/h/IwAllocator.h"
# 1 "c:/marmalade/6.2/s3e/h/s3eMemory.h" 1
# 20 "c:/marmalade/6.2/modules/iwutil/h/IwAllocator.h" 2
# 62 "c:/marmalade/6.2/modules/iwutil/h/IwAllocator.h"
class CIwDefaultMallocRouter
{
public:
    virtual ~CIwDefaultMallocRouter();
    virtual void* Alloc(uint32 size, uint32 objsize);
    virtual void Free(void* buf, uint32 objsize);
    virtual void* Realloc(void* buf, uint32 size, uint32 objsize);

    static CIwDefaultMallocRouter& Static();
    static void SetMallocRouter(CIwDefaultMallocRouter* a);

    static void* BaseAlloc(uint32 size, uint32 objsize);
    static void BaseFree(void* buf, uint32 objsize);
    static void* BaseRealloc(void* buf, uint32 size, uint32 objsize);
};
# 85 "c:/marmalade/6.2/modules/iwutil/h/IwAllocator.h"
template <class T>
class CIwMallocRouter : public CIwDefaultMallocRouter
{
public:
    static void* DoAlloc(uint32 size)
    {
        return BaseAlloc(size, sizeof(T));
    }
    static void DoFree(void* buf)
    {
        BaseFree(buf, sizeof(T));
    }
    static void* DoRealloc(void* buf, uint32 size)
    {
        return BaseRealloc(buf, size, sizeof(T));
    }
};
# 112 "c:/marmalade/6.2/modules/iwutil/h/IwAllocator.h"
template <class T, class M = CIwMallocRouter<T> > class CIwAllocator
{
public:
    typedef uint32 size_type;
    typedef int32 difference_type;
    typedef T* pointer;
    typedef const T* const_pointer;
    typedef T& reference;
    typedef const T& const_reference;
    typedef T value_type;
# 133 "c:/marmalade/6.2/modules/iwutil/h/IwAllocator.h"
    pointer allocate(size_type s)
    {
        return (pointer)M::DoAlloc(s);
    }





    pointer reallocate(pointer p, size_type s)
    {
        return (pointer)M::DoRealloc(p, s);
    }

    void deallocate(pointer p, size_type) { M::DoFree(p); }




};
# 42 "c:/marmalade/6.2/modules/iwutil/h/IwArray.h" 2






template <class X, class A>
class ReallocateDefault
{
public:
    static X* Reallocate(uint32 q, uint32 num_p, uint32 max_p, X* p, A& a)
    {
        return a.reallocate(p, q*sizeof(X));
    }
};

template <class X, class A>
class ReallocateStandard
{
public:
    static X* Reallocate(uint32 q, uint32 num_p, uint32 max_p, X* p, A& a)
    {
        X* new_p = a.allocate(q*sizeof(X));
        for (uint32 i = 0; i < num_p; i++)
        {
            new (&new_p[i]) X(p[i]);
            p[i].~X();
        }
        a.deallocate(p, max_p);
        return new_p;
    }
};






template <class X, class A=CIwAllocator<X>, class REALLOCATE = ReallocateDefault<X, A > >
class CIwArray
{
protected:
    X * p;
    uint32 num_p;
    uint32 max_p;
    bool block_delete : 1;
    bool no_grow : 1;
public:
    typedef X * iterator;
    typedef const X * const_iterator;





    iterator begin() const { return p; }





    iterator end() const { return p+num_p; }




    bool empty() const { return num_p==0; }




    uint32 size() const { return num_p; }





    uint32 capacity() const { return max_p; }





    X* data() { return p; }





    explicit CIwArray(uint32 sz=0) : p(0), num_p(0), max_p(0), block_delete(false), no_grow(false)
    {
        resize(sz);
        clear();
    }

    ~CIwArray()
    {
        for (uint32 i=0; i<num_p; i++)
            p[i].~X();
        if (!block_delete)
        {
            a.deallocate(p, num_p);
            p = 0;
        }
    }






    CIwArray(CIwArray const & v) : p(0), num_p(0), max_p(0), block_delete(false), no_grow(false)
    {
        (*this) = v;
    }







    void SerialiseHeader()
    {

        if (g_IwSerialiseContext.read)
        {
            uint32 s;
            IwSerialiseUInt32(s);
            resize_optimised(s);
        }
        else
        {
            uint32 s = size();
            IwSerialiseUInt32(s);
        }

    }






    void operator=(CIwArray const & v)
    {
        clear();
        if (v.size() < max_p/2 || v.size() > max_p)
            set_capacity(v.size());
        for (uint32 i=0; i<v.size(); i++)
            push_back( v.p[i] );
    }





    void clear()
    {
        truncate(0);
    }






    void clear_optimised()
    {
        truncate(0);
        set_capacity(0);
    }




    int MemoryUsage() const
    {
        return sizeof(X)*max_p + sizeof(*this);
    }







    void resize_optimised(uint32 s)
    {
        if (s > num_p)
            set_capacity(s);
        resize(s);
        set_capacity(num_p);
    }






    void optimise_capacity()
    {
        if (!block_delete)
            set_capacity(num_p);
    }






    void reserve(uint32 q)
    {
        if (q > max_p)
        {
            set_capacity( q+(max_p<16 ? 2 : max_p/8) );
        }
    }






    void reserve_optimised(int q)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(q>=0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("q>=0", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 268, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        if (q > (int)max_p)
        {
            set_capacity( q );
        }
    }







    void resize_quick(const uint32 q)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(q <= max_p)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("q <= max_p", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 283, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        num_p = q;
    }






    void resize(const uint32 q)
    {
        if (q <= num_p)
            truncate(q);
        else
            push_back_qty(q-num_p);
    }
# 308 "c:/marmalade/6.2/modules/iwutil/h/IwArray.h"
    int find(X const & value) const
    {
        for (uint32 i=0; i<num_p; i++)
            if (p[i]==value)
            {
                return i;
            }
        return -1;
    }






    bool contains(X const & value) const
    {
        for (uint32 i=0; i<num_p; i++)
            if (p[i]==value)
            {
                return true;
            }
        return false;
    }
# 344 "c:/marmalade/6.2/modules/iwutil/h/IwArray.h"
    bool find_and_remove(X const & value)
    {
        for (uint32 i=0; i<num_p; i++)
            if (p[i]==value)
            {
                erase(i, i+1);
                return true;
            }
        return false;
    }
# 366 "c:/marmalade/6.2/modules/iwutil/h/IwArray.h"
    bool find_and_remove_fast(X const & value)
    {
        for (uint32 i=0; i<num_p; i++)
            if (p[i]==value)
            {
                erase_fast(i, i+1);
                return true;
            }
        return false;
    }







    void pop_back()
    {
        truncate(num_p-1);
    }







    X pop_back_get()
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(num_p > 0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("num_p > 0", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 396, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        X temp = p[num_p-1];
        pop_back();
        return temp;
    }
# 412 "c:/marmalade/6.2/modules/iwutil/h/IwArray.h"
    int erase_fast(const int i)
    {
        return erase_fast(i,i+1);
    }
# 428 "c:/marmalade/6.2/modules/iwutil/h/IwArray.h"
    int erase_fast(const int i, const int j)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(i >= 0 && j >= 0 && i <= j && (uint32)j<=num_p)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("i >= 0 && j >= 0 && i <= j && (uint32)j<=num_p", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 430, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        const uint32 w = j-i;
        const uint32 w_copy = (((w) < (num_p-j)) ? (w) : (num_p-j));

        for (uint32 k=0; k<w_copy; k++)
            p[i+k] = p[num_p-w_copy+k];

        truncate(num_p-w);
        return i;
    }





    iterator erase_fast(iterator i)
    {
        return p + erase_fast(i-p,i-p+1);
    }






    iterator erase_fast(iterator i, iterator j)
    {
        return p + erase_fast(i-p,j-p);
    }
# 470 "c:/marmalade/6.2/modules/iwutil/h/IwArray.h"
    int erase(const int i)
    {
        return erase(i, i+1);
    }
# 484 "c:/marmalade/6.2/modules/iwutil/h/IwArray.h"
    int erase(const uint32 i, const uint32 j)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(j>=i && j<=num_p)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("j>=i && j<=num_p", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 486, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        const int w = j-i;
        for (uint32 k=i; k<num_p-w; k++)
            p[k] = p[k+w];
        truncate(num_p-w);
        return i;
    }





    iterator erase(iterator i)
    {
        return p + erase(i-p,i-p+1);
    }






    iterator erase(iterator i, iterator j)
    {
        return p + erase(i-p,j-p);
    }







    void insert_slow(X const & x, uint32 pos)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(pos<=size())) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("pos<=size()", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 521, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        if (pos==size())
            push_back(x);
        else
        {
            reserve(num_p+1);
            for (int k=num_p-pos-1; k>=0; k--)
                p[pos+k+1] = p[pos+k];
            num_p++;
            p[pos] = x;
        }
    }







    void insert_slow(CIwArray &a, uint32 pos)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(pos<=size())) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("pos<=size()", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 542, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        if (pos==size())
            append(a);
        else
        {
            int s = a.size();
            reserve(num_p+s);
            for (int k=num_p-pos-1; k>=0; k--)
                p[pos+k+s] = p[pos+k];
            num_p+=s;
            for (int i=0;i<s;i++)
                p[pos+i] = a.p[i];
        }
    }






    X const & back() const
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(size()>0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("size()>0", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 564, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return p[size()-1];
    }
    X & back()
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(size()>0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("size()>0", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 569, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return p[size()-1];
    }






    X const & front() const
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(size()>0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("size()>0", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 580, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return p[0];
    }

    X & front()
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(size()>0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("size()>0", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 586, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return p[0];
    }





    int append(X const & x) { return push_back(x); }
# 603 "c:/marmalade/6.2/modules/iwutil/h/IwArray.h"
    int append(CIwArray & a)
    {
        int c = num_p;
        resize(num_p+a.num_p);
        for (uint32 d=0;d<a.num_p;d++)
            p[c+d] = a.p[d];
        return num_p-1;
    }







    int push_back(X const & x)
    {
# 632 "c:/marmalade/6.2/modules/iwutil/h/IwArray.h"
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(!(&x>=p && &x<p+max_p))) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("!(&x>=p && &x<p+max_p)", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 632, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        reserve(num_p+1);
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(num_p < max_p)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("num_p < max_p", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 635, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        new (p+num_p) X(x);
        return num_p++;
    }






    int push_back()
    {
        reserve(num_p+1);
        new (p+num_p) X;
        return num_p++;
    }







    void push_back_qty(X const & x, int qty)
    {
        if (!qty) return;
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(!(&x>=p && &x<p+max_p))) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("!(&x>=p && &x<p+max_p)", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 661, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(qty>0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("qty>0", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 662, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        reserve(num_p+qty);
        for (int i=0; i<qty; i++)
        {
            new (p+num_p+i) X(x);



        }
        num_p+=qty;
    }






    void push_back_qty(int qty)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(qty>=0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("qty>=0", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 681, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        reserve(num_p+qty);
        for (int i=0; i<qty; i++)
            new (p+num_p+i) X;
        num_p+=qty;
    }







    X & operator [] (int const i) const
    {
        uint32 index = (uint32)i;
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(i>=0 && index<num_p)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1731); IwDebugAssertSetMessage ("invalid index (%d) into array of size %u", i, (uint)num_p); switch (IwDebugAssertShow("i>=0 && index<num_p", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 697, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return p[index];
    }






    void Share(CIwArray<X,A> const & other)
    {
        if (!block_delete)
            clear_optimised();
        p=other.p;
        num_p=other.num_p;
        max_p=other.max_p;
        block_delete = true;
    }
# 723 "c:/marmalade/6.2/modules/iwutil/h/IwArray.h"
    void Share(X* buffer, int current, int max)
    {
        if (!block_delete)
            clear_optimised();
        p=buffer;
        num_p=current;
        max_p=max;
        block_delete = true;
    }





    bool CanResize()
    {
        return !block_delete;
    }
# 749 "c:/marmalade/6.2/modules/iwutil/h/IwArray.h"
    void LockSize(bool lock)
    {
        no_grow = lock;
    }





    void set_capacity(uint32 q);






    void truncate(const uint32 q)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(q<=num_p)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("q<=num_p", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 767, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        for (uint32 i=q; i<num_p; i++)
            p[i].~X();
        num_p = q;
    }





    void swap(CIwArray<X,A>& v)
    {
        X* tmp_p = p;
        uint32 tmp_num_p = num_p;
        uint32 tmp_max_p = max_p;
        bool tmp_block_delete = block_delete;
        bool tmp_no_grow = no_grow;

        p = v.p;
        num_p = v.num_p;
        max_p = v.max_p;
        block_delete = v.block_delete;
        no_grow = v.no_grow;

        v.p = tmp_p;
        v.num_p = tmp_num_p;
        v.max_p = tmp_max_p;
        v.block_delete = tmp_block_delete;
        v.no_grow = tmp_no_grow;
    }

private:
    A a;
};

template <class X, class A, class REALLOCATE>
void CIwArray<X,A,REALLOCATE>::set_capacity(uint32 q)
{
    do { static uint8 _s_IwAssertIgnoreThis = 0;; if (!(!block_delete)) { if( (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetUID(1733); IwDebugAssertSetMessage ("Attempting to change capacity of an array that doesn't own its data allocation."); switch (IwDebugAssertShow("!block_delete", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 806, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } return; } } while (0);
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(!no_grow || q <= max_p)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1732); IwDebugAssertSetMessage ("Attempting to expand an array that has its size locked."); switch (IwDebugAssertShow("!no_grow || q <= max_p", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 807, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(q>=num_p)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("q>=num_p", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 808, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    if (max_p==q) return;
    max_p = q;
    if (q==0)
    {
        a.deallocate(p, max_p);
        p = 0;
    }
    else
    {
        p = REALLOCATE::Reallocate(q, num_p, max_p, p, a);
    }
}



template<>
class CIwArray<bool, CIwAllocator<bool> >
{
    CIwArray<uint32, CIwAllocator<uint32> > b;
    int l;
    void fit()
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(l>=0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(268); IwDebugAssertSetMessage ("CIwArray<bool>"); switch (IwDebugAssertShow("l>=0", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 831, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        b.resize((l+31) >> 5);
    }
public:
    CIwArray<bool, CIwAllocator<bool> >(int sz=0) : l(sz) { fit(); }
    void resize(int s)
    {
        l = s;
        fit();
    }
    void resize(int s, bool set_value)
    {
        resize(s);
        set_all(set_value);
    }
    void clear()
    {
        resize(0);
    }
    void clear_optimised()
    {
        b.clear_optimised();
    }
    uint32 size() const
    {
        return l;
    }
    void push_back(bool i)
    {
        l++;
        fit();
        set(l-1, i);
    }
    bool pop_back()
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(l>0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(269); IwDebugAssertSetMessage ("CIwArray<bool>"); switch (IwDebugAssertShow("l>0", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 866, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        bool r = (*this)[l-1];
        l--;
        fit();
        return r;
    }
    void set_all(bool v)
    {
        for (uint32 i=0; i<b.size(); i++)
            b[i] = v ? 0xffffffff : 0;
    }
    void set(int i, bool v)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!((i>=0 && i<l))) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(270); IwDebugAssertSetMessage ("CIwArray<bool> overflow"); switch (IwDebugAssertShow("(i>=0 && i<l)", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 879, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        if (v)
            b[i>>5] |= (1<<(i&31));
        else
            b[i>>5] &= ~(1<<(i&31));
    }
    bool operator[] (int i) const
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!((i>=0 && i<l))) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(271); IwDebugAssertSetMessage ("CIwArray<bool> overflow"); switch (IwDebugAssertShow("(i>=0 && i<l)", "c:/marmalade/6.2/modules/iwutil/h/IwArray.h", 887, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return (b[i>>5] & (1<<(i&31))) != 0;
    }

    void Serialise()
    {

        int32 il = l;
        IwSerialiseInt32(il);
        l = il;
        b.SerialiseHeader();
        IwSerialiseUInt32(*b.data(), b.size());

    }
};
# 21 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwResHandlerWAV.h" 2
# 1 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManager.h" 1
       
# 16 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManager.h"
# 1 "c:/marmalade/6.2/modules/iwresmanager/h/IwResGroup.h" 1
       
# 16 "c:/marmalade/6.2/modules/iwresmanager/h/IwResGroup.h"
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h" 1
       
# 21 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwArray.h" 1
# 22 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h" 2
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwManaged.h" 1
       
# 18 "c:/marmalade/6.2/modules/iwutil/h/IwManaged.h"
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwClassFactory.h" 1
       
# 22 "c:/marmalade/6.2/modules/iwutil/h/IwClassFactory.h"
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwRuntime.h" 1
       
# 30 "c:/marmalade/6.2/modules/iwutil/h/IwRuntime.h"
# 1 "c:/marmalade/6.2/s3e/h/s3eTimer.h" 1
# 31 "c:/marmalade/6.2/modules/iwutil/h/IwRuntime.h" 2

extern "C" {
# 41 "c:/marmalade/6.2/modules/iwutil/h/IwRuntime.h"
typedef struct _IwCallStack
{
    const char** m_Stack;
    const char** m_StackPtr;

} IwCallStack;

void IwCallStackLeave(void* pObj);
void IwCallStackSetStackSizeLimit(uint32 limit);
void IwCallStackSetStackAddress(uint32 addr);
void IwCallStackPrintStack(char* pBuffer);
IwCallStack* IwCallStackGet();







void IwCallStackInit();
void IwCallStackTerm();


s3eBool IwCallStackEnter(const char* pName, void* pObj);




void IwCallStackFunctionDumpToFile(const char* filename);





    void IwCallStackSetCallStackTracing(bool bOnOrOff);



void IwProfileStartProfile(const char* name);
void IwProfileStopProfile();
void IwProfileIncrementFrameCounter();
void IwProfileReset();

}
# 93 "c:/marmalade/6.2/modules/iwutil/h/IwRuntime.h"
class CIwCallStack
{
public:

    CIwCallStack(const char* pName)
    {
        m_Entered = IwCallStackEnter(pName, (void*)this);
    }
    ~CIwCallStack()
    {
        if( m_Entered )
            IwCallStackLeave((void*)this);
    }
    s3eBool m_Entered;
};
# 214 "c:/marmalade/6.2/modules/iwutil/h/IwRuntime.h"
class CIwProfileNode
{
public:
    CIwProfileNode(const char* name, CIwProfileNode* parent);
    ~CIwProfileNode();

    CIwProfileNode* GetSubNode(const char* name);

    CIwProfileNode* GetParent() {return m_Parent;}
    CIwProfileNode* GetSibling() {return m_Sibling;}
    CIwProfileNode* GetChild() {return m_Child;}

    void Reset();
    void Call();
    bool Return();
    void NewFrame();

    const char* GetName() {return m_Name;}
    long GetTotalCalls() {return m_TotalCalls;}
    float GetTotalTime() {return m_TotalTime;}
    float GetLastTime() {return m_LastTime;}

    long GetLastFrameCalls(){ return m_LastFrameCalls; }
    float GetLastFrameTime() { return m_LastFrameTime; }
    float GetFrameTimeAvg() { return m_FrameWeightedAvg; }

    bool IsRemainingTimeNode() { return m_IsOtherTimeNode; }

protected:
    const char* m_Name;
    long m_TotalCalls;
    float m_TotalTime;
    float m_LastTime;
    float m_WeightedAvg;

    long m_FrameCalls;
    float m_FrameTime;
    float m_FrameWeightedAvg;

    long m_LastFrameCalls;
    float m_LastFrameTime;

    int32 m_StartTime;
    long m_RecursionCounter;

    bool m_IsOtherTimeNode;

    CIwProfileNode* m_Parent;
    CIwProfileNode* m_Child;
    CIwProfileNode* m_Sibling;
};




class CIwProfileIterator
{
public:

    void First();
    void Next();
    bool IsDone();

    void EnterChild(long index);
    void EnterParent();


    const char* GetCurrentName() {return m_CurrentChild->GetName();}
    long GetCurrentTotalCalls() {return m_CurrentChild->GetTotalCalls();}
    float GetCurrentTotalTime() {return m_CurrentChild->GetTotalTime();}
    float GetCurrentLastTime() {return m_CurrentChild->GetLastTime();}
    float GetCurrentLastFrameTime() {return m_CurrentChild->GetLastFrameTime();}
    long GetCurrentLastFrameCalls() {return m_CurrentChild->GetLastFrameCalls();}
    float GetCurrentFrameTimeAvg() {return m_CurrentChild->GetFrameTimeAvg();}
    bool IsCurrentRemainingTimeNode() {return m_CurrentChild->IsRemainingTimeNode();}




    const char* GetCurrentParentName() {return m_CurrentParent->GetName();}
    long GetCurrentParentTotalCalls() {return m_CurrentParent->GetTotalCalls();}
    float GetCurrentParentTotalTime() {return m_CurrentParent->GetTotalTime();}


protected:
    CIwProfileNode* m_CurrentParent;
    CIwProfileNode* m_CurrentChild;

    CIwProfileIterator(CIwProfileNode* start);
    friend class CIwProfileManager;
};




class CIwProfileManager
{
public:
    CIwProfileManager(uint32 maxNodes=200);
    ~CIwProfileManager();

    inline void SetActive(bool active) {m_Active = active;}
    void StartProfile(const char* name);
    void StopProfile();

    void Reset();
    void IncrementFrameCounter();
    inline long GetFrameCountSinceReset() {return m_FrameCounter;}
    float GetTimeSinceReset();

    inline CIwProfileIterator* GetIterator() {return new CIwProfileIterator(&m_Root);}
    inline void ReleaseIterator(CIwProfileIterator* iterator ) {delete iterator;}


    static CIwProfileManager& Get();

    static CIwProfileManager* g_Singleton;

    CIwProfileNode* AllocNode(const char* name, CIwProfileNode* parent);

private:
    bool m_Active;
    CIwProfileNode m_Root;
    CIwProfileNode* m_CurrentNode;
    long m_FrameCounter;
    int64 m_ResetTime;
    uint32* m_Memory;
    uint32* m_MemoryCursor;
    int32 m_FreeNodes;
};




class CIwProfileSample
{
public:
    CIwProfileSample(const char* name) {IwProfileStartProfile(name);}
    ~CIwProfileSample() {IwProfileStopProfile();}
};
# 23 "c:/marmalade/6.2/modules/iwutil/h/IwClassFactory.h" 2
# 42 "c:/marmalade/6.2/modules/iwutil/h/IwClassFactory.h"
typedef void*(*IwClassFactoryFn)();
typedef void*(*IwClassSizeFactoryFn)();
# 146 "c:/marmalade/6.2/modules/iwutil/h/IwClassFactory.h"
void IwClassFactoryReserve(int number);
# 156 "c:/marmalade/6.2/modules/iwutil/h/IwClassFactory.h"
void* IwClassFactoryCreate(uint32 hash);
# 165 "c:/marmalade/6.2/modules/iwutil/h/IwClassFactory.h"
bool IwClassFactoryExists(uint32 hash);
# 174 "c:/marmalade/6.2/modules/iwutil/h/IwClassFactory.h"
void* IwClassFactoryCreate(const char* name);
# 184 "c:/marmalade/6.2/modules/iwutil/h/IwClassFactory.h"
void IwClassFactoryAdd(uint32 hash, IwClassFactoryFn fn, uint32 size = 0);
# 193 "c:/marmalade/6.2/modules/iwutil/h/IwClassFactory.h"
void IwClassFactoryAdd(const char* name, IwClassFactoryFn fn, uint32 size = 0);
# 202 "c:/marmalade/6.2/modules/iwutil/h/IwClassFactory.h"
void IwClassFactoryRemove(uint32 hash);
# 211 "c:/marmalade/6.2/modules/iwutil/h/IwClassFactory.h"
IwClassFactoryFn IwClassFactoryGet(uint32 hash);

uint32 IwClassFactoryGetSize(uint32 hash);
# 223 "c:/marmalade/6.2/modules/iwutil/h/IwClassFactory.h"
void IwClassFactoryModify(uint32 hash, IwClassFactoryFn fn, uint32 size);
# 19 "c:/marmalade/6.2/modules/iwutil/h/IwManaged.h" 2
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwCopyingPtr.h" 1
       
# 30 "c:/marmalade/6.2/modules/iwutil/h/IwCopyingPtr.h"
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwMemory.h" 1
       
# 38 "c:/marmalade/6.2/modules/iwutil/h/IwMemory.h"
enum IwMemBucketID
{
    IW_MEM_BUCKET_ID_SYSTEM = 0,
    IW_MEM_BUCKET_ID_SYSTEM_DEBUG,
    IW_MEM_BUCKET_ID_USER,
};






enum IwMemBucketAllocFailBehaviour
{
    IW_MEM_BUCKET_ALLOC_FAIL_ERROR = 0,
    IW_MEM_BUCKET_ALLOC_FAIL_ASSERT,
    IW_MEM_BUCKET_ALLOC_FAIL_SILENT,

    IW_MEM_BUCKET_ALLOC_FAIL_DEFAULT = IW_MEM_BUCKET_ALLOC_FAIL_ERROR
};

class CIwMemBucket;

extern "C" {
# 74 "c:/marmalade/6.2/modules/iwutil/h/IwMemory.h"
void IwMemBucketCreate(uint32 bucketID, const char* name, uint32 size);
# 93 "c:/marmalade/6.2/modules/iwutil/h/IwMemory.h"
void IwMemBucketRegister(uint32 bucketID, const char* name, CIwMemBucket* bucket, void* data=__null);







void IwMemBucketFree(uint32 bucketID);







void IwMemBucketSet(uint32 bucketID);







uint32 IwMemBucketGetID();
# 127 "c:/marmalade/6.2/modules/iwutil/h/IwMemory.h"
int32 IwMemBucketGetFreeID(uint32 afterID = 0);







CIwMemBucket* IwMemBucketGet();







void IwMemBucketPush(uint32 bucketID);






void IwMemBucketPop();
# 172 "c:/marmalade/6.2/modules/iwutil/h/IwMemory.h"
void IwMemBucketSetAllocFailBehaviour(IwMemBucketAllocFailBehaviour behaviour);
# 182 "c:/marmalade/6.2/modules/iwutil/h/IwMemory.h"
IwMemBucketAllocFailBehaviour IwMemBucketGetAllocFailBehaviour();
# 199 "c:/marmalade/6.2/modules/iwutil/h/IwMemory.h"
uint32 IwMemBucketCheckpoint();







uint32 IwMemBucketDebugGetID(void* item);
# 219 "c:/marmalade/6.2/modules/iwutil/h/IwMemory.h"
uint32 IwMemBucketDebugCheck(uint32 bucketID, uint32 checkpoint, const char* filename);







void IwMemBucketVisualDump(const char* filename, int32 bucketID = -1);






typedef enum IwMemBucketDebugFlag
{
    IW_MEM_BUCKET_LOCK_FREE = 1 << 0,
    IW_MEM_BUCKET_LOCK_ALLOC = 1 << 1,
    IW_MEM_BUCKET_LOCK_SELECT = 1 << 2,
    IW_MEM_BUCKET_TRACE = 1 << 3,
    IW_MEM_BUCKET_LOCK_REALLOC = 1 << 4,
    IW_MEM_BUCKET_REUSE_IDS_FOR_REALLOC = 1 << 5,
} IwMemBucketDebugFlag;
# 251 "c:/marmalade/6.2/modules/iwutil/h/IwMemory.h"
void IwMemBucketDebugSetFlags(uint32 bucketID, uint32 flags);
# 260 "c:/marmalade/6.2/modules/iwutil/h/IwMemory.h"
void IwMemBucketDebugClearFlags(uint32 bucketID, uint32 flags);
# 270 "c:/marmalade/6.2/modules/iwutil/h/IwMemory.h"
void IwMemBucketDebugSetBreakpoint(uint32 allocationID);
# 289 "c:/marmalade/6.2/modules/iwutil/h/IwMemory.h"
uint32 IwMemBucketGetFree(uint32 bucketID);
# 298 "c:/marmalade/6.2/modules/iwutil/h/IwMemory.h"
uint32 IwMemBucketGetLargestFreeBlock(uint32 bucketID);
# 308 "c:/marmalade/6.2/modules/iwutil/h/IwMemory.h"
uint32 IwMemBucketGetUsed(uint32 bucketID);

}







class CIwAutoBucketSwitch
{
public:
    CIwAutoBucketSwitch(int bucket) : m_RestoreBucket(IwMemBucketGetID())
    {
        IwMemBucketSet(bucket);
    }
    ~CIwAutoBucketSwitch()
    {
        IwMemBucketSet(m_RestoreBucket);
    }

private:
    int m_RestoreBucket;
};
# 31 "c:/marmalade/6.2/modules/iwutil/h/IwCopyingPtr.h" 2



template<class T>
class CIwStandardAllocator
{
public:
    static T* allocate(uint32 size)
    {
        return (T*)s3eMalloc(size);
    }

    static T* reallocate(T* p, uint32 size)
    {
        return (T*)s3eRealloc(p, size);
    }

    static void deallocate(T* p, uint32) { s3eFree(p); }
};


template <class Type, class Allocator = CIwStandardAllocator<Type> >
class CIwCopyingPtr
{
public:
    CIwCopyingPtr() : m_Ptr(__null) {}
    ~CIwCopyingPtr()
    {
        if( m_Ptr )
        {
            m_Ptr->~Type();
            Allocator::deallocate(m_Ptr, 1);
        }
        m_Ptr = __null;
    }




    CIwCopyingPtr(const CIwCopyingPtr& rhs)
    {
        if (rhs.m_Ptr)
        {
            m_Ptr = new (Allocator::allocate(sizeof(Type))) Type;
            *m_Ptr = *rhs.m_Ptr;
        }
        else
        {
            m_Ptr = __null;
        }
    }

    CIwCopyingPtr& operator=(const CIwCopyingPtr& rhs)
    {
        if( m_Ptr )
        {
            m_Ptr->~Type();
            Allocator::deallocate(m_Ptr, 1);
        }

        if (rhs.m_Ptr)
        {
            m_Ptr = new (Allocator::allocate(sizeof(Type))) Type;
            *m_Ptr = *rhs.m_Ptr;
        }
        else
        {
            m_Ptr = __null;
        }
        return *this;
    }




    CIwCopyingPtr& operator= (Type* pPtr)
    {
        if( m_Ptr )
        {
            m_Ptr->~Type();
            Allocator::deallocate(m_Ptr, 1);
        }
        m_Ptr = pPtr;
        return *this;
    }

    Type* operator->() const
    {
        return m_Ptr;
    }

    Type& operator*() const
    {
        return *m_Ptr;
    }

    bool operator!= (Type* pPtr) const
    {
        return m_Ptr != pPtr;
    }


    void Release()
    {
        m_Ptr = __null;
    }

private:



    Type* m_Ptr;
};

template<class T>
class CIwDebugAllocator
{
public:
    static T* allocate(uint32 size)
    {

        IwMemBucketPush(IW_MEM_BUCKET_ID_SYSTEM_DEBUG);


        T* alloc = (T*)s3eMalloc(size);


        IwMemBucketPop();

        return alloc;
    }

    static T* reallocate(T* p, uint32 size)
    {

        IwMemBucketPush(IW_MEM_BUCKET_ID_SYSTEM_DEBUG);


        T* alloc = (T*)s3eRealloc(p, size);


        IwMemBucketPop();

        return alloc;
    }


    static void deallocate(T* p, uint32) { s3eFree(p); }
};
# 20 "c:/marmalade/6.2/modules/iwutil/h/IwManaged.h" 2

# 1 "c:/marmalade/6.2/modules/iwutil/h/IwHashString.h" 1
       
# 17 "c:/marmalade/6.2/modules/iwutil/h/IwHashString.h"
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwString.h" 1
# 24 "c:/marmalade/6.2/modules/iwutil/h/IwString.h"
# 1 "c:/marmalade/6.2/s3e/h/std/string.h" 1
# 17 "c:/marmalade/6.2/s3e/h/std/string.h"
extern "C" {

void *memcpy(void *dest, const void *src, size_t n);
void *memset(void *s, int c, size_t n);
int memcmp(const void *s1, const void *s2, size_t n);
void *memmove(void *dest, const void *src, size_t n);
void *memchr(const void *s, int c, size_t n);
void *memrchr(const void *s, int c, size_t n);







int strcmp(const char *s1, const char *s2);
int strncmp(const char *s1, const char *s2, size_t n);
char *strsep(char **stringp, const char *delim);
char *strcpy(char *dest, const char *src);
char *strncpy(char *dest, const char *src, size_t n);
char *strchr(const char *s, int c);
char *strstr(const char *haystack, const char *needle);
char *strrchr(const char *s, int c);
char *strdup(const char *s);
char *strtok(char *str, const char *delim);
char *strtok_r(char *str, const char *delim, char **saveptr);
char *strcat(char *dest, const char *src);
char *strncat(char *dest, const char *src, size_t n);
size_t strlen(const char *s);
size_t strnlen(const char *s, size_t n);
int strcasecmp(const char *s1, const char *s2);
int strncasecmp(const char *s1, const char *s2, size_t n);
size_t strspn(const char *s, const char *accept);
size_t strcspn(const char *s, const char *reject);
char *strpbrk(const char *s, const char *accept);
int strcoll(const char *s1, const char *s2);
char *strerror(int errnum);
size_t strxfrm(char *dest, const char *src, size_t n);

int strerror_r(int errnum, char *buf, size_t buflen);





size_t strlcpy(char* dest, const char* src, size_t len);
size_t strlcat(char* dest, const char* src, size_t len);

}
# 25 "c:/marmalade/6.2/modules/iwutil/h/IwString.h" 2
# 74 "c:/marmalade/6.2/modules/iwutil/h/IwString.h"
template <int N>
class CIwString
{


public:
    inline CIwString()
    {
        m_Buffer[0] = '\0';
    };

    CIwString(const char* pText)
    {
        m_Buffer[0] = '\0';
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(strlen(pText) < N)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(276); IwDebugAssertSetMessage ("String '%s' too long - maximum size (including terminator character) is %d characters", pText, N); switch (IwDebugAssertShow("strlen(pText) < N", "c:/marmalade/6.2/modules/iwutil/h/IwString.h", 88, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        strcpy(m_Buffer, pText);
    };
# 104 "c:/marmalade/6.2/modules/iwutil/h/IwString.h"
    inline const char* c_str() const {return m_Buffer;}
# 113 "c:/marmalade/6.2/modules/iwutil/h/IwString.h"
    inline int size() const {return strlen(m_Buffer);}
# 122 "c:/marmalade/6.2/modules/iwutil/h/IwString.h"
    inline int length() const {return strlen(m_Buffer);}






    inline int capacity() const {return N-1;}






    inline void setLength(int len)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(len >= 0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(277); IwDebugAssertSetMessage ("Length must be >= 0"); switch (IwDebugAssertShow("len >= 0", "c:/marmalade/6.2/modules/iwutil/h/IwString.h", 138, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(len < N)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(278); IwDebugAssertSetMessage ("Length too long - maximum size (including terminator character) is %d characters", N); switch (IwDebugAssertShow("len < N", "c:/marmalade/6.2/modules/iwutil/h/IwString.h", 139, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        m_Buffer[len] = '\0';
    }

    inline int find(const char* substr)
    {
        char*p = strstr(m_Buffer, substr);
        if (p)
            return (int)(p - m_Buffer);
        return -1;
    }

    inline CIwString substr(int pos, int len = -1) const
    {
        if (len < 0)
            len = length() - pos;

        CIwString s(m_Buffer + pos);
        s.setLength(len);
        return s;
    }

    inline char & operator [] (int i)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(i >= 0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(279); IwDebugAssertSetMessage ("Index must be >= 0"); switch (IwDebugAssertShow("i >= 0", "c:/marmalade/6.2/modules/iwutil/h/IwString.h", 163, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(i < length())) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(280); IwDebugAssertSetMessage ("Index is %d, but length of string is only %d characters", i, length()); switch (IwDebugAssertShow("i < length()", "c:/marmalade/6.2/modules/iwutil/h/IwString.h", 164, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return m_Buffer[i];
    }

    inline const char & operator [] (int i) const
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(i >= 0)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(281); IwDebugAssertSetMessage ("Index must be >= 0"); switch (IwDebugAssertShow("i >= 0", "c:/marmalade/6.2/modules/iwutil/h/IwString.h", 170, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(i < length())) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(282); IwDebugAssertSetMessage ("Index is %d, but length of string is only %d characters", i, length()); switch (IwDebugAssertShow("i < length()", "c:/marmalade/6.2/modules/iwutil/h/IwString.h", 171, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return m_Buffer[i];
    }






    const char* operator = (const char* pText)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(strlen(pText) < N)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(283); IwDebugAssertSetMessage ("String '%s' too long - maximum size (including terminator character) is %d characters", pText, N); switch (IwDebugAssertShow("strlen(pText) < N", "c:/marmalade/6.2/modules/iwutil/h/IwString.h", 182, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        strcpy(m_Buffer, pText);
        return m_Buffer;
    };

    const char* operator = ( CIwString const& str)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(str.length() < N)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(284); IwDebugAssertSetMessage ("String '%s' too long - maximum size (including terminator character) is %d characters", str.c_str(), N); switch (IwDebugAssertShow("str.length() < N", "c:/marmalade/6.2/modules/iwutil/h/IwString.h", 189, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        strcpy(m_Buffer, str.c_str());
        return m_Buffer;
    };

    const char* operator += (const char* pText)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(strlen(m_Buffer) + strlen(pText) < N)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(285); IwDebugAssertSetMessage ("Combined string '%s%s' too long - maximum size (including terminator character) is %d characters", m_Buffer, pText, N); switch (IwDebugAssertShow("strlen(m_Buffer) + strlen(pText) < N", "c:/marmalade/6.2/modules/iwutil/h/IwString.h", 196, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        strcat(m_Buffer, pText);
        return m_Buffer;
    };

    const char* operator += (CIwString const& str)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(strlen(m_Buffer) + str.length() < N)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(286); IwDebugAssertSetMessage ("Combined string '%s%s' too long - maximum size (including terminator character) is %d characters", m_Buffer, str.c_str(), N); switch (IwDebugAssertShow("strlen(m_Buffer) + str.length() < N", "c:/marmalade/6.2/modules/iwutil/h/IwString.h", 203, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        strcat(m_Buffer, str.c_str());
        return m_Buffer;
    };

    CIwString operator + (const char* pText)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(strlen(m_Buffer) + strlen(pText) < N)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(287); IwDebugAssertSetMessage ("Combined string '%s%s' too long - maximum size (including terminator character) is %d characters", m_Buffer, pText, N); switch (IwDebugAssertShow("strlen(m_Buffer) + strlen(pText) < N", "c:/marmalade/6.2/modules/iwutil/h/IwString.h", 210, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        CIwString ns = *this;
        strcat(ns.m_Buffer, pText);
        return ns;
    }

    CIwString operator + (const CIwString& str)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(strlen(m_Buffer) + str.length() < N)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(288); IwDebugAssertSetMessage ("Combined string '%s%s' too long - maximum size (including terminator character) is %d characters", m_Buffer, str.c_str(), N); switch (IwDebugAssertShow("strlen(m_Buffer) + str.length() < N", "c:/marmalade/6.2/modules/iwutil/h/IwString.h", 218, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        CIwString ns = *this;
        strcat(ns.m_Buffer, str.c_str());
        return ns;
    }

    const char* operator += (char c)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(strlen(m_Buffer) + 1 < N)) && (IwDebugAssertIsChannelOn("CORE")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(289); IwDebugAssertSetMessage ("String '%s%c' too long - maximum size (including terminator character) is %d characters", m_Buffer, c, N); switch (IwDebugAssertShow("strlen(m_Buffer) + 1 < N", "c:/marmalade/6.2/modules/iwutil/h/IwString.h", 226, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        char str[2] = {c, '\0'};
        strcat(m_Buffer, str);
        return m_Buffer;
    };

    bool operator== (const char* str) const
    {
        return !strcmp(m_Buffer, str);
    }

    bool operator== (const CIwString& str) const
    {
        return !strcmp(m_Buffer, str.c_str());
    }







    inline void Serialise()
    {
        IwSerialiseString(m_Buffer, N);
    }



private:
    char m_Buffer[N];
};

template <int N>
static inline CIwString<N> operator + (const char *str1, const CIwString<N> &str2)
{
    return CIwString<N>(str1) + str2;
}






typedef CIwString<32> CIwStringS;




typedef CIwString<160> CIwStringL;
# 18 "c:/marmalade/6.2/modules/iwutil/h/IwHashString.h" 2
# 40 "c:/marmalade/6.2/modules/iwutil/h/IwHashString.h"
uint32 IwHashString(const char* pChar);
# 49 "c:/marmalade/6.2/modules/iwutil/h/IwHashString.h"
template<int N> uint32 IwHashString(const CIwString<N>& sz)
{
    CIwCallStack _callstack("IwHashString"); {}

    return IwHashString(sz.c_str());
}
# 65 "c:/marmalade/6.2/modules/iwutil/h/IwHashString.h"
uint32 IwHashString(const char* pChar, uint32 hash);
# 22 "c:/marmalade/6.2/modules/iwutil/h/IwManaged.h" 2

# 1 "c:/marmalade/6.2/modules/iwutil/h/IwTextParseable.h" 1
       
# 21 "c:/marmalade/6.2/modules/iwutil/h/IwTextParseable.h"
class CIwTextParserITX;
# 41 "c:/marmalade/6.2/modules/iwutil/h/IwTextParseable.h"
class CIwParseable
{
public:


    typedef CIwArray<CIwParseable*> Array;

    typedef Array::iterator ArrayIt;

    virtual ~CIwParseable() {}
# 60 "c:/marmalade/6.2/modules/iwutil/h/IwTextParseable.h"
    virtual void ParseOpen(CIwTextParserITX* pParser) = 0;







    virtual void ParseClose(CIwTextParserITX* pParser) = 0;







    virtual bool ParseAttribute(CIwTextParserITX* pParser, const char* pAttrName) = 0;
};
# 24 "c:/marmalade/6.2/modules/iwutil/h/IwManaged.h" 2
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwMenu.h" 1
       
# 22 "c:/marmalade/6.2/modules/iwutil/h/IwMenu.h"
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwSingleton.h" 1
# 23 "c:/marmalade/6.2/modules/iwutil/h/IwMenu.h" 2

# 1 "c:/marmalade/6.2/modules/iwutil/h/IwTypes.h" 1
# 37 "c:/marmalade/6.2/modules/iwutil/h/IwTypes.h"
enum
{

    IW_TYPE_NONE = 0,
    IW_TYPE_CHAR,
    IW_TYPE_BOOL,
    IW_TYPE_INT8,
    IW_TYPE_UINT8,
    IW_TYPE_INT16,
    IW_TYPE_UINT16,
    IW_TYPE_INT32,
    IW_TYPE_UINT32,
    IW_TYPE_FLOAT,
    IW_TYPE_DOUBLE,
    IW_TYPE_STRING,
    IW_TYPE_COMPOUND,
    IW_TYPE_MAX,

    IW_TYPE_MAX_BIT = 4,


    IW_TYPE_PAD_F = (1 << 4),


    IW_TYPE_FREE_BIT = 6
};
# 25 "c:/marmalade/6.2/modules/iwutil/h/IwMenu.h" 2


class CIwMenuItem;
class CIwMenu;
# 44 "c:/marmalade/6.2/modules/iwutil/h/IwMenu.h"
typedef CIwStringS CIwMenuString;
# 53 "c:/marmalade/6.2/modules/iwutil/h/IwMenu.h"
class CIwMenuItem
{
public:

    enum
    {
        HILITE_F = (1 << 0),
        UNSELECTABLE_F = (1 << 1),
        NO_SCROLL_F = (1 << 2),
        PARAGRAPH_END_F = (1 << 3),
    };




    enum ColourID
    {
        TITLE,
        MENU,
        FIELD,
        BOOL,
        STRING,
        FIXED,
        HILITE,
        MAX_COLOUR_ID,
    };

    typedef CIwArray<CIwMenuItem*> Array;
    typedef Array::iterator ArrayIt;


    CIwMenuItem(const char* name, const char* text, uint32 flags = 0, ColourID colID = FIELD);
    virtual ~CIwMenuItem();





    virtual void Update(bool active);






    virtual void Render(int32 x, int32 y);





    virtual void Enter() { m_Flags |= HILITE_F;}





    virtual void Exit() { m_Flags &= ~HILITE_F;}





    virtual void Select() { };





    virtual void Back();





    virtual void Run()
    {

        Select();
    };





    virtual void Plus() { };





    virtual void Minus() { };






    inline void SetSelectable(bool s)
    {
        if (s == true)
            m_Flags &= ~UNSELECTABLE_F;
        else
            m_Flags |= UNSELECTABLE_F;
    }





    inline CIwMenu* GetMenu() const {return m_Menu;}




    const char* m_Name;
    ColourID m_ColourID;
    CIwMenuString m_Text;
    int32 m_X;
    int32 m_Y;
    int32 m_W;
    int32 m_H;
private:
    int32 m_Flags;
    CIwMenu* m_Menu;

    friend class CIwMenu;
};
# 189 "c:/marmalade/6.2/modules/iwutil/h/IwMenu.h"
class CIwMenu
{
public:

    enum
    {
        UPDATE_ALWAYS_F = (1 << 0),
        RENDER_ALWAYS_F = (1 << 1),
    };

    typedef CIwArray<CIwMenu*> Array;
    typedef Array::iterator ArrayIt;


    CIwMenu(int32 x = -1, int32 y = -1, uint32 flags = 0);
    virtual ~CIwMenu();


    virtual void Update(bool active);


    virtual void Render(bool active);


    virtual void Enter();


    virtual void Exit();






    virtual int32 AddItem(CIwMenuItem* item, int32 index = -1);





    virtual void RemoveItem(int32 index);







    virtual void SetNextSelectable(bool down, int start = -1, int count = 1);





    virtual void SetItemID(int32 id);






    virtual void SetXY(int32 x, int32 y) { m_X = x, m_Y = y;}




    CIwMenuItem::Array m_ItemArray;
    int32 m_Flags;
    int32 m_ItemID;
    int32 m_X;
    int32 m_Y;
    int32 m_ScrollID;
    int32 m_ScrollHeight;
    CIwMenu* m_Parent;
    bool m_Wrap;
};







class CIwMenuManager
{
public:



    typedef void(*TextCallback)(const char* line, int32 x, int32 y, CIwMenuItem::ColourID colID);



    typedef CIwMenu*(*MainFn)();


    enum
    {

        INPUT_UP_F = (1 << 0),
        INPUT_DOWN_F = (1 << 1),
        INPUT_LEFT_F = (1 << 2),
        INPUT_RIGHT_F = (1 << 3),
        INPUT_RUN_F = (1 << 4),
        INPUT_SHIFT_F = (1 << 5),
        INPUT_CTRL_F = (1 << 6),
        INPUT_PLUS_F = (1 << 7),
        INPUT_MINUS_F = (1 << 8),
        INPUT_MASK = (1 << 9) - 1,


        DESTROY_MENU_F = (1 << 10),
        SELECT_MENU_F = (1 << 11),
        REBUILD_MENU_F = (1 << 12),
        UPDATE_F = (1 << 14),
        RENDER_F = (1 << 15),
    };


    CIwMenuManager();
    virtual ~CIwMenuManager();




    void DestroyMenus();






    virtual void Update();






    virtual void Render();





    void AddMenu(CIwMenu* menu);





    void AddMenuOrDestroy(CIwMenu* pMenu);




    inline void DestroyMenu() {m_Flags |= DESTROY_MENU_F;}





    void SelectMenu(int32 forceID = -1)
    {
        m_Flags |= SELECT_MENU_F;
        m_ForceItemID = forceID;
    }





    void RebuildMenu(int32 forceID = -1)
    {
        m_Flags |= REBUILD_MENU_F;
        m_ForceItemID = forceID;
    }






    inline void SetMenuCharWH(uint32 w, uint32 h)
    {
        m_CharW = w;
        m_CharH = h;
    }






    inline void SetMenuDefaultXY(uint32 x, uint32 y)
    {
        m_MenuDefaultX = x;
        m_MenuDefaultY = y;
    }





    inline void SetMenuDefaultW(uint32 w)
    {
        m_MenuDefaultW = w;
    }





    inline void SetTextCallback(TextCallback cb) {m_TextCallback = cb;}





    inline void SetFocusKey(int32 k) {m_KeyDef[MK_FOCUS] = k;}





    inline bool HasFocus() {return m_Focus;}





    void SetFocus(bool focus);





    inline void SetMainMenuFn(MainFn cb) {m_MainFn = cb;}




    CIwMenu::Array m_MenuArray;
    CIwMenu* m_MenuActive;
    uint32 m_Flags;
    int32 m_ForceItemID;
    TextCallback m_TextCallback;
    uint32 m_CharW;
    uint32 m_CharH;
    uint32 m_MenuDefaultX;
    uint32 m_MenuDefaultY;
    uint32 m_MenuDefaultW;

private:
    enum CIwMenuKeyBind
    {
        MK_UP,
        MK_DOWN,
        MK_LEFT,
        MK_RIGHT,
        MK_ENTER,
        MK_SHIFT,
        MK_CONTROL,
        MK_PLUS,
        MK_MINUS,
        MK_INPUT,
        MK_FOCUS,
        COUNT_MENU_KEYS
    };
    uint32 m_KeyDef[COUNT_MENU_KEYS];
    bool m_Focus;
    bool m_Input;
    bool m_Destroy;
    bool m_Create;
    MainFn m_MainFn;
    uint32 m_LastInput;
    uint32 m_AutoRepeatTime;
};

extern CIwMenuManager* g_IwMenuManager;




inline CIwMenuManager* IwGetMenuManager() {return g_IwMenuManager;}
# 482 "c:/marmalade/6.2/modules/iwutil/h/IwMenu.h"
class CIwMenuItemString : public CIwMenuItem
{
public:






    CIwMenuItemString(const char* text, const char* string, uint32 flags = 0) : CIwMenuItem("", text, flags, CIwMenuItem::STRING), m_String(string) {};
    void Render(int32 x, int32 y);
    const char* m_String;
};




class CIwMenuItemEditValue : public CIwMenuItem
{
public:
    CIwMenuItemEditValue(const char* text, void* pValue, uint32 type, float delta = 1.0f, float min = 0.0f, float max = 1.0f, float def = 0.0f, CIwMenuItem::ColourID colID = CIwMenuItem::FIELD) : CIwMenuItem("", text, 0, colID)
    {
        m_Type = type;
        m_Value = pValue;
        m_Delta = delta;
        m_Default = def;
        m_Min = min;
        m_Max = max;
        if (m_Delta == 0.0f)
            m_ColourID = CIwMenuItem::FIXED;
    };
    ~CIwMenuItemEditValue() {};
    void Back() {IwGetMenuManager()->DestroyMenu();}
    void Plus();
    void Minus();
    virtual void EditMember(float delta);
    void Render(int32 x, int32 y);

    uint32 m_Type;
    void* m_Value;
    float m_Delta;
    float m_Default;
    float m_Min;
    float m_Max;
};







class CIwMenuItemEditInt8 : public CIwMenuItemEditValue
{
public:
# 546 "c:/marmalade/6.2/modules/iwutil/h/IwMenu.h"
    CIwMenuItemEditInt8( const char* text, int8* pValue, float delta = 1.0f, float min = (float)(-0x7f - 1), float max = (float)0x7f, float def = 0.0f) : CIwMenuItemEditValue(text, (void*)pValue, IW_TYPE_INT8, delta, min, max, def) {};
};




class CIwMenuItemEditUInt8 : public CIwMenuItemEditValue
{
public:
# 564 "c:/marmalade/6.2/modules/iwutil/h/IwMenu.h"
    CIwMenuItemEditUInt8( const char* text, uint8* pValue, float delta = 1.0f, float min = (float)0x0, float max = (float)0xff, float def = 0.0f) : CIwMenuItemEditValue(text, (void*)pValue, IW_TYPE_UINT8, delta, min, max, def) {};
};




class CIwMenuItemEditInt16 : public CIwMenuItemEditValue
{
public:
# 582 "c:/marmalade/6.2/modules/iwutil/h/IwMenu.h"
    CIwMenuItemEditInt16( const char* text, int16* pValue, float delta = 1.0f, float min = (float)(-0x7fff - 1), float max = (float)0x7fff, float def = 0.0f) : CIwMenuItemEditValue(text, (void*)pValue, IW_TYPE_INT16, delta, min, max, def) {};
};




class CIwMenuItemEditUInt16 : public CIwMenuItemEditValue
{
public:
# 600 "c:/marmalade/6.2/modules/iwutil/h/IwMenu.h"
    CIwMenuItemEditUInt16( const char* text, uint16* pValue, float delta = 1.0f, float min = (float)0x0, float max = (float)0xffff, float def = 0.0f) : CIwMenuItemEditValue(text, (void*)pValue, IW_TYPE_UINT16, delta, min, max, def) {};
};




class CIwMenuItemEditInt32 : public CIwMenuItemEditValue
{
public:
# 618 "c:/marmalade/6.2/modules/iwutil/h/IwMenu.h"
    CIwMenuItemEditInt32( const char* text, int32* pValue, float delta = 1.0f, float min = (float)(-0x7fffffffL - 1), float max = (float)0x7fffffffL, float def = 0.0f) : CIwMenuItemEditValue(text, (void*)pValue, IW_TYPE_INT32, delta, min, max, def) {};
};




class CIwMenuItemEditUInt32 : public CIwMenuItemEditValue
{
public:
# 636 "c:/marmalade/6.2/modules/iwutil/h/IwMenu.h"
    CIwMenuItemEditUInt32( const char* text, uint32* pValue, float delta = 1.0f, float min = (float)0x0000, float max = (float)0xffff, float def = 0.0f) : CIwMenuItemEditValue(text, (void*)pValue, IW_TYPE_UINT32, delta, min, max, def) {};
};




class CIwMenuItemEditFloat : public CIwMenuItemEditValue
{
public:
# 654 "c:/marmalade/6.2/modules/iwutil/h/IwMenu.h"
    CIwMenuItemEditFloat( const char* text, float* pValue, float delta = 0.01f, float min = (float)(-0x7fffffffL - 1), float max = (float)0x7fffffffL, float def = 0.0f) : CIwMenuItemEditValue(text, (void*)pValue, IW_TYPE_FLOAT, delta, min, max, def) {};
};




class CIwMenuItemEditBool : public CIwMenuItemEditValue
{
public:
# 672 "c:/marmalade/6.2/modules/iwutil/h/IwMenu.h"
    CIwMenuItemEditBool( const char* text, bool* pValue, float delta = 1.0f, float min = (float)0x0, float max = (float)0x1, float def = 0.0f) : CIwMenuItemEditValue(text, (void*)pValue, IW_TYPE_BOOL, delta, min, max, def, CIwMenuItem::BOOL) {};
};




class CIwMenuItemDisplayValue : public CIwMenuItemEditValue
{
public:
    CIwMenuItemDisplayValue(const char* text, uint32 Value, uint32 type, CIwMenuItem::ColourID colID = CIwMenuItem::FIXED) : CIwMenuItemEditValue(text, __null, type, 0, 0, 0, 0, colID)
    {
        m_Type = type;
        m_StoreValue = Value;
        m_Value = (void*)&m_StoreValue;
    };
    ~CIwMenuItemDisplayValue() {};
    virtual void EditMember(float delta) { }
    uint32 m_StoreValue;
};







class CIwMenuItemTitle: public CIwMenuItem
{
public:




    CIwMenuItemTitle(const char* text) : CIwMenuItem("", text, CIwMenuItem::UNSELECTABLE_F, CIwMenuItem::TITLE) {}
};







class CIwMenuItemEditFlags : public CIwMenuItemEditUInt32
{
public:






    CIwMenuItemEditFlags(const char* text, uint32* pValue, uint32 mask) : CIwMenuItemEditUInt32(text, pValue)
    {
        m_Type = IW_TYPE_UINT32;
        m_Default = (float)mask;
        m_ColourID = CIwMenuItem::BOOL;
    };
    void EditMember(float delta)
    {
        *(uint32*)m_Value ^= (uint32)m_Default;
    }
    void Render(int32 x, int32 y);
};







class CIwMenuItemEditEnum : public CIwMenuItemEditUInt32
{
public:
# 754 "c:/marmalade/6.2/modules/iwutil/h/IwMenu.h"
    CIwMenuItemEditEnum(const char* text, uint32* pValue, const char** ppNames = __null, bool edit = true, uint32 min = 0, uint32 max = 0);
    void Render(int32 x, int32 y);
    const char** m_Names;
};







class CIwMenuItemDisplayInt8 : public CIwMenuItemDisplayValue
{
public:





    CIwMenuItemDisplayInt8( const char* text, int8 Value ) : CIwMenuItemDisplayValue(text, (uint32)Value, IW_TYPE_INT8) {};
};




class CIwMenuItemDisplayUInt8 : public CIwMenuItemDisplayValue
{
public:





    CIwMenuItemDisplayUInt8( const char* text, uint8 Value ) : CIwMenuItemDisplayValue(text, (uint32)Value, IW_TYPE_UINT8) {};
};




class CIwMenuItemDisplayInt16 : public CIwMenuItemDisplayValue
{
public:





    CIwMenuItemDisplayInt16( const char* text, int16 Value ) : CIwMenuItemDisplayValue(text, (uint32)Value, IW_TYPE_INT16) {};
};




class CIwMenuItemDisplayUInt16 : public CIwMenuItemDisplayValue
{
public:





    CIwMenuItemDisplayUInt16( const char* text, uint16 Value ) : CIwMenuItemDisplayValue(text, (uint32)Value, IW_TYPE_UINT16) {};
};




class CIwMenuItemDisplayInt32 : public CIwMenuItemDisplayValue
{
public:





    CIwMenuItemDisplayInt32( const char* text, int32 Value ) : CIwMenuItemDisplayValue(text, (uint32)Value, IW_TYPE_INT32) {};
};




class CIwMenuItemDisplayUInt32 : public CIwMenuItemDisplayValue
{
public:





    CIwMenuItemDisplayUInt32( const char* text, uint32 Value ) : CIwMenuItemDisplayValue(text, (uint32)Value, IW_TYPE_UINT32) {};
};




class CIwMenuItemDisplayFloat : public CIwMenuItemDisplayValue
{
public:





    CIwMenuItemDisplayFloat( const char* text, float Value ) : CIwMenuItemDisplayValue(text, (uint32)Value, IW_TYPE_FLOAT) {};
};




class CIwMenuItemDisplayBool : public CIwMenuItemDisplayValue
{
public:





    CIwMenuItemDisplayBool( const char* text, bool Value ) : CIwMenuItemDisplayValue(text, (uint32)Value, IW_TYPE_BOOL) {};
};
# 25 "c:/marmalade/6.2/modules/iwutil/h/IwManaged.h" 2

class CIwEvent;
class CIwManaged;
class CIwTextParserITX;
# 108 "c:/marmalade/6.2/modules/iwutil/h/IwManaged.h"
class CIwManaged : public CIwParseable
{
public:
    typedef CIwArray<CIwManaged*> Array;
    typedef Array::iterator ArrayIt;

    CIwManaged();
    virtual ~CIwManaged();






    virtual void Serialise();
# 134 "c:/marmalade/6.2/modules/iwutil/h/IwManaged.h"
    virtual void Resolve();
# 143 "c:/marmalade/6.2/modules/iwutil/h/IwManaged.h"
    virtual void ParseOpen(CIwTextParserITX* pParser) {};
# 154 "c:/marmalade/6.2/modules/iwutil/h/IwManaged.h"
    virtual bool ParseAttribute(CIwTextParserITX* pParser, const char* pAttrName);
# 164 "c:/marmalade/6.2/modules/iwutil/h/IwManaged.h"
    virtual void ParseClose(CIwTextParserITX* pParser);
# 176 "c:/marmalade/6.2/modules/iwutil/h/IwManaged.h"
    virtual void ParseCloseChild(CIwTextParserITX* pParser, CIwManaged* pChild);
# 187 "c:/marmalade/6.2/modules/iwutil/h/IwManaged.h"
    virtual bool HandleEvent(CIwEvent* pEvent) {return false;}
# 196 "c:/marmalade/6.2/modules/iwutil/h/IwManaged.h"
    virtual void SetName(const char* pName);


    virtual const char* GetClassName() const;


    inline const char* DebugGetName() const
    {

        return m_DebugName != __null ? m_DebugName->c_str() : "";




    }


    virtual void DebugRender() {};


    virtual void DebugAddMenuItems(CIwMenu* pMenu);


    void _SetNameNoHash(const char* pName);
    void _CopyNameAndHash(const CIwManaged* pObj);

    uint32 m_Hash;

    static void _EnableParsing();

    virtual void _Replace(CIwManaged* pRHS);

protected:
    void DebugSerialiseName();

private:
    CIwCopyingPtr<CIwStringL, CIwDebugAllocator<CIwStringL> > m_DebugName;

    friend class CIwMaterial;
};




class CIwMenuItemManaged : public CIwMenuItemString
{
public:
    CIwMenuItemManaged(const char* pString, CIwManaged* pObj) : CIwMenuItemString("", "")
    {
        m_Obj = pObj;
        m_Text = (pString) ? pString : pObj->GetClassName();
    };
    void Select();
    CIwManaged* m_Obj;
};

typedef void (*IwManagedConstructorCallback)(CIwManaged*);
typedef void (*IwManagedDestructorCallback)(CIwManaged*);
typedef void (*IwManagedSerialiseCallback)(CIwManaged*);
void _IwManagedSetConstructorCallback(IwManagedConstructorCallback fn);
void _IwManagedSetDestructorCallback(IwManagedDestructorCallback fn);
void _IwManagedSetSerialiseCallback(IwManagedSerialiseCallback fn);
IwManagedConstructorCallback _IwManagedGetConstructorCallback();
IwManagedDestructorCallback _IwManagedGetDestructorCallback();
IwManagedSerialiseCallback _IwManagedGetSerialiseCallback();
# 23 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h" 2
# 51 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
typedef void(*IwManagedListSerialiseCallback)(CIwManaged*);
void IwManagedListSetSerialiseCallbackPre(IwManagedListSerialiseCallback fn);
void IwManagedListSetSerialiseCallbackPost(IwManagedListSerialiseCallback fn);
IwManagedListSerialiseCallback IwManagedListGetSerialiseCallbackPre();
IwManagedListSerialiseCallback IwManagedListGetSerialiseCallbackPost();
# 68 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
class CIwManagedList
{
private:
    inline void _CheckAdd(CIwManaged* pObj, bool allowDups) const
    {

        if (
            (pObj && pObj->m_Hash) &&
            (allowDups == false)
            )
        {
            CIwManaged::ArrayIt itE; for (itE = (*this).GetBegin(); (itE) < (*this).GetEnd(); ++(itE))
            {
                if ((*itE)->m_Hash == pObj->m_Hash)
                {
                    do { static uint8 _s_IwAssertIgnoreThis = 0;; if (!(false)) { if( (IwDebugAssertIsChannelOn("UTIL")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetUID(1378); IwDebugAssertSetMessage ("Trying to add item ('%s') with hash 0x%x to CIwManagedList,\nbut item with that hash already exists in the list", pObj->DebugGetName(), pObj->m_Hash); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h", 83, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } return; } } while (0);
                }
            }
        }

    }
    inline void _CheckGet(uint32 hash, bool allowDups) const
    {

        if (
            (hash) &&
            (allowDups == false)
            )
        {
            CIwManaged** ppFound = __null;
            CIwManaged::ArrayIt itE; for (itE = (*this).GetBegin(); (itE) < (*this).GetEnd(); ++(itE))
            {
                if ((*itE)->m_Hash == hash)
                {
                    do { static uint8 _s_IwAssertIgnoreThis = 0;; if (!(!ppFound)) { if( (IwDebugAssertIsChannelOn("UTIL")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetUID(1379); IwDebugAssertSetMessage ("Trying to get item with hash 0x%x from CIwManagedList,\nbut duplicate entries with that hash exist in the list", hash); switch (IwDebugAssertShow("!ppFound", "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h", 102, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } return; } } while (0);
                    ppFound = itE;
                }
            }
        }

    }

public:



    CIwManagedList() {}
    ~CIwManagedList() {}
# 128 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    void Serialise();
# 137 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    void Resolve();
# 146 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    void SerialisePtrs();





    inline void OptimizeCapacity() {m_List.optimise_capacity();}
# 161 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    void ResolvePtrs(const CIwManagedList& list);
# 172 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    inline void SerialiseHeader() {m_List.SerialiseHeader();}





    void Delete();







    inline void Clear() {m_List.clear();}







    inline void ClearAndFree() {m_List.clear_optimised();}
# 207 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    CIwManaged* GetObjNamed(const char* pName, bool allowDups = false) const;
# 223 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    CIwManaged* GetObjHashed(uint32 hash, bool allowDups = false) const;
# 239 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    CIwManaged::ArrayIt GetObjHashedNextIt(uint32 hash, CIwManaged::ArrayIt start = __null, bool allowDups = false) const;
# 251 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    void Add(CIwManaged* pObject, bool allowDups = false);
# 265 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    inline void Insert(CIwManaged* pObject, uint32 pos, bool allowDups = false)
    {
        _CheckAdd(pObject, allowDups);
        m_List.insert_slow(pObject, pos);
    }
# 279 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    inline bool RemoveSlow(CIwManaged* pObject) {return m_List.find_and_remove(pObject); }
# 289 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    inline bool RemoveFast(CIwManaged* pObject) {return m_List.find_and_remove_fast(pObject); }
# 299 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    inline CIwManaged** Erase(CIwManaged** it) {return m_List.erase(it);}
# 309 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    inline uint32 EraseFast(uint32 i) {return m_List.erase_fast(i);}
# 318 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    inline bool Contains(CIwManaged* pObject) const
    {
        return m_List.contains(pObject);
    }
# 331 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    int32 Find(CIwManaged* const& pObject) const
    {
        return m_List.find(pObject);
    }
# 343 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    void CopyList(const CIwManagedList& list);







    inline uint32 GetSize() const {return (uint32)m_List.size();}







    inline uint32 GetCapacity() const {return (uint32)m_List.capacity();}
# 370 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    inline void Push(CIwManaged* pObject, bool allowDups = false)
    {
        _CheckAdd(pObject, allowDups);
        m_List.push_back(pObject);
    }
# 383 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    inline CIwManaged* Pop() {return m_List.pop_back_get();}
# 392 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    inline CIwManaged* GetTop() {return m_List.back();}







    CIwManaged* & operator [] (int const i) const
    {
        uint32 index = (uint32)i;
        return m_List[index];
    }
# 413 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    inline CIwManaged** GetBegin() const {return m_List.begin();}
# 423 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    inline CIwManaged** GetEnd() const {return m_List.end();}
# 433 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    inline void Reserve(uint32 i) {m_List.reserve_optimised(i);}
# 442 "c:/marmalade/6.2/modules/iwutil/h/IwManagedList.h"
    inline void LockSize(bool lock) { m_List.LockSize(lock); }




    inline void _AddHashAsPointer(uint32 hash) {m_List.push_back((CIwManaged*)(intptr_t)hash);}
private:
    CIwManaged::Array m_List;
};


void IwResolveManagedHash(void* pptr, const CIwManagedList& list);







class CIwMenuItemManagedList : public CIwMenuItem
{
public:
    CIwMenuItemManagedList(const char* pString, CIwManagedList* pList) : CIwMenuItem("", pString, 0, CIwMenuItem::FIELD)
    {
        m_List = pList;
    }
    void Select();
    CIwManagedList* m_List;
};
# 17 "c:/marmalade/6.2/modules/iwresmanager/h/IwResGroup.h" 2
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwResource.h" 1
       
# 28 "c:/marmalade/6.2/modules/iwutil/h/IwResource.h"
class CIwMenu;
class CIwResTemplate;






class CIwManagedRefCount : public CIwManaged
{
public:
    enum
    {
        RESOLVED_F = (1 << 0),
    };

    typedef CIwArray<CIwManagedRefCount*> Array; typedef Array::iterator ArrayIt; const char* GetClassName() const;;
    inline CIwManagedRefCount()
    {
        m_RefCount = 0;
        m_Flags = 0;
    }
    virtual void DebugAddMenuItems(CIwMenu* pMenu);

    inline void IncCount() {m_RefCount++;}
    inline void DecCount()
    {
        do { static uint8 _s_IwAssertIgnoreThis = 0;; if (!(m_RefCount)) { if( (IwDebugAssertIsChannelOn("UTIL")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetUID(1383); IwDebugAssertSetMessage ("Cannot decrease reference count - it is already zero"); switch (IwDebugAssertShow("m_RefCount", "c:/marmalade/6.2/modules/iwutil/h/IwResource.h", 55, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } return; } } while (0);
        --m_RefCount;
    }
    inline bool IsCountZero() const {return m_RefCount == 0;}
    inline void SetResolved() {m_Flags |= RESOLVED_F;}
    inline bool IsResolved() const {return (m_Flags & RESOLVED_F) != 0;}

    const CIwManagedRefCount& operator= (const CIwManagedRefCount &source)
    {
        CIwManaged::operator=(source);
        m_Flags = source.m_Flags;
        return *this;
    }

    virtual void _Replace(CIwManaged* pRHS);

private:
    uint16 m_RefCount;
    uint16 m_Flags;
};






class CIwResource : public CIwManagedRefCount
{
public:
    typedef CIwArray<CIwResource*> Array; typedef Array::iterator ArrayIt; const char* GetClassName() const;;

    CIwResource() {};


    virtual void ApplyScale(int32 scale) {}

    virtual void ApplyScale(float scale) {}

};
# 18 "c:/marmalade/6.2/modules/iwresmanager/h/IwResGroup.h" 2



class CIwResGroupHST;
class CIwAtlasInfo;
class CIwResGroup;
# 44 "c:/marmalade/6.2/modules/iwresmanager/h/IwResGroup.h"
class CIwResGroupBuildData : public CIwResource
{
public:
    ~CIwResGroupBuildData()
    {
        m_ScaledModels.Delete();
        m_ScaledAnims.Delete();
        m_ScaledSkels.Delete();
        m_ScaledSkins.Delete();
    }

    class ResScale : public CIwManaged
    {
    public:
        typedef CIwArray<ResScale*> Array; typedef Array::iterator ArrayIt; const char* GetClassName() const;;
        ResScale() {};
        ResScale(uint32 hash, int32 scale)
        {
            m_Hash = hash;
            m_Scale = scale;
        }
        void Serialise()
        {
            IwSerialiseUInt32(m_Hash);
            IwSerialiseInt32(m_Scale);
        }
        int32 m_Scale;
    };
    typedef CIwArray<CIwResGroupBuildData*> Array; typedef Array::iterator ArrayIt; const char* GetClassName() const;;


    CIwManagedList m_ScaledModels;
    CIwManagedList m_ScaledAnims;
    CIwManagedList m_ScaledSkels;
    CIwManagedList m_ScaledSkins;

    enum
    {
        MOUNT_F = (1 << 0),
        OPTIMISE_F = (1 << 1),
    };

    CIwArray<CIwStringL> m_ChildPaths;
    CIwArray<int32> m_ChildScales;
    CIwArray<uint32> m_ChildFlags;

    CIwArray<CIwStringL> m_LuaPaths;
};
# 103 "c:/marmalade/6.2/modules/iwresmanager/h/IwResGroup.h"
class CIwResList : public CIwManaged
{
public:
    typedef CIwArray<CIwResList*> Array; typedef Array::iterator ArrayIt; const char* GetClassName() const;;

    CIwResList();

    typedef CIwArray<CIwResList> IArray;
    typedef IArray::iterator IArrayIt;
    virtual void Serialise();

    CIwManaged* _LoadResource(uint32 hashCN, bool add);
    int32 _FindDirectoryEntry(uint32 hash);
    CIwManaged* _LoadDirectoryEntry(s3eFile* file, int32 i, CIwResGroup* group);

    struct CIwGroupDirectoryEntry
    {
        void Serialise()
        {
            IwSerialiseUInt32(m_Hash);
            IwSerialiseUInt32(m_Offset);
        }

        uint32 m_Hash;
        uint32 m_Offset;
    };

    CIwManagedList m_Resources;
    CIwArray<CIwGroupDirectoryEntry> m_Directory;
    uint32* m_pBlockSizes;
};
# 180 "c:/marmalade/6.2/modules/iwresmanager/h/IwResGroup.h"
class CIwResGroup : public CIwManaged
{
public:
    typedef CIwArray<CIwResGroup*> Array; typedef Array::iterator ArrayIt; const char* GetClassName() const;;
# 192 "c:/marmalade/6.2/modules/iwresmanager/h/IwResGroup.h"
    CIwResGroup(const char* name = __null);
# 203 "c:/marmalade/6.2/modules/iwresmanager/h/IwResGroup.h"
    CIwResList* GetListNamed(const char* resType, uint32 flags = 0) const;
# 214 "c:/marmalade/6.2/modules/iwresmanager/h/IwResGroup.h"
    CIwResList* GetListHashed(uint32 resTypeHash, uint32 flags = 0) const;
# 227 "c:/marmalade/6.2/modules/iwresmanager/h/IwResGroup.h"
    CIwResource* GetResNamed(const char* name, const char* resType, uint32 flags = 0) const;
# 240 "c:/marmalade/6.2/modules/iwresmanager/h/IwResGroup.h"
    CIwResource* GetResHashed(uint32 hash, const char* resType, uint32 flags = 0, bool topLevel = true) const;
# 253 "c:/marmalade/6.2/modules/iwresmanager/h/IwResGroup.h"
    CIwResource* GetResHashed(uint32 hash, uint32 resTypeHash, uint32 flags = 0, bool topLevel = true) const;
# 265 "c:/marmalade/6.2/modules/iwresmanager/h/IwResGroup.h"
    void AddRes(const char* resType, CIwResource* pData);
# 277 "c:/marmalade/6.2/modules/iwresmanager/h/IwResGroup.h"
    void AddRes(uint32 resTypeHash, CIwResource* pData);
# 289 "c:/marmalade/6.2/modules/iwresmanager/h/IwResGroup.h"
    void SetShared(bool shared);
# 298 "c:/marmalade/6.2/modules/iwresmanager/h/IwResGroup.h"
    inline bool IsShared() const {return (m_Flags & SHARED_F) != 0;}
# 308 "c:/marmalade/6.2/modules/iwresmanager/h/IwResGroup.h"
    void AddChild(CIwResGroup* pGroup, bool toOwn = true);




    void ReserveExtraChildren(int extra) { m_Children.Reserve(m_Children.GetSize()+extra); }







    inline CIwResGroup* GetOwner() const {return m_Owner;}







    inline const CIwManagedList& GetChildren() const {return m_Children;}






    void Write();





    virtual void Resolve();




    void Finalise();
# 365 "c:/marmalade/6.2/modules/iwresmanager/h/IwResGroup.h"
    inline bool HasAtlas() const { return (ATLAS_F & m_Flags) != 0;}


    inline bool IsAtlasReady() const { return (ATLAS_READY_F & m_Flags) !=0;}


    inline void SetAtlasReady(bool state) { state?m_Flags |= ATLAS_READY_F:m_Flags &=~ATLAS_READY_F;}

    inline bool IsMountable() const { return (m_Flags & MOUNTABLE_F) != 0; }

    inline bool IsOptimised() const { return (m_Flags & OPTIMISED_F) != 0; }

    inline bool IsResolved() const { return (m_Flags & RESOLVED_F) != 0; }


    CIwAtlasInfo* GetAtlasInfo() const {return m_AtlasInfo;}
# 389 "c:/marmalade/6.2/modules/iwresmanager/h/IwResGroup.h"
private:
    void ParseClose(CIwTextParserITX* pParser);
    void _Write();

    void _CreateDirectory();
    void _SerialiseResourceRequests(bool);


    void _Init(bool fromBin);


    void _WriteHST(const char* pathname);
    void _SerialiseAssets(const char* pathname);


    virtual void _Replace(CIwManaged* pNewGroup);

    virtual void DebugAddMenuItems(CIwMenu* pMenu);


    enum
    {
        SHARED_F = (1 << 0),
        LOADED_F = (1 << 1),
        ATLAS_F = (1 << 2),
        ATLAS_READY_F = (1 << 3),
        MOUNTABLE_F = (1 << 4),
        OPTIMISED_F = (1 << 5),
        RESOLVED_F = (1 << 6),
    };


    ~CIwResGroup();

    virtual void ParseOpen(CIwTextParserITX* pParser);
    virtual bool ParseAttribute(CIwTextParserITX* pParser, const char* pAttrName);


private:
    uint32 m_Flags;
    CIwResList::IArray m_ResLists;
    CIwManagedList m_Children;
    CIwResGroup* m_Owner;
    CIwResGroupHST* m_HST;
    CIwStringL m_GroupPathName;
    CIwAtlasInfo* m_AtlasInfo;
    CIwResGroup* m_DebugAssets;


    s3eFile* m_MountedFile;


    int m_DirectoryLocation;
    int m_ResourceLocation;


    struct CIwResRequest
    {
        CIwResList* m_pList;
        uint32 m_Hash;
    };
    mutable CIwArray<CIwResRequest> m_Requests;


    friend class CIwModelBuilder;
    friend class CIwResHandlerGROUP;
    friend class CIwResManager;
    friend void _ResGroupManagedConstructorCallback(CIwManaged*);
    friend void _ResGroupManagedDestructorCallback(CIwManaged*);
    friend void _ResGroupManagedSerialiseCallback(CIwManaged*);
    friend void _SerialiseDirectory(CIwResGroup*);
    friend void _Serialise_ResGroupHST();
    friend void _Serialise_ResGroupMembers();
    friend void _Serialise_ResGroupResources();
    friend void _Serialise_ResGroupChildPaths();
    friend void _Serialise_ResGroupDirectory();
    friend void _Serialise_BlockSizes(CIwResGroup*);
    friend void _PostResourceLoad();
    friend void IwResBinaryMount(const char*, bool);
    friend void _Serialise_ResGroupResourcesOptimised();



    void DumpCatalogue(s3eFile* pFile) const;
    void UpdateMetrics(char* parentName) const;
    void UpdateMetrics(bool bRemove) const;
    static void UpdateMetricManaged(CIwManaged* managed, char* parentName);

};
# 17 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManager.h" 2
# 1 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandler.h" 1
       
# 16 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandler.h"
class CIwResource;
# 99 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandler.h"
class CIwResTemplate : public CIwManaged
{
public:
    typedef CIwArray<CIwResTemplate*> Array; typedef Array::iterator ArrayIt; const char* GetClassName() const;;
# 111 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandler.h"
    virtual void Reset();
# 120 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandler.h"
    virtual void Copy(CIwResTemplate* pSource) = 0;







    virtual void Apply() {};
# 138 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandler.h"
    virtual bool ParseAttribute(CIwTextParserITX* pParser, const char* pAttrName);
# 149 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandler.h"
    virtual void ParseClose(CIwTextParserITX* pParser);







    inline const char* GetResName() const {return m_ResName.c_str();}

    virtual const char* GetResExt() const = 0;

    CIwStringS m_ResName;
};
# 175 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandler.h"
class CIwResHandler : public CIwManaged
{
public:
    typedef CIwArray<CIwResHandler*> Array; typedef Array::iterator ArrayIt; const char* GetClassName() const; private: CIwResHandler(const CIwResHandler &copy) { do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("UTIL")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1376); IwDebugAssertSetMessage ("CIwResHandler" " copy constructor (does nothing) called. Define the copy constructor in a derived class or use IW_MANAGED_DECLARE"); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandler.h", 178, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0); } const CIwResHandler& operator= (const CIwResHandler &rhs) { do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("UTIL")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1377); IwDebugAssertSetMessage ("CIwResHandler" " operator= (does nothing) called. Define operator= in a derived class or use IW_MANAGED_DECLARE"); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandler.h", 178, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0); return *this; } public:;
# 190 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandler.h"
    CIwResHandler(const char* ext, const char* resType);
    virtual ~CIwResHandler();







    void Reset();
# 212 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandler.h"
    virtual CIwResource* Build(const CIwStringL& pathname) = 0;
# 222 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandler.h"
    inline const char* GetExt() const {return m_Ext;}







    inline const char* GetResType() const {return m_ResType;}
# 240 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandler.h"
    void AddTemplate(CIwResTemplate* pTemplate);







    inline void SetTemplate(CIwResTemplate* pTemplate)
    {
        m_TemplateCurr = pTemplate;
        Reset();
    }







    inline void SetTemplate(const char* name)
    {
        do { static uint8 _s_IwAssertIgnoreThis = 0;; if (!(name)) { if( (IwDebugAssertIsChannelOn("GX")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetUID(1277); IwDebugAssertSetMessage ("Illegal NULL input"); switch (IwDebugAssertShow("name", "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandler.h", 262, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } return; } } while (0);
        CIwResTemplate* pTemplate = GetTemplateNamed(name);
        do { static uint8 _s_IwAssertIgnoreThis = 0;; if (!(pTemplate)) { if( (IwDebugAssertIsChannelOn("GX")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetUID(1278); IwDebugAssertSetMessage ("Could not find template named %s", name); switch (IwDebugAssertShow("pTemplate", "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandler.h", 264, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } return; } } while (0);
        SetTemplate(pTemplate);
    };







    inline CIwResTemplate* GetTemplate() const {return m_TemplateCurr;}
# 283 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandler.h"
    inline CIwResTemplate* GetTemplateNamed(const char* name) const
    {
        do { static uint8 _s_IwAssertIgnoreThis = 0;; if (!(name)) { if( (IwDebugAssertIsChannelOn("GX")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetUID(1279); IwDebugAssertSetMessage ("Illegal NULL input"); switch (IwDebugAssertShow("name", "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandler.h", 285, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } return __null; } } while (0);
        return (CIwResTemplate*)m_Templates.GetObjNamed(name);
    }







    inline void ApplySettings() {m_Settings->Apply();}







    inline CIwResTemplate* GetSettings() const {return m_Settings;}
# 315 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandler.h"
    void ConstructFullPathname(CIwStringL& ret, const CIwStringL& pathonly, const CIwStringL& fileonly, const char* ext);
    void ConstructFullPathname(CIwStringL& ret, const CIwStringL& pathonly, const CIwStringS& fileonly, const char* ext);


    inline CIwResTemplate* GetTemplateInit() const {return m_TemplateInit;}


protected:
    const char* m_Ext;
    const char* m_ResType;
    const char* m_ExtBin;
    CIwResTemplate* m_TemplateCurr;
    CIwResTemplate* m_TemplateInit;
    CIwResTemplate* m_Settings;
    CIwManagedList m_Templates;



    friend class CIwResGroup;
    friend class CIwResManager;
    friend class CIwMaterial;
};
# 346 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandler.h"
CIwResTemplate* IwGetResTemplateCurrentSettings(const char* type);
# 18 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManager.h" 2
# 1 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandlerGROUP.h" 1
       
# 28 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandlerGROUP.h"
# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeom.h" 1
       
# 21 "c:/marmalade/6.2/modules/iwgeom/h/IwGeom.h"
# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h" 1
       
# 18 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwDebug.h" 1
# 19 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h" 2
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwDivide.h" 1
# 78 "c:/marmalade/6.2/modules/iwutil/h/IwDivide.h"
static inline uint64 i3d_uldiv_split(uint32 toplo, uint32 tophi, uint32 bottom)
{
    unsigned accumhi = 0;
    unsigned accumlo = 0;


    int i=31;




    if(tophi & 0xffff0000)
        i -= 16;
    if(tophi==0)
        i=0;

    for (; i>=0; i--)
    {
        accumhi = accumhi << 1;

        if ((tophi>>(i)) >= (bottom))
        {
            accumhi++;


            tophi = tophi - (bottom<<i);
        }
    }
# 125 "c:/marmalade/6.2/modules/iwutil/h/IwDivide.h"
    if (tophi==0) goto fast_bit32;

    accumlo = accumlo << 1; if ((toplo>>31)+(tophi<<(32-31)) >= (bottom) || (tophi>>31)!=0) { accumlo++; if ((bottom<<31) > toplo) tophi--; toplo = toplo - (bottom<<31); tophi = tophi - (bottom>>(32-31)); if (!tophi) goto fast_bit31; }
    accumlo = accumlo << 1; if ((toplo>>30)+(tophi<<(32-30)) >= (bottom) || (tophi>>30)!=0) { accumlo++; if ((bottom<<30) > toplo) tophi--; toplo = toplo - (bottom<<30); tophi = tophi - (bottom>>(32-30)); if (!tophi) goto fast_bit30; }
    accumlo = accumlo << 1; if ((toplo>>29)+(tophi<<(32-29)) >= (bottom) || (tophi>>29)!=0) { accumlo++; if ((bottom<<29) > toplo) tophi--; toplo = toplo - (bottom<<29); tophi = tophi - (bottom>>(32-29)); if (!tophi) goto fast_bit29; }
    accumlo = accumlo << 1; if ((toplo>>28)+(tophi<<(32-28)) >= (bottom) || (tophi>>28)!=0) { accumlo++; if ((bottom<<28) > toplo) tophi--; toplo = toplo - (bottom<<28); tophi = tophi - (bottom>>(32-28)); if (!tophi) goto fast_bit28; }
    accumlo = accumlo << 1; if ((toplo>>27)+(tophi<<(32-27)) >= (bottom) || (tophi>>27)!=0) { accumlo++; if ((bottom<<27) > toplo) tophi--; toplo = toplo - (bottom<<27); tophi = tophi - (bottom>>(32-27)); if (!tophi) goto fast_bit27; }
    accumlo = accumlo << 1; if ((toplo>>26)+(tophi<<(32-26)) >= (bottom) || (tophi>>26)!=0) { accumlo++; if ((bottom<<26) > toplo) tophi--; toplo = toplo - (bottom<<26); tophi = tophi - (bottom>>(32-26)); if (!tophi) goto fast_bit26; }
    accumlo = accumlo << 1; if ((toplo>>25)+(tophi<<(32-25)) >= (bottom) || (tophi>>25)!=0) { accumlo++; if ((bottom<<25) > toplo) tophi--; toplo = toplo - (bottom<<25); tophi = tophi - (bottom>>(32-25)); if (!tophi) goto fast_bit25; }
    accumlo = accumlo << 1; if ((toplo>>24)+(tophi<<(32-24)) >= (bottom) || (tophi>>24)!=0) { accumlo++; if ((bottom<<24) > toplo) tophi--; toplo = toplo - (bottom<<24); tophi = tophi - (bottom>>(32-24)); if (!tophi) goto fast_bit24; }
    accumlo = accumlo << 1; if ((toplo>>23)+(tophi<<(32-23)) >= (bottom) || (tophi>>23)!=0) { accumlo++; if ((bottom<<23) > toplo) tophi--; toplo = toplo - (bottom<<23); tophi = tophi - (bottom>>(32-23)); if (!tophi) goto fast_bit23; }
    accumlo = accumlo << 1; if ((toplo>>22)+(tophi<<(32-22)) >= (bottom) || (tophi>>22)!=0) { accumlo++; if ((bottom<<22) > toplo) tophi--; toplo = toplo - (bottom<<22); tophi = tophi - (bottom>>(32-22)); if (!tophi) goto fast_bit22; }
    accumlo = accumlo << 1; if ((toplo>>21)+(tophi<<(32-21)) >= (bottom) || (tophi>>21)!=0) { accumlo++; if ((bottom<<21) > toplo) tophi--; toplo = toplo - (bottom<<21); tophi = tophi - (bottom>>(32-21)); if (!tophi) goto fast_bit21; }
    accumlo = accumlo << 1; if ((toplo>>20)+(tophi<<(32-20)) >= (bottom) || (tophi>>20)!=0) { accumlo++; if ((bottom<<20) > toplo) tophi--; toplo = toplo - (bottom<<20); tophi = tophi - (bottom>>(32-20)); if (!tophi) goto fast_bit20; }
    accumlo = accumlo << 1; if ((toplo>>19)+(tophi<<(32-19)) >= (bottom) || (tophi>>19)!=0) { accumlo++; if ((bottom<<19) > toplo) tophi--; toplo = toplo - (bottom<<19); tophi = tophi - (bottom>>(32-19)); if (!tophi) goto fast_bit19; }
    accumlo = accumlo << 1; if ((toplo>>18)+(tophi<<(32-18)) >= (bottom) || (tophi>>18)!=0) { accumlo++; if ((bottom<<18) > toplo) tophi--; toplo = toplo - (bottom<<18); tophi = tophi - (bottom>>(32-18)); if (!tophi) goto fast_bit18; }
    accumlo = accumlo << 1; if ((toplo>>17)+(tophi<<(32-17)) >= (bottom) || (tophi>>17)!=0) { accumlo++; if ((bottom<<17) > toplo) tophi--; toplo = toplo - (bottom<<17); tophi = tophi - (bottom>>(32-17)); if (!tophi) goto fast_bit17; }
    accumlo = accumlo << 1; if ((toplo>>16)+(tophi<<(32-16)) >= (bottom) || (tophi>>16)!=0) { accumlo++; if ((bottom<<16) > toplo) tophi--; toplo = toplo - (bottom<<16); tophi = tophi - (bottom>>(32-16)); if (!tophi) goto fast_bit16; }
    accumlo = accumlo << 1; if ((toplo>>15)+(tophi<<(32-15)) >= (bottom) || (tophi>>15)!=0) { accumlo++; if ((bottom<<15) > toplo) tophi--; toplo = toplo - (bottom<<15); tophi = tophi - (bottom>>(32-15)); if (!tophi) goto fast_bit15; }
    accumlo = accumlo << 1; if ((toplo>>14)+(tophi<<(32-14)) >= (bottom) || (tophi>>14)!=0) { accumlo++; if ((bottom<<14) > toplo) tophi--; toplo = toplo - (bottom<<14); tophi = tophi - (bottom>>(32-14)); if (!tophi) goto fast_bit14; }
    accumlo = accumlo << 1; if ((toplo>>13)+(tophi<<(32-13)) >= (bottom) || (tophi>>13)!=0) { accumlo++; if ((bottom<<13) > toplo) tophi--; toplo = toplo - (bottom<<13); tophi = tophi - (bottom>>(32-13)); if (!tophi) goto fast_bit13; }
    accumlo = accumlo << 1; if ((toplo>>12)+(tophi<<(32-12)) >= (bottom) || (tophi>>12)!=0) { accumlo++; if ((bottom<<12) > toplo) tophi--; toplo = toplo - (bottom<<12); tophi = tophi - (bottom>>(32-12)); if (!tophi) goto fast_bit12; }
    accumlo = accumlo << 1; if ((toplo>>11)+(tophi<<(32-11)) >= (bottom) || (tophi>>11)!=0) { accumlo++; if ((bottom<<11) > toplo) tophi--; toplo = toplo - (bottom<<11); tophi = tophi - (bottom>>(32-11)); if (!tophi) goto fast_bit11; }
    accumlo = accumlo << 1; if ((toplo>>10)+(tophi<<(32-10)) >= (bottom) || (tophi>>10)!=0) { accumlo++; if ((bottom<<10) > toplo) tophi--; toplo = toplo - (bottom<<10); tophi = tophi - (bottom>>(32-10)); if (!tophi) goto fast_bit10; }
    accumlo = accumlo << 1; if ((toplo>>9)+(tophi<<(32-9)) >= (bottom) || (tophi>>9)!=0) { accumlo++; if ((bottom<<9) > toplo) tophi--; toplo = toplo - (bottom<<9); tophi = tophi - (bottom>>(32-9)); if (!tophi) goto fast_bit9; }
    accumlo = accumlo << 1; if ((toplo>>8)+(tophi<<(32-8)) >= (bottom) || (tophi>>8)!=0) { accumlo++; if ((bottom<<8) > toplo) tophi--; toplo = toplo - (bottom<<8); tophi = tophi - (bottom>>(32-8)); if (!tophi) goto fast_bit8; }
    accumlo = accumlo << 1; if ((toplo>>7)+(tophi<<(32-7)) >= (bottom) || (tophi>>7)!=0) { accumlo++; if ((bottom<<7) > toplo) tophi--; toplo = toplo - (bottom<<7); tophi = tophi - (bottom>>(32-7)); if (!tophi) goto fast_bit7; }
    accumlo = accumlo << 1; if ((toplo>>6)+(tophi<<(32-6)) >= (bottom) || (tophi>>6)!=0) { accumlo++; if ((bottom<<6) > toplo) tophi--; toplo = toplo - (bottom<<6); tophi = tophi - (bottom>>(32-6)); if (!tophi) goto fast_bit6; }
    accumlo = accumlo << 1; if ((toplo>>5)+(tophi<<(32-5)) >= (bottom) || (tophi>>5)!=0) { accumlo++; if ((bottom<<5) > toplo) tophi--; toplo = toplo - (bottom<<5); tophi = tophi - (bottom>>(32-5)); if (!tophi) goto fast_bit5; }
    accumlo = accumlo << 1; if ((toplo>>4)+(tophi<<(32-4)) >= (bottom) || (tophi>>4)!=0) { accumlo++; if ((bottom<<4) > toplo) tophi--; toplo = toplo - (bottom<<4); tophi = tophi - (bottom>>(32-4)); if (!tophi) goto fast_bit4; }
    accumlo = accumlo << 1; if ((toplo>>3)+(tophi<<(32-3)) >= (bottom) || (tophi>>3)!=0) { accumlo++; if ((bottom<<3) > toplo) tophi--; toplo = toplo - (bottom<<3); tophi = tophi - (bottom>>(32-3)); if (!tophi) goto fast_bit3; }
    accumlo = accumlo << 1; if ((toplo>>2)+(tophi<<(32-2)) >= (bottom) || (tophi>>2)!=0) { accumlo++; if ((bottom<<2) > toplo) tophi--; toplo = toplo - (bottom<<2); tophi = tophi - (bottom>>(32-2)); if (!tophi) goto fast_bit2; }
    accumlo = accumlo << 1; if ((toplo>>1)+(tophi<<(32-1)) >= (bottom) || (tophi>>1)!=0) { accumlo++; if ((bottom<<1) > toplo) tophi--; toplo = toplo - (bottom<<1); tophi = tophi - (bottom>>(32-1)); if (!tophi) goto fast_bit1; }
    accumlo = accumlo << 1; if ((toplo>>0) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<0); }

    return (uint64)accumlo | ((uint64)accumhi)<<32;

fast_bit32:
    accumlo = accumlo << 1; if ((toplo>>31) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<31); } fast_bit31:
    accumlo = accumlo << 1; if ((toplo>>30) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<30); } fast_bit30:
    accumlo = accumlo << 1; if ((toplo>>29) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<29); } fast_bit29:
    accumlo = accumlo << 1; if ((toplo>>28) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<28); } fast_bit28:
    accumlo = accumlo << 1; if ((toplo>>27) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<27); } fast_bit27:
    accumlo = accumlo << 1; if ((toplo>>26) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<26); } fast_bit26:
    accumlo = accumlo << 1; if ((toplo>>25) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<25); } fast_bit25:
    accumlo = accumlo << 1; if ((toplo>>24) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<24); } fast_bit24:
    accumlo = accumlo << 1; if ((toplo>>23) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<23); } fast_bit23:
    accumlo = accumlo << 1; if ((toplo>>22) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<22); } fast_bit22:
    accumlo = accumlo << 1; if ((toplo>>21) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<21); } fast_bit21:
    accumlo = accumlo << 1; if ((toplo>>20) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<20); } fast_bit20:
    accumlo = accumlo << 1; if ((toplo>>19) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<19); } fast_bit19:
    accumlo = accumlo << 1; if ((toplo>>18) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<18); } fast_bit18:
    accumlo = accumlo << 1; if ((toplo>>17) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<17); } fast_bit17:
    accumlo = accumlo << 1; if ((toplo>>16) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<16); } fast_bit16:
    accumlo = accumlo << 1; if ((toplo>>15) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<15); } fast_bit15:
    accumlo = accumlo << 1; if ((toplo>>14) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<14); } fast_bit14:
    accumlo = accumlo << 1; if ((toplo>>13) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<13); } fast_bit13:
    accumlo = accumlo << 1; if ((toplo>>12) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<12); } fast_bit12:
    accumlo = accumlo << 1; if ((toplo>>11) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<11); } fast_bit11:
    accumlo = accumlo << 1; if ((toplo>>10) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<10); } fast_bit10:
    accumlo = accumlo << 1; if ((toplo>>9) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<9); } fast_bit9:
    accumlo = accumlo << 1; if ((toplo>>8) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<8); } fast_bit8:
    accumlo = accumlo << 1; if ((toplo>>7) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<7); } fast_bit7:
    accumlo = accumlo << 1; if ((toplo>>6) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<6); } fast_bit6:
    accumlo = accumlo << 1; if ((toplo>>5) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<5); } fast_bit5:
    accumlo = accumlo << 1; if ((toplo>>4) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<4); } fast_bit4:
    accumlo = accumlo << 1; if ((toplo>>3) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<3); } fast_bit3:
    accumlo = accumlo << 1; if ((toplo>>2) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<2); } fast_bit2:
    accumlo = accumlo << 1; if ((toplo>>1) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<1); } fast_bit1:
    accumlo = accumlo << 1; if ((toplo>>0) >= (bottom)) { accumlo++; toplo = toplo - (bottom<<0); }
# 224 "c:/marmalade/6.2/modules/iwutil/h/IwDivide.h"
    return (uint64)accumlo | ((uint64)accumhi)<<32;
}

static inline uint64 i3d_ldiv_split(uint32 toplo, int32 tophi, int32 bottom)
{
    if(tophi<0) {
        if(bottom>0)
            return -(int64)i3d_uldiv_split(toplo, -tophi, bottom);
        else
            return i3d_uldiv_split(toplo, -tophi, -bottom);
    }
    else {
        if(bottom<0)
            return i3d_uldiv_split(toplo, tophi, -bottom);
        else
            return i3d_uldiv_split(toplo, tophi, bottom);
    }
}

static inline uint64 i3d_uldiv(uint64 udividend, uint32 udivisor)
{
    return i3d_uldiv_split((uint32)(udividend&0xffffffff), (uint32)(udividend>>32), udivisor);
}





static inline int64 i3d_ldiv(int64 dividend,
                    int32 divisor)
{
    if(dividend<0) {
        if(divisor>0)
            return -(int64)i3d_uldiv(-dividend,divisor);
        else
            return i3d_uldiv(-dividend,-divisor);
    }
    else {
        if(divisor<0)
            return -(int64)i3d_uldiv(dividend,-divisor);
        else
            return i3d_uldiv(dividend,divisor);
    }
}
# 293 "c:/marmalade/6.2/modules/iwutil/h/IwDivide.h"
static inline int32 i3d_lmod(int64 dividend, int32 divisor)
{
        return (int32)(dividend - (((int64)(((int64)(dividend))/((int32)(divisor)))) * divisor));
}
# 20 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h" 2
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwMath.h" 1
# 21 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h" 2
# 49 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
void IwGeomInit();






void IwGeomTerminate();
# 161 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
typedef int32 iwfixed;




typedef uint32 iwufixed;




typedef int16 iwsfixed;




typedef uint16 iwusfixed;




typedef int32 iwqfixed;
# 191 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
typedef int32 iwangle;




typedef int32 iwqangle;
# 227 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
static inline iwsfixed IW_SFIXED_FROM_FIXED(iwfixed a)
{
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(a >> 31 == a >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(349); IwDebugAssertSetMessage ("Conversion overflow"); switch (IwDebugAssertShow("a >> 31 == a >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 229, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (iwsfixed)a;
}
# 271 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
static inline iwfixed IW_FIXED_FROM_FLOAT(float a)
{

    int64 fix64 = (int64)(a * (float)(1 << 12));
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(fix64 >> 63 == fix64 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(94); IwDebugAssertSetMessage ("Conversion overflow"); switch (IwDebugAssertShow("fix64 >> 63 == fix64 >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 275, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return (iwfixed)(a * (float)(1 << 12));
}
# 290 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
static inline iwsfixed IW_SFIXED_FROM_FLOAT_CAST(float a)
{

    int64 fix64 = (int64)a;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(fix64 >> 63 == fix64 >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(94); IwDebugAssertSetMessage ("Conversion overflow"); switch (IwDebugAssertShow("fix64 >> 63 == fix64 >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 294, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return (iwsfixed)a;
}

static inline iwfixed IW_FIXED_FROM_FLOAT_CAST(float a)
{

    int64 fix64 = (int64)a;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(fix64 >> 63 == fix64 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(94); IwDebugAssertSetMessage ("Conversion overflow"); switch (IwDebugAssertShow("fix64 >> 63 == fix64 >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 303, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return (iwfixed)a;
}
# 365 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
static inline iwangle IW_ANGLE_DIFFERENCE(iwangle x, iwangle y)
{
    iwangle z = ((iwangle)((x - y) & (((iwangle)(1 << 12)) - 1)));

    if (z <= ((iwangle)(1 << (12 - 1))))
        return z;
    else
        return z - ((iwangle)(1 << 12));
}
# 387 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
static inline iwfixed IW_FIXED_MUL(iwfixed a, iwfixed b)
{

    int64 test = (int64)a * b;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(350); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 391, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return (a * b) >> 12;
}
# 405 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
static inline iwfixed IW_FIXED_MUL_SAFE(iwfixed a, iwfixed b)
{
    int64 res = (((int64)a * b) >> 12);
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(res >> 63 == res >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(351); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("res >> 63 == res >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 408, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (iwfixed)res;
}
# 422 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
static inline iwsfixed IW_SFIXED_MUL(iwfixed a, iwfixed b)
{
    return IW_SFIXED_FROM_FIXED(IW_FIXED_MUL(a, b));
}
# 436 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
static inline iwqfixed IW_QFIXED_MUL(iwqfixed a, iwqfixed b)
{

    int64 test = (int64)a * b;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(352); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 440, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return (a * b) >> 30;
}
# 454 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
static inline iwqfixed IW_QFIXED_MUL_SAFE(iwqfixed a, iwqfixed b)
{
    int64 res = (((int64)a * b) >> 30);
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(res >> 63 == res >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(353); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("res >> 63 == res >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 457, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (iwfixed)res;
}
# 470 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
static inline iwfixed IW_FIXED_MUL3(iwfixed a, iwfixed b, iwfixed c, iwfixed d, iwfixed e, iwfixed f)
{

    int64 test1 = (int64)a * d;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test1 >> 63 == test1 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(357); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test1 >> 63 == test1 >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 474, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    int64 test2 = (int64)b * e;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test2 >> 63 == test2 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(358); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test2 >> 63 == test2 >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 476, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    int64 test3 = (int64)c * f;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test3 >> 63 == test3 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(359); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test3 >> 63 == test3 >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 478, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test1 += test2;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test1 >> 63 == test1 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(360); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test1 >> 63 == test1 >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 480, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test1 += test3;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test1 >> 63 == test1 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(361); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test1 >> 63 == test1 >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 482, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (iwfixed)(test1 >> 12);



}
# 499 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
static inline iwfixed IW_FIXED_MUL3_SAFE(iwfixed a, iwfixed b, iwfixed c, iwfixed d, iwfixed e, iwfixed f)
{
    int64 res = ((((int64)a * d) + ((int64)b * e) + ((int64)c * f)) >> 12);
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(res >> 63 == res >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(354); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("res >> 63 == res >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 502, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (iwfixed)res;
}
# 516 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
static inline iwfixed IW_FIXED_MUL2(iwfixed a, iwfixed b, iwfixed d, iwfixed e)
{

    int64 test1 = (int64)a * d;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test1 >> 63 == test1 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(357); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test1 >> 63 == test1 >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 520, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    int64 test2 = (int64)b * e;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test2 >> 63 == test2 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(358); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test2 >> 63 == test2 >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 522, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test1 += test2;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test1 >> 63 == test1 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(360); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test1 >> 63 == test1 >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 524, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (iwfixed)(test1 >> 12);



}
# 542 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
static inline iwfixed IW_FIXED_MUL2_SAFE(iwfixed a, iwfixed b, iwfixed d, iwfixed e)
{
    int64 res = ((((int64)a * d) + ((int64)b * e)) >> 12);
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(res >> 63 == res >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(354); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("res >> 63 == res >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 545, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (iwfixed)res;
}
# 562 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
static inline iwfixed IW_FIXED_DIV(iwfixed a, iwfixed b)
{
    if (!(b & ((1 << 12) - 1)))
    {
        return (iwfixed)(((int32)(a))/((int32)(b >> 12)));
    }
    else
    {

        int64 test = ((int64)a << 12);
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(355); IwDebugAssertSetMessage ("Divide overflow"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 572, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        return (iwfixed)(((int32)(a << 12))/((int32)(b)));
    }
}
# 593 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
static inline iwfixed IW_FIXED_DIV_SAFE(iwfixed a, iwfixed b)
{
    if ((a>>19) == (a>>31) || !(b & ((1 << 12) - 1))) return IW_FIXED_DIV(a, b);
    int64 result = ((int64)a << 12);
    result = ((int64)(((int64)(result))/((int32)(b))));
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(result >> 63 == result >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(356); IwDebugAssertSetMessage ("Divide overflow"); switch (IwDebugAssertShow("result >> 63 == result >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 598, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (iwfixed)result;
}


extern "C" {
# 613 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
iwfixed IwGeomSin(iwangle x);






iwfixed IwGeomCos(iwangle x);






iwqfixed IwGeomQSin(iwqangle x);






iwqfixed IwGeomQCos(iwqangle x);






iwfixed IwGeomTan(iwangle x);






iwfixed IwGeomACos(iwfixed v);






iwqfixed IwGeomQACos(iwqfixed v);






iwfixed IwGeomASin(iwfixed v);






iwqfixed IwGeomQASin(iwqfixed v);






iwqfixed IwGeomQATan2(iwqfixed u, iwqfixed v);
# 687 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
iwangle IwGeomAtan2(int y, int x);
# 703 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
extern double cos(double);
extern double acos(double);
extern double sin(double);
extern double asin(double);
extern double sqrt(double);
extern double tan(double);
extern double atan2(double,double);
# 720 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
}
# 731 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
static inline int32 IW_MULCHECK(const int32 a, const int32 b)
{

        int64 test = (int64)a*b;
        int64 testbig = test >> 31;
        int64 testsmall = test >> 63;
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(testsmall == testbig)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(362); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("testsmall == testbig", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 737, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return a*b;
}
# 752 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
static inline int32 IW_MUL64_SHIFT(int32 a, int32 b, int32 shift)
{

        int64 test = ((int64)a*b) >> shift;
        int64 testbig = test >> 31;
        int64 testsmall = test >> 63;
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(testsmall == testbig)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(336); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("testsmall == testbig", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 758, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


    return (int32)(((int64)a * b) >> shift);
}
# 774 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
static inline int32 IW_MUL64_3_SHIFT(int32 a, int32 b, int32 c, int32 d, int32 e, int32 f, int32 shift)
{

        int64 test = (((int64)a * d) + ((int64)b * e) + ((int64)c * f)) >> shift;
        int64 testbig = test >> 31;
        int64 testsmall = test >> 63;
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(testsmall == testbig)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(338); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("testsmall == testbig", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 780, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


    return (int32) ((((int64)a * d) + ((int64)b * e) + ((int64)c * f)) >> shift);
}
# 795 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
static inline int32 IW_MUL_3_SHIFT(int32 a, int32 b, int32 c, int32 d, int32 e, int32 f, int32 shift)
{

    int64 test1 = (int64)a * d;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test1 >> 63 == test1 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1796); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test1 >> 63 == test1 >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 799, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    int64 test2 = (int64)b * e;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test2 >> 63 == test2 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1797); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test2 >> 63 == test2 >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 801, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    int64 test3 = (int64)c * f;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test3 >> 63 == test3 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1798); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test3 >> 63 == test3 >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 803, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test1 += test2;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test1 >> 63 == test1 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1799); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test1 >> 63 == test1 >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 805, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test1 += test3;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test1 >> 63 == test1 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1800); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test1 >> 63 == test1 >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 807, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (iwfixed)(test1 >> shift);



}
# 825 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h"
static inline int32 IW_MUL_2_SHIFT(int32 a, int32 b, int32 d, int32 e, int32 shift)
{

    int64 test1 = (int64)a * d;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test1 >> 63 == test1 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1796); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test1 >> 63 == test1 >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 829, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    int64 test2 = (int64)b * e;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test2 >> 63 == test2 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1797); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test2 >> 63 == test2 >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 831, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test1 += test2;
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test1 >> 63 == test1 >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(1799); IwDebugAssertSetMessage ("Multiply overflow"); switch (IwDebugAssertShow("test1 >> 63 == test1 >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h", 833, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (iwfixed)(test1 >> shift);



}




# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomLegacy.h" 1
       
# 844 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h" 2
# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSqrt.h" 1
       
# 38 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSqrt.h"
iwfixed IW_GEOM_SQRT(iwfixed a);






iwqfixed IW_GEOM_QSQRT(iwqfixed a);
# 54 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSqrt.h"
int32 IW_GEOM_SQRT2(int32 a);
# 79 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSqrt.h"
extern iwfixed g_SqrtTable [];


void IwSqrtInit();
# 93 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSqrt.h"
static inline iwfixed IW_GEOM_SQRT_FAST(iwfixed x){
    uint32 m = clz(x);

    if (m <= (32 - 12 + 1)) {
        m = ((32 - 12 + 1) - m + 1) & (~1);




        int32 totalshift = (0>>1) + 12 - (m>>1);

        if (((x<<1)>>m)&1){
            if (totalshift > 0)
                return g_SqrtTable[(x>>m)+1]>>totalshift;
            else
                return g_SqrtTable[(x>>m)+1]<<(-totalshift);
        } else {
            if (totalshift > 0)
                return g_SqrtTable[x>>m]>>totalshift;
            else
                return g_SqrtTable[x>>m]<<(-totalshift);
        }
    } else {
        m = (m - (32 - 12 + 1) - 1) & (~1);




        return g_SqrtTable[x<<m]>>((0 + m)>>1)>>12;
    }
}
# 133 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSqrt.h"
static inline iwfixed IW_GEOM_SQRT2_FAST(iwfixed x){
    uint32 m = clz(x);

    if (m <= (32 - 12 + 1)) {
        m = ((32 - 12 + 1) - m + 1) & (~1);




        int32 totalshift = (0>>1) + (12>>1) - (m>>1);

        if (((x<<1)>>m)&1){
            if (totalshift > 0)
                return g_SqrtTable[(x>>m)+1]>>totalshift;
            else
                return g_SqrtTable[(x>>m)+1]<<(-totalshift);
        } else {
            if (totalshift > 0)
                return g_SqrtTable[x>>m]>>totalshift;
            else
                return g_SqrtTable[x>>m]<<(-totalshift);
        }
    } else {
        m = (m - (32 - 12 + 1) - 1) & (~1);




        return g_SqrtTable[x<<m]>>((0 + m + 12)>>1);
    }
}
# 190 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSqrt.h"
void IwInverseSqrtInit();






extern iwfixed g_InverseSqrtTable[];
# 209 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSqrt.h"
static inline iwfixed IW_GEOM_INVERSE_SQRT(iwfixed x)
{
    uint32 m = clz(x);







    if (m <= (32 - 12 + 1)){
        m = ((32 - 12 + 1) - m + 1)>>1;





        return (g_InverseSqrtTable[x>>(m<<1)]<<(6>>1))>>m;
    } else {
        m = (m - (32 - 12 + 1))>>1;





        return g_InverseSqrtTable[x<<(m<<1)]<<((6>>1) - m);
    }
}
# 250 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSqrt.h"
static inline iwfixed IW_GEOM_INVERSE_SQRT2(iwfixed x){
    uint32 m = clz(x);







    if (m <= (32 - 12 + 1)){
        m = ((32 - 12 + 1) - m + 1)>>1;





        return (g_InverseSqrtTable[x>>(m<<1)]<<((6 + 12)>>1))>>m;
    } else {
        m = (m - (32 - 12 + 1))>>1;





        return g_InverseSqrtTable[x<<(m<<1)]<<(((6 + 12)>>1) - m);
    }
}
# 845 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomCore.h" 2
# 22 "c:/marmalade/6.2/modules/iwgeom/h/IwGeom.h" 2
# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec.h" 1
       
# 33 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec.h"
# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h" 1
       
# 33 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h"
class CIwFVec2;
class CIwFVec3;
class CIwFVec4;
class CIwSVec2;
class CIwSVec3;
class CIwSVec4;
class CIwVec2;
class CIwVec3;
class CIwVec4;





class CIwSVec2
{
public:
    int16 x;
    int16 y;


    static CIwSVec2 g_Zero;


    static CIwSVec2 g_AxisX;


    static CIwSVec2 g_AxisY;




    CIwSVec2() {};






    CIwSVec2(int16 _x, int16 _y) : x(_x), y(_y) {};

    explicit CIwSVec2(const CIwVec2& v);
    explicit CIwSVec2(const CIwFVec2& v);
    CIwSVec2 operator = (const CIwVec2& v);
    CIwSVec2 operator = (const CIwFVec2& v);
# 90 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h"
    int32 GetLength() const;





    inline int32 GetLengthSquared() const
    {


        int64 test;
        test = (int64)x*x + (int64)y*y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec2 overflow"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h", 101, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        return (x*x + y*y) >> 12;
    }






    int32 GetLengthSafe() const;






    int32 GetLengthSquaredSafe() const;





    int32 GetLengthSquaredUnshifted() const;
# 140 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h"
    void NormaliseSlow();
# 150 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h"
    void Normalise();





    CIwSVec2 GetNormalised() const;







    void NormaliseSafe();





    CIwSVec2 GetNormalisedSafe() const;






    bool IsNormalised() const;
# 190 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h"
    void Serialise(void);





    bool IsZero() const;






    inline int32 Dot(CIwSVec2 const & v) const {return *this * v;}
# 219 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h"
    CIwSVec2& operator = (CIwSVec2 const & v);






    CIwSVec2 operator + (CIwSVec2 const & v) const;






    CIwSVec2 & operator += (CIwSVec2 const & v);






    CIwSVec2 operator - (CIwSVec2 const & v) const;






    CIwSVec2 & operator -= (CIwSVec2 const & v);






    int32 operator * (CIwSVec2 const & v) const;







    bool operator == (CIwSVec2 const & v) const;






    bool operator != (CIwSVec2 const & v) const;
# 282 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h"
    CIwSVec2 operator - () const;






    CIwSVec2 operator * (iwfixed l) const;







    CIwSVec2 & operator *= (iwfixed l);






    CIwSVec2 operator / (const iwfixed s) const;






    CIwSVec2 operator >> (const int s) const;







    CIwSVec2 operator >>= (const int s);






    CIwSVec2 operator << (const int s) const;







    CIwSVec2 operator <<= (const int s);






    int16 & operator [] (const int n);






    int16 operator [] (const int n) const;




};




inline CIwSVec2& CIwSVec2::operator = (CIwSVec2 const & v)
{
    x = v.x;
    y = v.y;
    return *this;
}




inline CIwSVec2 CIwSVec2::operator + (CIwSVec2 const & v) const
{

    int32 test;
    test = x + (int32)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec2 overflow: operator +"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h", 372, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y + (int32)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec2 overflow: operator +"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h", 373, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return CIwSVec2(
        (int16)(x + v.x)
        , (int16)(y + v.y)
        );
}




inline CIwSVec2 & CIwSVec2::operator += (CIwSVec2 const & v)
{

    int32 test;
    test = x + (int32)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec2 overflow: operator +="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h", 388, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y + (int32)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec2 overflow: operator +="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h", 389, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    x += v.x;
    y += v.y;
    return *this;
}




inline CIwSVec2 CIwSVec2::operator - (CIwSVec2 const & v) const
{

    int32 test;
    test = x - (int32)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec2 overflow: operator -"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h", 403, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y - (int32)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec2 overflow: operator -"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h", 404, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return CIwSVec2(
        (int16)(x - v.x)
        , (int16)(y - v.y)
        );
}




inline CIwSVec2 & CIwSVec2::operator -= (CIwSVec2 const & v)
{

    int32 test;
    test = x - (int32)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec2 overflow: operator -="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h", 419, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y - (int32)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec2 overflow: operator -="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h", 420, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    x -= v.x;
    y -= v.y;
    return *this;
}




inline int32 CIwSVec2::operator * (CIwSVec2 const & v) const
{

    int64 test = (
        (int64)x * v.x +
        (int64)y * v.y +
        0);

    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec2 overflow: operator *"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h", 438, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    (void) test;


    return (
        (int32)x * v.x +
        (int32)y * v.y +
        0) >> 12;
}




inline bool CIwSVec2::operator == (CIwSVec2 const & v) const
{
    return (
        v.x == x &&
        v.y == y &&
        true);
}




inline bool CIwSVec2::operator != (CIwSVec2 const & v) const
{
    return (
        v.x != x ||
        v.y != y ||
        false);
}




inline CIwSVec2 CIwSVec2::operator * (iwfixed l) const
{



    int32 test;
    test = ((int32)(x) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec2 overflow: operator *"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h", 479, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int32)(y) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec2 overflow: operator *"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h", 480, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


    return CIwSVec2(
          (int16)IW_FIXED_MUL(x,l)
        , (int16)IW_FIXED_MUL(y,l)
        );
}




inline CIwSVec2 & CIwSVec2::operator *= (iwfixed l)
{



    int32 test;
    test = ((int32)(x) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec2 overflow: operator *="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h", 498, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int32)(y) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec2 overflow: operator *="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h", 499, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


    x = (int16)IW_FIXED_MUL(x,l);
    y = (int16)IW_FIXED_MUL(y,l);
    return *this;
}




inline CIwSVec2 CIwSVec2::operator - () const
{
    return CIwSVec2(
        (int16)-x
        , (int16)-y
        );
}




inline CIwSVec2 CIwSVec2::operator / (const iwfixed s) const
{
    return CIwSVec2(
        (int16)(IW_FIXED_DIV(x, s))
        , (int16)(IW_FIXED_DIV(y, s))
        );
}




inline CIwSVec2 CIwSVec2::operator >> (const int s) const
{
    return CIwSVec2(
        (int16)(x >> s)
        , (int16)(y >> s)
        );
}

inline CIwSVec2 CIwSVec2::operator >>= (const int s)
{
    x >>= s;
    y >>= s;
    return *this;
}




inline CIwSVec2 CIwSVec2::operator << (const int s) const
{

    int32 test;
    test = (x << s); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec2 overflow: operator <<"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h", 554, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = (y << s); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec2 overflow: operator <<"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h", 555, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return CIwSVec2(
        (int16)(x << s)
        , (int16)(y << s)
        );
}

inline CIwSVec2 CIwSVec2::operator <<= (const int s)
{

    int32 test;
    test = (int32)(x) << s; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec2 overflow: operator <<="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h", 567, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = (int32)(y) << s; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec2 overflow: operator <<="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h", 568, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    x <<= s;
    y <<= s;
    return *this;
}


inline int16 & CIwSVec2::operator [] (const int n)
{
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(n < 2)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Attempting to reference %d entry in 2 dimensional vector", n); switch (IwDebugAssertShow("n < 2", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h", 578, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (&x)[n];
}


inline int16 CIwSVec2::operator [] (const int n) const
{
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(n < 2)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Attempting to reference %d entry in 2 dimensional vector", n); switch (IwDebugAssertShow("n < 2", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h", 585, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (&x)[n];
}





inline CIwSVec2 operator * (iwfixed l, const CIwSVec2& v)
{
    return v * l;
}





# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h" 1
       
# 33 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h"
class CIwFVec2;
class CIwFVec3;
class CIwFVec4;
class CIwSVec2;
class CIwSVec3;
class CIwSVec4;
class CIwVec2;
class CIwVec3;
class CIwVec4;





class CIwVec2
{
public:
    int32 x;
    int32 y;


    static CIwVec2 g_Zero;


    static CIwVec2 g_AxisX;


    static CIwVec2 g_AxisY;




    CIwVec2() {};






    CIwVec2(int32 _x, int32 _y) : x(_x), y(_y) {};

    explicit CIwVec2(const CIwSVec2& v);
    explicit CIwVec2(const CIwFVec2& v);
    CIwVec2 operator = (const CIwSVec2& v);
    CIwVec2 operator = (const CIwFVec2& v);
# 90 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h"
    int32 GetLength() const;





    inline int32 GetLengthSquared() const
    {


        int64 test;
        test = (int64)x*x + (int64)y*y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec2 overflow"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h", 101, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        return (x*x + y*y) >> 12;
    }






    int32 GetLengthSafe() const;






    int32 GetLengthSquaredSafe() const;





    int32 GetLengthSquaredUnshifted() const;
# 140 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h"
    void NormaliseSlow();
# 150 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h"
    void Normalise();





    CIwVec2 GetNormalised() const;







    void NormaliseSafe();





    CIwVec2 GetNormalisedSafe() const;






    bool IsNormalised() const;
# 190 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h"
    void Serialise(void);





    bool IsZero() const;






    inline int32 Dot(CIwVec2 const & v) const {return *this * v;}
# 219 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h"
    CIwVec2& operator = (CIwVec2 const & v);






    CIwVec2 operator + (CIwVec2 const & v) const;






    CIwVec2 & operator += (CIwVec2 const & v);






    CIwVec2 operator - (CIwVec2 const & v) const;






    CIwVec2 & operator -= (CIwVec2 const & v);






    int32 operator * (CIwVec2 const & v) const;







    bool operator == (CIwVec2 const & v) const;






    bool operator != (CIwVec2 const & v) const;
# 282 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h"
    CIwVec2 operator - () const;






    CIwVec2 operator * (iwfixed l) const;







    CIwVec2 & operator *= (iwfixed l);






    CIwVec2 operator / (const iwfixed s) const;






    CIwVec2 operator >> (const int s) const;







    CIwVec2 operator >>= (const int s);






    CIwVec2 operator << (const int s) const;







    CIwVec2 operator <<= (const int s);






    int32 & operator [] (const int n);






    int32 operator [] (const int n) const;




};




inline CIwVec2& CIwVec2::operator = (CIwVec2 const & v)
{
    x = v.x;
    y = v.y;
    return *this;
}




inline CIwVec2 CIwVec2::operator + (CIwVec2 const & v) const
{

    int64 test;
    test = x + (int64)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec2 overflow: operator +"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h", 372, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y + (int64)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec2 overflow: operator +"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h", 373, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return CIwVec2(
        (int32)(x + v.x)
        , (int32)(y + v.y)
        );
}




inline CIwVec2 & CIwVec2::operator += (CIwVec2 const & v)
{

    int64 test;
    test = x + (int64)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec2 overflow: operator +="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h", 388, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y + (int64)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec2 overflow: operator +="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h", 389, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    x += v.x;
    y += v.y;
    return *this;
}




inline CIwVec2 CIwVec2::operator - (CIwVec2 const & v) const
{

    int64 test;
    test = x - (int64)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec2 overflow: operator -"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h", 403, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y - (int64)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec2 overflow: operator -"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h", 404, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return CIwVec2(
        (int32)(x - v.x)
        , (int32)(y - v.y)
        );
}




inline CIwVec2 & CIwVec2::operator -= (CIwVec2 const & v)
{

    int64 test;
    test = x - (int64)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec2 overflow: operator -="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h", 419, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y - (int64)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec2 overflow: operator -="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h", 420, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    x -= v.x;
    y -= v.y;
    return *this;
}




inline int32 CIwVec2::operator * (CIwVec2 const & v) const
{

    int64 test = (
        (int64)x * v.x +
        (int64)y * v.y +
        0);

    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec2 overflow: operator *"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h", 438, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    (void) test;


    return (
        (int32)x * v.x +
        (int32)y * v.y +
        0) >> 12;
}




inline bool CIwVec2::operator == (CIwVec2 const & v) const
{
    return (
        v.x == x &&
        v.y == y &&
        true);
}




inline bool CIwVec2::operator != (CIwVec2 const & v) const
{
    return (
        v.x != x ||
        v.y != y ||
        false);
}




inline CIwVec2 CIwVec2::operator * (iwfixed l) const
{



    int64 test;
    test = ((int64)(x) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec2 overflow: operator *"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h", 479, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int64)(y) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec2 overflow: operator *"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h", 480, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


    return CIwVec2(
          (int32)IW_FIXED_MUL(x,l)
        , (int32)IW_FIXED_MUL(y,l)
        );
}




inline CIwVec2 & CIwVec2::operator *= (iwfixed l)
{



    int64 test;
    test = ((int64)(x) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec2 overflow: operator *="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h", 498, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int64)(y) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec2 overflow: operator *="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h", 499, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


    x = (int32)IW_FIXED_MUL(x,l);
    y = (int32)IW_FIXED_MUL(y,l);
    return *this;
}




inline CIwVec2 CIwVec2::operator - () const
{
    return CIwVec2(
        (int32)-x
        , (int32)-y
        );
}




inline CIwVec2 CIwVec2::operator / (const iwfixed s) const
{
    return CIwVec2(
        (int32)(IW_FIXED_DIV(x, s))
        , (int32)(IW_FIXED_DIV(y, s))
        );
}




inline CIwVec2 CIwVec2::operator >> (const int s) const
{
    return CIwVec2(
        (int32)(x >> s)
        , (int32)(y >> s)
        );
}

inline CIwVec2 CIwVec2::operator >>= (const int s)
{
    x >>= s;
    y >>= s;
    return *this;
}




inline CIwVec2 CIwVec2::operator << (const int s) const
{

    int64 test;
    test = (x << s); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec2 overflow: operator <<"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h", 554, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = (y << s); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec2 overflow: operator <<"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h", 555, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return CIwVec2(
        (int32)(x << s)
        , (int32)(y << s)
        );
}

inline CIwVec2 CIwVec2::operator <<= (const int s)
{

    int64 test;
    test = (int64)(x) << s; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec2 overflow: operator <<="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h", 567, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = (int64)(y) << s; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec2 overflow: operator <<="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h", 568, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    x <<= s;
    y <<= s;
    return *this;
}


inline int32 & CIwVec2::operator [] (const int n)
{
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(n < 2)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Attempting to reference %d entry in 2 dimensional vector", n); switch (IwDebugAssertShow("n < 2", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h", 578, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (&x)[n];
}


inline int32 CIwVec2::operator [] (const int n) const
{
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(n < 2)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Attempting to reference %d entry in 2 dimensional vector", n); switch (IwDebugAssertShow("n < 2", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h", 585, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (&x)[n];
}





inline CIwVec2 operator * (iwfixed l, const CIwVec2& v)
{
    return v * l;
}







inline CIwVec2::CIwVec2(const CIwSVec2& v)
{
    x = (int32)v.x;
    y = (int32)v.y;
}

inline CIwVec2 CIwVec2::operator = (const CIwSVec2& v)
{
    x = (int32)v.x;
    y = (int32)v.y;
    return *this;
}


inline bool operator == (const CIwVec2& v1, const CIwSVec2& v2)
{
    return (
        v1.x == (int32)v2.x &&
        v1.y == (int32)v2.y &&
        true);
}


inline CIwVec2 operator + (const CIwVec2& v1, const CIwSVec2& v2)
{
    return CIwVec2(
        v1.x + (int32)v2.x
        , v1.y + (int32)v2.y
        );
}


inline CIwVec2 operator - (const CIwVec2& v1, const CIwSVec2& v2)
{
    return CIwVec2(
        v1.x - (int32)v2.x
        , v1.y - (int32)v2.y
        );
}




inline CIwVec2 operator += (CIwVec2& v1, const CIwSVec2& v2)
{
    v1.x += (int32)v2.x;
    v1.y += (int32)v2.y;
    return v1;
}




inline CIwVec2 operator -= (CIwVec2& v1, const CIwSVec2& v2)
{
    v1.x -= (int32)v2.x;
    v1.y -= (int32)v2.y;
    return v1;
}




inline int32 operator * (const CIwVec2& v1, const CIwSVec2& v2)
{
    return v1 * CIwVec2(v2);
}






# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec2.h" 1
       
# 33 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec2.h"
class CIwFVec2;
class CIwFVec3;
class CIwFVec4;
class CIwSVec2;
class CIwSVec3;
class CIwSVec4;
class CIwVec2;
class CIwVec3;
class CIwVec4;





class CIwFVec2
{
public:
    float x;
    float y;


    static CIwFVec2 g_Zero;


    static CIwFVec2 g_AxisX;


    static CIwFVec2 g_AxisY;




    CIwFVec2() {};






    CIwFVec2(float _x, float _y) : x(_x), y(_y) {};

    explicit CIwFVec2(const CIwSVec2& v);
    explicit CIwFVec2(const CIwVec2& v);
    CIwFVec2 operator = (const CIwSVec2& v);
    CIwFVec2 operator = (const CIwVec2& v);
# 90 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec2.h"
    float GetLength() const;





    inline float GetLengthSquared() const
    {

        return (x*x + y*y);
    }
# 117 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec2.h"
    void Normalise();






    CIwFVec2 GetNormalised() const;







    bool IsNormalised() const;
# 145 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec2.h"
    void Serialise(void);





    bool IsZero() const;






    inline float Dot(CIwFVec2 const & v) const {return *this * v;}
# 174 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec2.h"
    CIwFVec2& operator = (CIwFVec2 const & v);






    CIwFVec2 operator + (CIwFVec2 const & v) const;






    CIwFVec2 & operator += (CIwFVec2 const & v);






    CIwFVec2 operator - (CIwFVec2 const & v) const;






    CIwFVec2 & operator -= (CIwFVec2 const & v);






    float operator * (CIwFVec2 const & v) const;







    bool operator == (CIwFVec2 const & v) const;






    bool operator != (CIwFVec2 const & v) const;
# 237 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec2.h"
    CIwFVec2 operator - () const;






    CIwFVec2 operator * (float l) const;







    CIwFVec2 & operator *= (float l);






    CIwFVec2 operator / (const float s) const;







    float & operator [] (const int n);






    float operator [] (const int n) const;




};




inline CIwFVec2& CIwFVec2::operator = (CIwFVec2 const & v)
{
    x = v.x;
    y = v.y;
    return *this;
}




inline CIwFVec2 CIwFVec2::operator + (CIwFVec2 const & v) const
{
    return CIwFVec2(
        (float)(x + v.x)
        , (float)(y + v.y)
        );
}




inline CIwFVec2 & CIwFVec2::operator += (CIwFVec2 const & v)
{
    x += v.x;
    y += v.y;
    return *this;
}




inline CIwFVec2 CIwFVec2::operator - (CIwFVec2 const & v) const
{
    return CIwFVec2(
        (float)(x - v.x)
        , (float)(y - v.y)
        );
}




inline CIwFVec2 & CIwFVec2::operator -= (CIwFVec2 const & v)
{
    x -= v.x;
    y -= v.y;
    return *this;
}




inline float CIwFVec2::operator * (CIwFVec2 const & v) const
{

    return (
        (float)x * v.x +
        (float)y * v.y +
        0);
}




inline bool CIwFVec2::operator == (CIwFVec2 const & v) const
{
    return (
        v.x == x &&
        v.y == y &&
        true);
}




inline bool CIwFVec2::operator != (CIwFVec2 const & v) const
{
    return (
        v.x != x ||
        v.y != y ||
        false);
}




inline CIwFVec2 CIwFVec2::operator * (float l) const
{
    return CIwFVec2(
        (float)(x * l)
        , (float)(y * l)
        );
}




inline CIwFVec2 & CIwFVec2::operator *= (float l)
{
    x = (float)(x * l);
    y = (float)(y * l);
    return *this;
}




inline CIwFVec2 CIwFVec2::operator - () const
{
    return CIwFVec2(
        (float)-x
        , (float)-y
        );
}




inline CIwFVec2 CIwFVec2::operator / (const float s) const
{
    return CIwFVec2(
        (float)(x / s)
        , (float)(y / s)
        );
}


inline float & CIwFVec2::operator [] (const int n)
{
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(n < 2)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Attempting to reference %d entry in 2 dimensional vector", n); switch (IwDebugAssertShow("n < 2", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec2.h", 413, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (&x)[n];
}


inline float CIwFVec2::operator [] (const int n) const
{
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(n < 2)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Attempting to reference %d entry in 2 dimensional vector", n); switch (IwDebugAssertShow("n < 2", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec2.h", 420, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (&x)[n];
}





inline CIwFVec2 operator * (float l, const CIwFVec2& v)
{
    return v * l;
}







inline CIwFVec2::CIwFVec2(const CIwSVec2& v)
{
    x = ((float)(v.x) / (float)(1 << 12));
    y = ((float)(v.y) / (float)(1 << 12));
}

inline CIwFVec2 CIwFVec2::operator = (const CIwSVec2& v)
{
    x = ((float)(v.x) / (float)(1 << 12));
    y = ((float)(v.y) / (float)(1 << 12));
    return *this;
}


inline bool operator == (const CIwFVec2& v1, const CIwSVec2& v2)
{
    return (
        v1.x == ((float)(v2.x) / (float)(1 << 12)) &&
        v1.y == ((float)(v2.y) / (float)(1 << 12)) &&
        true);
}


inline CIwFVec2 operator + (const CIwFVec2& v1, const CIwSVec2& v2)
{
    return CIwFVec2(
        v1.x + ((float)(v2.x) / (float)(1 << 12))
        , v1.y + ((float)(v2.y) / (float)(1 << 12))
        );
}


inline CIwFVec2 operator - (const CIwFVec2& v1, const CIwSVec2& v2)
{
    return CIwFVec2(
        v1.x - ((float)(v2.x) / (float)(1 << 12))
        , v1.y - ((float)(v2.y) / (float)(1 << 12))
        );
}




inline CIwFVec2 operator += (CIwFVec2& v1, const CIwSVec2& v2)
{
    v1.x += ((float)(v2.x) / (float)(1 << 12));
    v1.y += ((float)(v2.y) / (float)(1 << 12));
    return v1;
}




inline CIwFVec2 operator -= (CIwFVec2& v1, const CIwSVec2& v2)
{
    v1.x -= ((float)(v2.x) / (float)(1 << 12));
    v1.y -= ((float)(v2.y) / (float)(1 << 12));
    return v1;
}




inline float operator * (const CIwFVec2& v1, const CIwSVec2& v2)
{
    return v1 * CIwFVec2(v2);
}
# 514 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec2.h"
inline CIwFVec2::CIwFVec2(const CIwVec2& v)
{
    x = ((float)(v.x) / (float)(1 << 12));
    y = ((float)(v.y) / (float)(1 << 12));
}




inline CIwFVec2 CIwFVec2::operator = (const CIwVec2& v)
{
    x = ((float)(v.x) / (float)(1 << 12));
    y = ((float)(v.y) / (float)(1 << 12));
    return *this;
}




inline bool operator == (const CIwFVec2& v1, const CIwVec2& v2)
{
    return (
        v1.x == ((float)(v2.x) / (float)(1 << 12)) &&
        v1.y == ((float)(v2.y) / (float)(1 << 12)) &&
        true);
}




inline CIwFVec2 operator + (const CIwFVec2& v1, const CIwVec2& v2)
{
    return CIwFVec2(
        v1.x + ((float)(v2.x) / (float)(1 << 12))
        , v1.y + ((float)(v2.y) / (float)(1 << 12))
        );
}




inline CIwFVec2 operator - (const CIwFVec2& v1, const CIwVec2& v2)
{
    return CIwFVec2(
        v1.x - ((float)(v2.x) / (float)(1 << 12))
        , v1.y - ((float)(v2.y) / (float)(1 << 12))
        );
}




inline CIwFVec2 operator += (CIwFVec2& v1, const CIwVec2& v2)
{
    v1.x += ((float)(v2.x) / (float)(1 << 12));
    v1.y += ((float)(v2.y) / (float)(1 << 12));
    return v1;
}




inline CIwFVec2 operator -= (CIwFVec2& v1, const CIwVec2& v2)
{
    v1.x -= ((float)(v2.x) / (float)(1 << 12));
    v1.y -= ((float)(v2.y) / (float)(1 << 12));
    return v1;
}




inline float operator * (const CIwFVec2& v1, const CIwVec2& v2)
{
    return v1 * CIwFVec2(v2);
}
# 678 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec2.h" 2

inline CIwVec2::CIwVec2(const CIwFVec2& v)
{
    x = IW_FIXED_FROM_FLOAT(v.x);
    y = IW_FIXED_FROM_FLOAT(v.y);
}




inline CIwVec2 CIwVec2::operator = (const CIwFVec2& v)
{
    x = IW_FIXED_FROM_FLOAT(v.x);
    y = IW_FIXED_FROM_FLOAT(v.y);
    return *this;
}




inline bool operator == (const CIwVec2& v1, const CIwFVec2& v2)
{
    return (
        ((float)(v1.x) / (float)(1 << 12)) == v2.x &&
        ((float)(v1.y) / (float)(1 << 12)) == v2.y &&
        true);
}




inline CIwFVec2 operator + (const CIwVec2& v1, const CIwFVec2& v2)
{
    return CIwFVec2(
        ((float)(v1.x) / (float)(1 << 12)) + v2.x
        , ((float)(v1.y) / (float)(1 << 12)) + v2.y
        );
}




inline CIwFVec2 operator - (const CIwVec2& v1, const CIwFVec2& v2)
{
    return CIwFVec2(
        ((float)(v1.x) / (float)(1 << 12)) - v2.x
        , ((float)(v1.y) / (float)(1 << 12)) - v2.y
        );
}




inline CIwVec2 operator += (CIwVec2& v1, const CIwFVec2& v2)
{
    v1.x += IW_FIXED_FROM_FLOAT(v2.x);
    v1.y += IW_FIXED_FROM_FLOAT(v2.y);
    return v1;
}




inline CIwVec2 operator -= (CIwVec2& v1, const CIwFVec2& v2)
{
    v1.x -= IW_FIXED_FROM_FLOAT(v2.x);
    v1.y -= IW_FIXED_FROM_FLOAT(v2.y);
    return v1;
}




inline float operator * (const CIwVec2& v1, const CIwFVec2& v2)
{
    return CIwFVec2(v1) * v2;
}
# 603 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h" 2

inline CIwSVec2::CIwSVec2(const CIwVec2& v)
{
    x = IW_SFIXED_FROM_FIXED(v.x);
    y = IW_SFIXED_FROM_FIXED(v.y);
}

inline CIwSVec2 CIwSVec2::operator = (const CIwVec2& v)
{
    x = IW_SFIXED_FROM_FIXED(v.x);
    y = IW_SFIXED_FROM_FIXED(v.y);
    return *this;
}


inline bool operator == (const CIwSVec2& v1, const CIwVec2& v2)
{
    return (
        (int32)v1.x == v2.x &&
        (int32)v1.y == v2.y &&
        true);
}


inline CIwVec2 operator + (const CIwSVec2& v1, const CIwVec2& v2)
{
    return CIwVec2(
        (int32)v1.x + v2.x
        , (int32)v1.y + v2.y
        );
}


inline CIwVec2 operator - (const CIwSVec2& v1, const CIwVec2& v2)
{
    return CIwVec2(
        (int32)v1.x - v2.x
        , (int32)v1.y - v2.y
        );
}




inline CIwSVec2 operator += (CIwSVec2& v1, const CIwVec2& v2)
{
    v1.x += IW_SFIXED_FROM_FIXED(v2.x);
    v1.y += IW_SFIXED_FROM_FIXED(v2.y);
    return v1;
}




inline CIwSVec2 operator -= (CIwSVec2& v1, const CIwVec2& v2)
{
    v1.x -= IW_SFIXED_FROM_FIXED(v2.x);
    v1.y -= IW_SFIXED_FROM_FIXED(v2.y);
    return v1;
}




inline int32 operator * (const CIwSVec2& v1, const CIwVec2& v2)
{
    return CIwVec2(v1) * v2;
}
# 679 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec2.h"
inline CIwSVec2::CIwSVec2(const CIwFVec2& v)
{
    x = IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v.x));
    y = IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v.y));
}




inline CIwSVec2 CIwSVec2::operator = (const CIwFVec2& v)
{
    x = IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v.x));
    y = IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v.y));
    return *this;
}




inline bool operator == (const CIwSVec2& v1, const CIwFVec2& v2)
{
    return (
        ((float)(v1.x) / (float)(1 << 12)) == v2.x &&
        ((float)(v1.y) / (float)(1 << 12)) == v2.y &&
        true);
}




inline CIwFVec2 operator + (const CIwSVec2& v1, const CIwFVec2& v2)
{
    return CIwFVec2(
        ((float)(v1.x) / (float)(1 << 12)) + v2.x
        , ((float)(v1.y) / (float)(1 << 12)) + v2.y
        );
}




inline CIwFVec2 operator - (const CIwSVec2& v1, const CIwFVec2& v2)
{
    return CIwFVec2(
        ((float)(v1.x) / (float)(1 << 12)) - v2.x
        , ((float)(v1.y) / (float)(1 << 12)) - v2.y
        );
}




inline CIwSVec2 operator += (CIwSVec2& v1, const CIwFVec2& v2)
{
    v1.x += IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v2.x));
    v1.y += IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v2.y));
    return v1;
}




inline CIwSVec2 operator -= (CIwSVec2& v1, const CIwFVec2& v2)
{
    v1.x -= IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v2.x));
    v1.y -= IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v2.y));
    return v1;
}




inline float operator * (const CIwSVec2& v1, const CIwFVec2& v2)
{
    return CIwFVec2(v1) * v2;
}
# 34 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec.h" 2
# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h" 1
       
# 33 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h"
class CIwFVec2;
class CIwFVec3;
class CIwFVec4;
class CIwSVec2;
class CIwSVec3;
class CIwSVec4;
class CIwVec2;
class CIwVec3;
class CIwVec4;





class CIwSVec3
{
public:
    int16 x;
    int16 y;
    int16 z;


    static CIwSVec3 g_Zero;


    static CIwSVec3 g_AxisX;


    static CIwSVec3 g_AxisY;


    static CIwSVec3 g_AxisZ;




    CIwSVec3() {};
# 79 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h"
    CIwSVec3(int16 _x, int16 _y, int16 _z) : x(_x), y(_y), z(_z) {};

    explicit CIwSVec3(const CIwVec3& v);
    explicit CIwSVec3(const CIwFVec3& v);
    CIwSVec3 operator = (const CIwVec3& v);
    CIwSVec3 operator = (const CIwFVec3& v);
# 97 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h"
    int32 GetLength() const;





    inline int32 GetLengthSquared() const
    {


        int64 test;
        test = (int64)x*x + (int64)y*y+ (int64)z*z; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 108, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        return (x*x + y*y+ z*z) >> 12;
    }






    int32 GetLengthSafe() const;






    int32 GetLengthSquaredSafe() const;





    int32 GetLengthSquaredUnshifted() const;
# 147 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h"
    void NormaliseSlow();
# 157 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h"
    void Normalise();





    CIwSVec3 GetNormalised() const;







    void NormaliseSafe();





    CIwSVec3 GetNormalisedSafe() const;






    bool IsNormalised() const;
# 197 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h"
    void Serialise(void);





    bool IsZero() const;






    inline int32 Dot(CIwSVec3 const & v) const {return *this * v;}






    inline CIwSVec3 Cross(CIwSVec3 const & v) const {return *this ^ v;}
# 234 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h"
    CIwSVec3& operator = (CIwSVec3 const & v);






    CIwSVec3 operator + (CIwSVec3 const & v) const;






    CIwSVec3 & operator += (CIwSVec3 const & v);






    CIwSVec3 operator - (CIwSVec3 const & v) const;






    CIwSVec3 & operator -= (CIwSVec3 const & v);






    int32 operator * (CIwSVec3 const & v) const;






    CIwSVec3 operator ^ (CIwSVec3 const & v) const;






    bool operator == (CIwSVec3 const & v) const;






    bool operator != (CIwSVec3 const & v) const;
# 303 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h"
    CIwSVec3 operator - () const;






    CIwSVec3 operator * (iwfixed l) const;







    CIwSVec3 & operator *= (iwfixed l);






    CIwSVec3 operator / (const iwfixed s) const;






    CIwSVec3 operator >> (const int s) const;







    CIwSVec3 operator >>= (const int s);






    CIwSVec3 operator << (const int s) const;







    CIwSVec3 operator <<= (const int s);






    int16 & operator [] (const int n);






    int16 operator [] (const int n) const;




};




inline CIwSVec3& CIwSVec3::operator = (CIwSVec3 const & v)
{
    x = v.x;
    y = v.y;
    z = v.z;
    return *this;
}




inline CIwSVec3 CIwSVec3::operator + (CIwSVec3 const & v) const
{

    int32 test;
    test = x + (int32)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator +"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 394, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y + (int32)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator +"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 395, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = z + (int32)v.z; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator +"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 396, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return CIwSVec3(
        (int16)(x + v.x)
        , (int16)(y + v.y)
        , (int16)(z + v.z)
        );
}




inline CIwSVec3 & CIwSVec3::operator += (CIwSVec3 const & v)
{

    int32 test;
    test = x + (int32)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator +="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 412, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y + (int32)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator +="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 413, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = z + (int32)v.z; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator +="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 414, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    x += v.x;
    y += v.y;
    z += v.z;
    return *this;
}




inline CIwSVec3 CIwSVec3::operator - (CIwSVec3 const & v) const
{

    int32 test;
    test = x - (int32)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator -"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 429, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y - (int32)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator -"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 430, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = z - (int32)v.z; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator -"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 431, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return CIwSVec3(
        (int16)(x - v.x)
        , (int16)(y - v.y)
        , (int16)(z - v.z)
        );
}




inline CIwSVec3 & CIwSVec3::operator -= (CIwSVec3 const & v)
{

    int32 test;
    test = x - (int32)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator -="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 447, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y - (int32)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator -="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 448, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = z - (int32)v.z; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator -="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 449, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    x -= v.x;
    y -= v.y;
    z -= v.z;
    return *this;
}




inline int32 CIwSVec3::operator * (CIwSVec3 const & v) const
{

    int64 test = (
        (int64)x * v.x +
        (int64)y * v.y +
        (int64)z * v.z +
        0);

    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator *"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 469, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    (void) test;


    return (
        (int32)x * v.x +
        (int32)y * v.y +
        (int32)z * v.z +
        0) >> 12;
}



inline CIwSVec3 CIwSVec3::operator ^ (CIwSVec3 const & v) const
{

    int chk = ((((x) > 0) ? (x) : -(x)) | (((y) > 0) ? (y) : -(y)) | (((z) > 0) ? (z) : -(z)) | (((v.x) > 0) ? (v.x) : -(v.x)) | (((v.y) > 0) ? (v.y) : -(v.y)) | (((v.z) > 0) ? (v.z) : -(v.z)));
    if (chk > (1<<15))
    {




        int64 test;
        test = ((int64)y*v.z - (int64)z*v.y)>>12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator ^"); switch (IwDebugAssertShow("test >> 63 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 493, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = ((int64)z*v.x - (int64)x*v.z)>>12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator ^"); switch (IwDebugAssertShow("test >> 63 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 494, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = ((int64)x*v.y - (int64)y*v.x)>>12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator ^"); switch (IwDebugAssertShow("test >> 63 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 495, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        return CIwSVec3( (int16)(((int64)y*v.z + (int64)z*-v.y)>>12),
                        (int16)(((int64)z*v.x + (int64)x*-v.z)>>12),
                        (int16)(((int64)x*v.y + (int64)y*-v.x)>>12) );
    }
    else
    {




        int64 test;
        test = ((int64)y*v.z)>>0; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator ^"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 508, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = ((int64)z*v.y)>>0; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator ^"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 509, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = ((int64)z*v.x)>>0; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator ^"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 510, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = ((int64)x*v.z)>>0; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator ^"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 511, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = ((int64)y*v.x)>>0; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator ^"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 512, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = ((int64)x*v.y)>>0; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator ^"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 513, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        test = ((int64)y*v.z - (int64)z*v.y)>>12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator ^"); switch (IwDebugAssertShow("test >> 63 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 515, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = ((int64)z*v.x - (int64)x*v.z)>>12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator ^"); switch (IwDebugAssertShow("test >> 63 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 516, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = ((int64)x*v.y - (int64)y*v.x)>>12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator ^"); switch (IwDebugAssertShow("test >> 63 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 517, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


        return CIwSVec3( (int16)(((int32)y*v.z + (int32)z*-v.y)>>12),
                        (int16)(((int32)z*v.x + (int32)x*-v.z)>>12),
                        (int16)(((int32)x*v.y + (int32)y*-v.x)>>12) );
    }
}




inline bool CIwSVec3::operator == (CIwSVec3 const & v) const
{
    return (
        v.x == x &&
        v.y == y &&
        v.z == z &&
        true);
}




inline bool CIwSVec3::operator != (CIwSVec3 const & v) const
{
    return (
        v.x != x ||
        v.y != y ||
        v.z != z ||
        false);
}




inline CIwSVec3 CIwSVec3::operator * (iwfixed l) const
{



    int32 test;
    test = ((int32)(x) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator *"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 559, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int32)(y) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator *"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 560, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int32)(z) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator *"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 561, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


    return CIwSVec3(
          (int16)IW_FIXED_MUL(x,l)
        , (int16)IW_FIXED_MUL(y,l)
        , (int16)IW_FIXED_MUL(z,l)
        );
}




inline CIwSVec3 & CIwSVec3::operator *= (iwfixed l)
{



    int32 test;
    test = ((int32)(x) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator *="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 580, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int32)(y) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator *="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 581, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int32)(z) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator *="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 582, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


    x = (int16)IW_FIXED_MUL(x,l);
    y = (int16)IW_FIXED_MUL(y,l);
    z = (int16)IW_FIXED_MUL(z,l);
    return *this;
}




inline CIwSVec3 CIwSVec3::operator - () const
{
    return CIwSVec3(
        (int16)-x
        , (int16)-y
        , (int16)-z
        );
}




inline CIwSVec3 CIwSVec3::operator / (const iwfixed s) const
{
    return CIwSVec3(
        (int16)(IW_FIXED_DIV(x, s))
        , (int16)(IW_FIXED_DIV(y, s))
        , (int16)(IW_FIXED_DIV(z, s))
        );
}




inline CIwSVec3 CIwSVec3::operator >> (const int s) const
{
    return CIwSVec3(
        (int16)(x >> s)
        , (int16)(y >> s)
        , (int16)(z >> s)
        );
}

inline CIwSVec3 CIwSVec3::operator >>= (const int s)
{
    x >>= s;
    y >>= s;
    z >>= s;
    return *this;
}




inline CIwSVec3 CIwSVec3::operator << (const int s) const
{

    int32 test;
    test = (x << s); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator <<"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 642, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = (y << s); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator <<"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 643, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = (z << s); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator <<"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 644, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return CIwSVec3(
        (int16)(x << s)
        , (int16)(y << s)
        , (int16)(z << s)
        );
}

inline CIwSVec3 CIwSVec3::operator <<= (const int s)
{

    int32 test;
    test = (int32)(x) << s; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator <<="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 657, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = (int32)(y) << s; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator <<="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 658, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    x <<= s;
    y <<= s;

    test = (int32)(z) << s; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec3 overflow: operator <<="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 663, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    z <<= s;
    return *this;
}


inline int16 & CIwSVec3::operator [] (const int n)
{
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(n < 3)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Attempting to reference %d entry in 3 dimensional vector", n); switch (IwDebugAssertShow("n < 3", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 672, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (&x)[n];
}


inline int16 CIwSVec3::operator [] (const int n) const
{
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(n < 3)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Attempting to reference %d entry in 3 dimensional vector", n); switch (IwDebugAssertShow("n < 3", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h", 679, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (&x)[n];
}





inline CIwSVec3 operator * (iwfixed l, const CIwSVec3& v)
{
    return v * l;
}





# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h" 1
       
# 33 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h"
class CIwFVec2;
class CIwFVec3;
class CIwFVec4;
class CIwSVec2;
class CIwSVec3;
class CIwSVec4;
class CIwVec2;
class CIwVec3;
class CIwVec4;





class CIwVec3
{
public:
    int32 x;
    int32 y;
    int32 z;


    static CIwVec3 g_Zero;


    static CIwVec3 g_AxisX;


    static CIwVec3 g_AxisY;


    static CIwVec3 g_AxisZ;




    CIwVec3() {};
# 79 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h"
    CIwVec3(int32 _x, int32 _y, int32 _z) : x(_x), y(_y), z(_z) {};

    explicit CIwVec3(const CIwSVec3& v);
    explicit CIwVec3(const CIwFVec3& v);
    CIwVec3 operator = (const CIwSVec3& v);
    CIwVec3 operator = (const CIwFVec3& v);
# 97 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h"
    int32 GetLength() const;





    inline int32 GetLengthSquared() const
    {


        int64 test;
        test = (int64)x*x + (int64)y*y+ (int64)z*z; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 108, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        return (x*x + y*y+ z*z) >> 12;
    }






    int32 GetLengthSafe() const;






    int32 GetLengthSquaredSafe() const;





    int32 GetLengthSquaredUnshifted() const;
# 147 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h"
    void NormaliseSlow();
# 157 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h"
    void Normalise();





    CIwVec3 GetNormalised() const;







    void NormaliseSafe();





    CIwVec3 GetNormalisedSafe() const;






    bool IsNormalised() const;
# 197 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h"
    void Serialise(void);





    bool IsZero() const;






    inline int32 Dot(CIwVec3 const & v) const {return *this * v;}






    inline CIwVec3 Cross(CIwVec3 const & v) const {return *this ^ v;}
# 234 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h"
    CIwVec3& operator = (CIwVec3 const & v);






    CIwVec3 operator + (CIwVec3 const & v) const;






    CIwVec3 & operator += (CIwVec3 const & v);






    CIwVec3 operator - (CIwVec3 const & v) const;






    CIwVec3 & operator -= (CIwVec3 const & v);






    int32 operator * (CIwVec3 const & v) const;






    CIwVec3 operator ^ (CIwVec3 const & v) const;






    bool operator == (CIwVec3 const & v) const;






    bool operator != (CIwVec3 const & v) const;
# 303 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h"
    CIwVec3 operator - () const;






    CIwVec3 operator * (iwfixed l) const;







    CIwVec3 & operator *= (iwfixed l);






    CIwVec3 operator / (const iwfixed s) const;






    CIwVec3 operator >> (const int s) const;







    CIwVec3 operator >>= (const int s);






    CIwVec3 operator << (const int s) const;







    CIwVec3 operator <<= (const int s);






    int32 & operator [] (const int n);






    int32 operator [] (const int n) const;




};




inline CIwVec3& CIwVec3::operator = (CIwVec3 const & v)
{
    x = v.x;
    y = v.y;
    z = v.z;
    return *this;
}




inline CIwVec3 CIwVec3::operator + (CIwVec3 const & v) const
{

    int64 test;
    test = x + (int64)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator +"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 394, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y + (int64)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator +"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 395, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = z + (int64)v.z; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator +"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 396, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return CIwVec3(
        (int32)(x + v.x)
        , (int32)(y + v.y)
        , (int32)(z + v.z)
        );
}




inline CIwVec3 & CIwVec3::operator += (CIwVec3 const & v)
{

    int64 test;
    test = x + (int64)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator +="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 412, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y + (int64)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator +="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 413, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = z + (int64)v.z; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator +="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 414, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    x += v.x;
    y += v.y;
    z += v.z;
    return *this;
}




inline CIwVec3 CIwVec3::operator - (CIwVec3 const & v) const
{

    int64 test;
    test = x - (int64)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator -"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 429, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y - (int64)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator -"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 430, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = z - (int64)v.z; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator -"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 431, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return CIwVec3(
        (int32)(x - v.x)
        , (int32)(y - v.y)
        , (int32)(z - v.z)
        );
}




inline CIwVec3 & CIwVec3::operator -= (CIwVec3 const & v)
{

    int64 test;
    test = x - (int64)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator -="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 447, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y - (int64)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator -="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 448, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = z - (int64)v.z; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator -="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 449, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    x -= v.x;
    y -= v.y;
    z -= v.z;
    return *this;
}




inline int32 CIwVec3::operator * (CIwVec3 const & v) const
{

    int64 test = (
        (int64)x * v.x +
        (int64)y * v.y +
        (int64)z * v.z +
        0);

    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator *"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 469, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    (void) test;


    return (
        (int32)x * v.x +
        (int32)y * v.y +
        (int32)z * v.z +
        0) >> 12;
}



inline CIwVec3 CIwVec3::operator ^ (CIwVec3 const & v) const
{

    int chk = ((((x) > 0) ? (x) : -(x)) | (((y) > 0) ? (y) : -(y)) | (((z) > 0) ? (z) : -(z)) | (((v.x) > 0) ? (v.x) : -(v.x)) | (((v.y) > 0) ? (v.y) : -(v.y)) | (((v.z) > 0) ? (v.z) : -(v.z)));
    if (chk > (1<<15))
    {




        int64 test;
        test = ((int64)y*v.z - (int64)z*v.y)>>12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator ^"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 493, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = ((int64)z*v.x - (int64)x*v.z)>>12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator ^"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 494, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = ((int64)x*v.y - (int64)y*v.x)>>12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator ^"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 495, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        return CIwVec3( (int32)(((int64)y*v.z + (int64)z*-v.y)>>12),
                        (int32)(((int64)z*v.x + (int64)x*-v.z)>>12),
                        (int32)(((int64)x*v.y + (int64)y*-v.x)>>12) );
    }
    else
    {




        int64 test;
        test = ((int64)y*v.z)>>0; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator ^"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 508, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = ((int64)z*v.y)>>0; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator ^"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 509, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = ((int64)z*v.x)>>0; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator ^"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 510, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = ((int64)x*v.z)>>0; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator ^"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 511, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = ((int64)y*v.x)>>0; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator ^"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 512, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = ((int64)x*v.y)>>0; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator ^"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 513, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        test = ((int64)y*v.z - (int64)z*v.y)>>12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator ^"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 515, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = ((int64)z*v.x - (int64)x*v.z)>>12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator ^"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 516, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = ((int64)x*v.y - (int64)y*v.x)>>12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator ^"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 517, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


        return CIwVec3( (int32)(((int32)y*v.z + (int32)z*-v.y)>>12),
                        (int32)(((int32)z*v.x + (int32)x*-v.z)>>12),
                        (int32)(((int32)x*v.y + (int32)y*-v.x)>>12) );
    }
}




inline bool CIwVec3::operator == (CIwVec3 const & v) const
{
    return (
        v.x == x &&
        v.y == y &&
        v.z == z &&
        true);
}




inline bool CIwVec3::operator != (CIwVec3 const & v) const
{
    return (
        v.x != x ||
        v.y != y ||
        v.z != z ||
        false);
}




inline CIwVec3 CIwVec3::operator * (iwfixed l) const
{



    int64 test;
    test = ((int64)(x) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator *"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 559, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int64)(y) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator *"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 560, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int64)(z) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator *"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 561, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


    return CIwVec3(
          (int32)IW_FIXED_MUL(x,l)
        , (int32)IW_FIXED_MUL(y,l)
        , (int32)IW_FIXED_MUL(z,l)
        );
}




inline CIwVec3 & CIwVec3::operator *= (iwfixed l)
{



    int64 test;
    test = ((int64)(x) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator *="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 580, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int64)(y) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator *="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 581, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int64)(z) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator *="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 582, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


    x = (int32)IW_FIXED_MUL(x,l);
    y = (int32)IW_FIXED_MUL(y,l);
    z = (int32)IW_FIXED_MUL(z,l);
    return *this;
}




inline CIwVec3 CIwVec3::operator - () const
{
    return CIwVec3(
        (int32)-x
        , (int32)-y
        , (int32)-z
        );
}




inline CIwVec3 CIwVec3::operator / (const iwfixed s) const
{
    return CIwVec3(
        (int32)(IW_FIXED_DIV(x, s))
        , (int32)(IW_FIXED_DIV(y, s))
        , (int32)(IW_FIXED_DIV(z, s))
        );
}




inline CIwVec3 CIwVec3::operator >> (const int s) const
{
    return CIwVec3(
        (int32)(x >> s)
        , (int32)(y >> s)
        , (int32)(z >> s)
        );
}

inline CIwVec3 CIwVec3::operator >>= (const int s)
{
    x >>= s;
    y >>= s;
    z >>= s;
    return *this;
}




inline CIwVec3 CIwVec3::operator << (const int s) const
{

    int64 test;
    test = (x << s); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator <<"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 642, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = (y << s); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator <<"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 643, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = (z << s); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator <<"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 644, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return CIwVec3(
        (int32)(x << s)
        , (int32)(y << s)
        , (int32)(z << s)
        );
}

inline CIwVec3 CIwVec3::operator <<= (const int s)
{

    int64 test;
    test = (int64)(x) << s; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator <<="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 657, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = (int64)(y) << s; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator <<="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 658, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    x <<= s;
    y <<= s;

    test = (int64)(z) << s; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec3 overflow: operator <<="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 663, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    z <<= s;
    return *this;
}


inline int32 & CIwVec3::operator [] (const int n)
{
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(n < 3)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Attempting to reference %d entry in 3 dimensional vector", n); switch (IwDebugAssertShow("n < 3", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 672, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (&x)[n];
}


inline int32 CIwVec3::operator [] (const int n) const
{
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(n < 3)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Attempting to reference %d entry in 3 dimensional vector", n); switch (IwDebugAssertShow("n < 3", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h", 679, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (&x)[n];
}





inline CIwVec3 operator * (iwfixed l, const CIwVec3& v)
{
    return v * l;
}







inline CIwVec3::CIwVec3(const CIwSVec3& v)
{
    x = (int32)v.x;
    y = (int32)v.y;
    z = (int32)v.z;
}

inline CIwVec3 CIwVec3::operator = (const CIwSVec3& v)
{
    x = (int32)v.x;
    y = (int32)v.y;
    z = (int32)v.z;
    return *this;
}


inline bool operator == (const CIwVec3& v1, const CIwSVec3& v2)
{
    return (
        v1.x == (int32)v2.x &&
        v1.y == (int32)v2.y &&
        v1.z == (int32)v2.z &&
        true);
}


inline CIwVec3 operator + (const CIwVec3& v1, const CIwSVec3& v2)
{
    return CIwVec3(
        v1.x + (int32)v2.x
        , v1.y + (int32)v2.y
        , v1.z + (int32)v2.z
        );
}


inline CIwVec3 operator - (const CIwVec3& v1, const CIwSVec3& v2)
{
    return CIwVec3(
        v1.x - (int32)v2.x
        , v1.y - (int32)v2.y
        , v1.z - (int32)v2.z
        );
}




inline CIwVec3 operator += (CIwVec3& v1, const CIwSVec3& v2)
{
    v1.x += (int32)v2.x;
    v1.y += (int32)v2.y;
    v1.z += (int32)v2.z;
    return v1;
}




inline CIwVec3 operator -= (CIwVec3& v1, const CIwSVec3& v2)
{
    v1.x -= (int32)v2.x;
    v1.y -= (int32)v2.y;
    v1.z -= (int32)v2.z;
    return v1;
}




inline int32 operator * (const CIwVec3& v1, const CIwSVec3& v2)
{
    return v1 * CIwVec3(v2);
}




inline CIwVec3 operator ^ (const CIwVec3& v1, const CIwSVec3& v2)
{
    return v1 ^ CIwVec3(v2);
}





# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec3.h" 1
       
# 33 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec3.h"
class CIwFVec2;
class CIwFVec3;
class CIwFVec4;
class CIwSVec2;
class CIwSVec3;
class CIwSVec4;
class CIwVec2;
class CIwVec3;
class CIwVec4;





class CIwFVec3
{
public:
    float x;
    float y;
    float z;


    static CIwFVec3 g_Zero;


    static CIwFVec3 g_AxisX;


    static CIwFVec3 g_AxisY;


    static CIwFVec3 g_AxisZ;




    CIwFVec3() {};
# 79 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec3.h"
    CIwFVec3(float _x, float _y, float _z) : x(_x), y(_y), z(_z) {};

    explicit CIwFVec3(const CIwSVec3& v);
    explicit CIwFVec3(const CIwVec3& v);
    CIwFVec3 operator = (const CIwSVec3& v);
    CIwFVec3 operator = (const CIwVec3& v);
# 97 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec3.h"
    float GetLength() const;





    inline float GetLengthSquared() const
    {

        return (x*x + y*y+ z*z);
    }
# 124 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec3.h"
    void Normalise();






    CIwFVec3 GetNormalised() const;







    bool IsNormalised() const;
# 152 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec3.h"
    void Serialise(void);





    bool IsZero() const;






    inline float Dot(CIwFVec3 const & v) const {return *this * v;}






    inline CIwFVec3 Cross(CIwFVec3 const & v) const {return *this ^ v;}
# 189 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec3.h"
    CIwFVec3& operator = (CIwFVec3 const & v);






    CIwFVec3 operator + (CIwFVec3 const & v) const;






    CIwFVec3 & operator += (CIwFVec3 const & v);






    CIwFVec3 operator - (CIwFVec3 const & v) const;






    CIwFVec3 & operator -= (CIwFVec3 const & v);






    float operator * (CIwFVec3 const & v) const;






    CIwFVec3 operator ^ (CIwFVec3 const & v) const;






    bool operator == (CIwFVec3 const & v) const;






    bool operator != (CIwFVec3 const & v) const;
# 258 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec3.h"
    CIwFVec3 operator - () const;






    CIwFVec3 operator * (float l) const;







    CIwFVec3 & operator *= (float l);






    CIwFVec3 operator / (const float s) const;







    float & operator [] (const int n);






    float operator [] (const int n) const;




};




inline CIwFVec3& CIwFVec3::operator = (CIwFVec3 const & v)
{
    x = v.x;
    y = v.y;
    z = v.z;
    return *this;
}




inline CIwFVec3 CIwFVec3::operator + (CIwFVec3 const & v) const
{
    return CIwFVec3(
        (float)(x + v.x)
        , (float)(y + v.y)
        , (float)(z + v.z)
        );
}




inline CIwFVec3 & CIwFVec3::operator += (CIwFVec3 const & v)
{
    x += v.x;
    y += v.y;
    z += v.z;
    return *this;
}




inline CIwFVec3 CIwFVec3::operator - (CIwFVec3 const & v) const
{
    return CIwFVec3(
        (float)(x - v.x)
        , (float)(y - v.y)
        , (float)(z - v.z)
        );
}




inline CIwFVec3 & CIwFVec3::operator -= (CIwFVec3 const & v)
{
    x -= v.x;
    y -= v.y;
    z -= v.z;
    return *this;
}




inline float CIwFVec3::operator * (CIwFVec3 const & v) const
{

    return (
        (float)x * v.x +
        (float)y * v.y +
        (float)z * v.z +
        0);
}



inline CIwFVec3 CIwFVec3::operator ^ (CIwFVec3 const & v) const
{
    return CIwFVec3((y * v.z - z * v.y),
                (z * v.x - x * v.z),
                (x * v.y - y * v.x));
}




inline bool CIwFVec3::operator == (CIwFVec3 const & v) const
{
    return (
        v.x == x &&
        v.y == y &&
        v.z == z &&
        true);
}




inline bool CIwFVec3::operator != (CIwFVec3 const & v) const
{
    return (
        v.x != x ||
        v.y != y ||
        v.z != z ||
        false);
}




inline CIwFVec3 CIwFVec3::operator * (float l) const
{
    return CIwFVec3(
        (float)(x * l)
        , (float)(y * l)
        , (float)(z * l)
        );
}




inline CIwFVec3 & CIwFVec3::operator *= (float l)
{
    x = (float)(x * l);
    y = (float)(y * l);
    z = (float)(z * l);
    return *this;
}




inline CIwFVec3 CIwFVec3::operator - () const
{
    return CIwFVec3(
        (float)-x
        , (float)-y
        , (float)-z
        );
}




inline CIwFVec3 CIwFVec3::operator / (const float s) const
{
    return CIwFVec3(
        (float)(x / s)
        , (float)(y / s)
        , (float)(z / s)
        );
}


inline float & CIwFVec3::operator [] (const int n)
{
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(n < 3)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Attempting to reference %d entry in 3 dimensional vector", n); switch (IwDebugAssertShow("n < 3", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec3.h", 455, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (&x)[n];
}


inline float CIwFVec3::operator [] (const int n) const
{
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(n < 3)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Attempting to reference %d entry in 3 dimensional vector", n); switch (IwDebugAssertShow("n < 3", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec3.h", 462, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (&x)[n];
}





inline CIwFVec3 operator * (float l, const CIwFVec3& v)
{
    return v * l;
}







inline CIwFVec3::CIwFVec3(const CIwSVec3& v)
{
    x = ((float)(v.x) / (float)(1 << 12));
    y = ((float)(v.y) / (float)(1 << 12));
    z = ((float)(v.z) / (float)(1 << 12));
}

inline CIwFVec3 CIwFVec3::operator = (const CIwSVec3& v)
{
    x = ((float)(v.x) / (float)(1 << 12));
    y = ((float)(v.y) / (float)(1 << 12));
    z = ((float)(v.z) / (float)(1 << 12));
    return *this;
}


inline bool operator == (const CIwFVec3& v1, const CIwSVec3& v2)
{
    return (
        v1.x == ((float)(v2.x) / (float)(1 << 12)) &&
        v1.y == ((float)(v2.y) / (float)(1 << 12)) &&
        v1.z == ((float)(v2.z) / (float)(1 << 12)) &&
        true);
}


inline CIwFVec3 operator + (const CIwFVec3& v1, const CIwSVec3& v2)
{
    return CIwFVec3(
        v1.x + ((float)(v2.x) / (float)(1 << 12))
        , v1.y + ((float)(v2.y) / (float)(1 << 12))
        , v1.z + ((float)(v2.z) / (float)(1 << 12))
        );
}


inline CIwFVec3 operator - (const CIwFVec3& v1, const CIwSVec3& v2)
{
    return CIwFVec3(
        v1.x - ((float)(v2.x) / (float)(1 << 12))
        , v1.y - ((float)(v2.y) / (float)(1 << 12))
        , v1.z - ((float)(v2.z) / (float)(1 << 12))
        );
}




inline CIwFVec3 operator += (CIwFVec3& v1, const CIwSVec3& v2)
{
    v1.x += ((float)(v2.x) / (float)(1 << 12));
    v1.y += ((float)(v2.y) / (float)(1 << 12));
    v1.z += ((float)(v2.z) / (float)(1 << 12));
    return v1;
}




inline CIwFVec3 operator -= (CIwFVec3& v1, const CIwSVec3& v2)
{
    v1.x -= ((float)(v2.x) / (float)(1 << 12));
    v1.y -= ((float)(v2.y) / (float)(1 << 12));
    v1.z -= ((float)(v2.z) / (float)(1 << 12));
    return v1;
}




inline float operator * (const CIwFVec3& v1, const CIwSVec3& v2)
{
    return v1 * CIwFVec3(v2);
}




inline CIwFVec3 operator ^ (const CIwFVec3& v1, const CIwSVec3& v2)
{
    return v1 ^ CIwFVec3(v2);
}







inline CIwFVec3::CIwFVec3(const CIwVec3& v)
{
    x = ((float)(v.x) / (float)(1 << 12));
    y = ((float)(v.y) / (float)(1 << 12));
    z = ((float)(v.z) / (float)(1 << 12));
}




inline CIwFVec3 CIwFVec3::operator = (const CIwVec3& v)
{
    x = ((float)(v.x) / (float)(1 << 12));
    y = ((float)(v.y) / (float)(1 << 12));
    z = ((float)(v.z) / (float)(1 << 12));
    return *this;
}




inline bool operator == (const CIwFVec3& v1, const CIwVec3& v2)
{
    return (
        v1.x == ((float)(v2.x) / (float)(1 << 12)) &&
        v1.y == ((float)(v2.y) / (float)(1 << 12)) &&
        v1.z == ((float)(v2.z) / (float)(1 << 12)) &&
        true);
}




inline CIwFVec3 operator + (const CIwFVec3& v1, const CIwVec3& v2)
{
    return CIwFVec3(
        v1.x + ((float)(v2.x) / (float)(1 << 12))
        , v1.y + ((float)(v2.y) / (float)(1 << 12))
        , v1.z + ((float)(v2.z) / (float)(1 << 12))
        );
}




inline CIwFVec3 operator - (const CIwFVec3& v1, const CIwVec3& v2)
{
    return CIwFVec3(
        v1.x - ((float)(v2.x) / (float)(1 << 12))
        , v1.y - ((float)(v2.y) / (float)(1 << 12))
        , v1.z - ((float)(v2.z) / (float)(1 << 12))
        );
}




inline CIwFVec3 operator += (CIwFVec3& v1, const CIwVec3& v2)
{
    v1.x += ((float)(v2.x) / (float)(1 << 12));
    v1.y += ((float)(v2.y) / (float)(1 << 12));
    v1.z += ((float)(v2.z) / (float)(1 << 12));
    return v1;
}




inline CIwFVec3 operator -= (CIwFVec3& v1, const CIwVec3& v2)
{
    v1.x -= ((float)(v2.x) / (float)(1 << 12));
    v1.y -= ((float)(v2.y) / (float)(1 << 12));
    v1.z -= ((float)(v2.z) / (float)(1 << 12));
    return v1;
}




inline float operator * (const CIwFVec3& v1, const CIwVec3& v2)
{
    return v1 * CIwFVec3(v2);
}




inline CIwFVec3 operator ^ (const CIwFVec3& v1, const CIwVec3& v2)
{
    return v1 ^ CIwFVec3(v2);
}
# 786 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec3.h" 2

inline CIwVec3::CIwVec3(const CIwFVec3& v)
{
    x = IW_FIXED_FROM_FLOAT(v.x);
    y = IW_FIXED_FROM_FLOAT(v.y);
    z = IW_FIXED_FROM_FLOAT(v.z);
}




inline CIwVec3 CIwVec3::operator = (const CIwFVec3& v)
{
    x = IW_FIXED_FROM_FLOAT(v.x);
    y = IW_FIXED_FROM_FLOAT(v.y);
    z = IW_FIXED_FROM_FLOAT(v.z);
    return *this;
}




inline bool operator == (const CIwVec3& v1, const CIwFVec3& v2)
{
    return (
        ((float)(v1.x) / (float)(1 << 12)) == v2.x &&
        ((float)(v1.y) / (float)(1 << 12)) == v2.y &&
        ((float)(v1.z) / (float)(1 << 12)) == v2.z &&
        true);
}




inline CIwFVec3 operator + (const CIwVec3& v1, const CIwFVec3& v2)
{
    return CIwFVec3(
        ((float)(v1.x) / (float)(1 << 12)) + v2.x
        , ((float)(v1.y) / (float)(1 << 12)) + v2.y
        , ((float)(v1.z) / (float)(1 << 12)) + v2.z
        );
}




inline CIwFVec3 operator - (const CIwVec3& v1, const CIwFVec3& v2)
{
    return CIwFVec3(
        ((float)(v1.x) / (float)(1 << 12)) - v2.x
        , ((float)(v1.y) / (float)(1 << 12)) - v2.y
        , ((float)(v1.z) / (float)(1 << 12)) - v2.z
        );
}




inline CIwVec3 operator += (CIwVec3& v1, const CIwFVec3& v2)
{
    v1.x += IW_FIXED_FROM_FLOAT(v2.x);
    v1.y += IW_FIXED_FROM_FLOAT(v2.y);
    v1.z += IW_FIXED_FROM_FLOAT(v2.z);
    return v1;
}




inline CIwVec3 operator -= (CIwVec3& v1, const CIwFVec3& v2)
{
    v1.x -= IW_FIXED_FROM_FLOAT(v2.x);
    v1.y -= IW_FIXED_FROM_FLOAT(v2.y);
    v1.z -= IW_FIXED_FROM_FLOAT(v2.z);
    return v1;
}




inline float operator * (const CIwVec3& v1, const CIwFVec3& v2)
{
    return CIwFVec3(v1) * v2;
}




inline CIwFVec3 operator ^ (const CIwVec3& v1, const CIwFVec3& v2)
{
    return CIwFVec3(v1) ^ v2;
}
# 697 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec3.h" 2

inline CIwSVec3::CIwSVec3(const CIwVec3& v)
{
    x = IW_SFIXED_FROM_FIXED(v.x);
    y = IW_SFIXED_FROM_FIXED(v.y);
    z = IW_SFIXED_FROM_FIXED(v.z);
}

inline CIwSVec3 CIwSVec3::operator = (const CIwVec3& v)
{
    x = IW_SFIXED_FROM_FIXED(v.x);
    y = IW_SFIXED_FROM_FIXED(v.y);
    z = IW_SFIXED_FROM_FIXED(v.z);
    return *this;
}


inline bool operator == (const CIwSVec3& v1, const CIwVec3& v2)
{
    return (
        (int32)v1.x == v2.x &&
        (int32)v1.y == v2.y &&
        (int32)v1.z == v2.z &&
        true);
}


inline CIwVec3 operator + (const CIwSVec3& v1, const CIwVec3& v2)
{
    return CIwVec3(
        (int32)v1.x + v2.x
        , (int32)v1.y + v2.y
        , (int32)v1.z + v2.z
        );
}


inline CIwVec3 operator - (const CIwSVec3& v1, const CIwVec3& v2)
{
    return CIwVec3(
        (int32)v1.x - v2.x
        , (int32)v1.y - v2.y
        , (int32)v1.z - v2.z
        );
}




inline CIwSVec3 operator += (CIwSVec3& v1, const CIwVec3& v2)
{
    v1.x += IW_SFIXED_FROM_FIXED(v2.x);
    v1.y += IW_SFIXED_FROM_FIXED(v2.y);
    v1.z += IW_SFIXED_FROM_FIXED(v2.z);
    return v1;
}




inline CIwSVec3 operator -= (CIwSVec3& v1, const CIwVec3& v2)
{
    v1.x -= IW_SFIXED_FROM_FIXED(v2.x);
    v1.y -= IW_SFIXED_FROM_FIXED(v2.y);
    v1.z -= IW_SFIXED_FROM_FIXED(v2.z);
    return v1;
}




inline int32 operator * (const CIwSVec3& v1, const CIwVec3& v2)
{
    return CIwVec3(v1) * v2;
}




inline CIwVec3 operator ^ (const CIwSVec3& v1, const CIwVec3& v2)
{
    return CIwVec3(v1) ^ v2;
}







inline CIwSVec3::CIwSVec3(const CIwFVec3& v)
{
    x = IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v.x));
    y = IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v.y));
    z = IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v.z));
}




inline CIwSVec3 CIwSVec3::operator = (const CIwFVec3& v)
{
    x = IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v.x));
    y = IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v.y));
    z = IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v.z));
    return *this;
}




inline bool operator == (const CIwSVec3& v1, const CIwFVec3& v2)
{
    return (
        ((float)(v1.x) / (float)(1 << 12)) == v2.x &&
        ((float)(v1.y) / (float)(1 << 12)) == v2.y &&
        ((float)(v1.z) / (float)(1 << 12)) == v2.z &&
        true);
}




inline CIwFVec3 operator + (const CIwSVec3& v1, const CIwFVec3& v2)
{
    return CIwFVec3(
        ((float)(v1.x) / (float)(1 << 12)) + v2.x
        , ((float)(v1.y) / (float)(1 << 12)) + v2.y
        , ((float)(v1.z) / (float)(1 << 12)) + v2.z
        );
}




inline CIwFVec3 operator - (const CIwSVec3& v1, const CIwFVec3& v2)
{
    return CIwFVec3(
        ((float)(v1.x) / (float)(1 << 12)) - v2.x
        , ((float)(v1.y) / (float)(1 << 12)) - v2.y
        , ((float)(v1.z) / (float)(1 << 12)) - v2.z
        );
}




inline CIwSVec3 operator += (CIwSVec3& v1, const CIwFVec3& v2)
{
    v1.x += IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v2.x));
    v1.y += IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v2.y));
    v1.z += IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v2.z));
    return v1;
}




inline CIwSVec3 operator -= (CIwSVec3& v1, const CIwFVec3& v2)
{
    v1.x -= IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v2.x));
    v1.y -= IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v2.y));
    v1.z -= IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v2.z));
    return v1;
}




inline float operator * (const CIwSVec3& v1, const CIwFVec3& v2)
{
    return CIwFVec3(v1) * v2;
}




inline CIwFVec3 operator ^ (const CIwSVec3& v1, const CIwFVec3& v2)
{
    return CIwFVec3(v1) ^ v2;
}
# 35 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec.h" 2
# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h" 1
       
# 33 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h"
class CIwFVec2;
class CIwFVec3;
class CIwFVec4;
class CIwSVec2;
class CIwSVec3;
class CIwSVec4;
class CIwVec2;
class CIwVec3;
class CIwVec4;





class CIwSVec4
{
public:
    int16 x;
    int16 y;
    int16 z;
    int16 w;


    static CIwSVec4 g_Zero;


    static CIwSVec4 g_AxisX;


    static CIwSVec4 g_AxisY;


    static CIwSVec4 g_AxisZ;


    static CIwSVec4 g_AxisW;




    CIwSVec4() {};
# 86 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h"
    CIwSVec4(int16 _x, int16 _y, int16 _z, int16 _w) : x(_x), y(_y), z(_z), w(_w) {};

    explicit CIwSVec4(const CIwVec4& v);
    explicit CIwSVec4(const CIwFVec4& v);
    CIwSVec4 operator = (const CIwVec4& v);
    CIwSVec4 operator = (const CIwFVec4& v);
# 104 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h"
    int32 GetLength() const;





    inline int32 GetLengthSquared() const
    {


        int64 test;
        test = (int64)x*x + (int64)y*y+ (int64)z*z+ (int64)w*w; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 115, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        return (x*x + y*y+ z*z+ w*w) >> 12;
    }






    int32 GetLengthSafe() const;






    int32 GetLengthSquaredSafe() const;





    int32 GetLengthSquaredUnshifted() const;
# 154 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h"
    void NormaliseSlow();
# 164 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h"
    void Normalise();





    CIwSVec4 GetNormalised() const;







    void NormaliseSafe();





    CIwSVec4 GetNormalisedSafe() const;






    bool IsNormalised() const;
# 204 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h"
    void Serialise(void);





    bool IsZero() const;






    inline int32 Dot(CIwSVec4 const & v) const {return *this * v;}
# 233 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h"
    CIwSVec4& operator = (CIwSVec4 const & v);






    CIwSVec4 operator + (CIwSVec4 const & v) const;






    CIwSVec4 & operator += (CIwSVec4 const & v);






    CIwSVec4 operator - (CIwSVec4 const & v) const;






    CIwSVec4 & operator -= (CIwSVec4 const & v);






    int32 operator * (CIwSVec4 const & v) const;







    bool operator == (CIwSVec4 const & v) const;






    bool operator != (CIwSVec4 const & v) const;
# 296 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h"
    CIwSVec4 operator - () const;






    CIwSVec4 operator * (iwfixed l) const;







    CIwSVec4 & operator *= (iwfixed l);






    CIwSVec4 operator / (const iwfixed s) const;






    CIwSVec4 operator >> (const int s) const;







    CIwSVec4 operator >>= (const int s);






    CIwSVec4 operator << (const int s) const;







    CIwSVec4 operator <<= (const int s);






    int16 & operator [] (const int n);






    int16 operator [] (const int n) const;




};




inline CIwSVec4& CIwSVec4::operator = (CIwSVec4 const & v)
{
    x = v.x;
    y = v.y;
    z = v.z;
    w = v.w;
    return *this;
}




inline CIwSVec4 CIwSVec4::operator + (CIwSVec4 const & v) const
{

    int32 test;
    test = x + (int32)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator +"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 388, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y + (int32)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator +"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 389, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = z + (int32)v.z; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator +"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 390, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = w + (int32)v.w; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator +"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 391, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return CIwSVec4(
        (int16)(x + v.x)
        , (int16)(y + v.y)
        , (int16)(z + v.z)
        , (int16)(w + v.w)
        );
}




inline CIwSVec4 & CIwSVec4::operator += (CIwSVec4 const & v)
{

    int32 test;
    test = x + (int32)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator +="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 408, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y + (int32)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator +="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 409, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = z + (int32)v.z; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator +="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 410, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = w + (int32)v.w; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator +="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 411, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    x += v.x;
    y += v.y;
    z += v.z;
    w += v.w;
    return *this;
}




inline CIwSVec4 CIwSVec4::operator - (CIwSVec4 const & v) const
{

    int32 test;
    test = x - (int32)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator -"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 427, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y - (int32)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator -"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 428, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = z - (int32)v.z; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator -"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 429, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = w - (int32)v.w; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator -"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 430, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return CIwSVec4(
        (int16)(x - v.x)
        , (int16)(y - v.y)
        , (int16)(z - v.z)
        , (int16)(w - v.w)
        );
}




inline CIwSVec4 & CIwSVec4::operator -= (CIwSVec4 const & v)
{

    int32 test;
    test = x - (int32)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator -="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 447, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y - (int32)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator -="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 448, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = z - (int32)v.z; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator -="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 449, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = w - (int32)v.w; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator -="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 450, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    x -= v.x;
    y -= v.y;
    z -= v.z;
    w -= v.w;
    return *this;
}




inline int32 CIwSVec4::operator * (CIwSVec4 const & v) const
{

    int64 test = (
        (int64)x * v.x +
        (int64)y * v.y +
        (int64)z * v.z +
        (int64)w * v.w +
        0);

    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator *"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 472, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    (void) test;


    return (
        (int32)x * v.x +
        (int32)y * v.y +
        (int32)z * v.z +
        (int32)w * v.w +
        0) >> 12;
}




inline bool CIwSVec4::operator == (CIwSVec4 const & v) const
{
    return (
        v.x == x &&
        v.y == y &&
        v.z == z &&
        v.w == w &&
        true);
}




inline bool CIwSVec4::operator != (CIwSVec4 const & v) const
{
    return (
        v.x != x ||
        v.y != y ||
        v.z != z ||
        v.w != w ||
        false);
}




inline CIwSVec4 CIwSVec4::operator * (iwfixed l) const
{



    int32 test;
    test = ((int32)(x) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator *"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 519, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int32)(y) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator *"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 520, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int32)(z) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator *"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 521, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int32)(w) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator *"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 522, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


    return CIwSVec4(
          (int16)IW_FIXED_MUL(x,l)
        , (int16)IW_FIXED_MUL(y,l)
        , (int16)IW_FIXED_MUL(z,l)
        , (int16)IW_FIXED_MUL(w,l)
        );
}




inline CIwSVec4 & CIwSVec4::operator *= (iwfixed l)
{



    int32 test;
    test = ((int32)(x) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator *="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 542, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int32)(y) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator *="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 543, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int32)(z) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator *="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 544, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int32)(w) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator *="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 545, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


    x = (int16)IW_FIXED_MUL(x,l);
    y = (int16)IW_FIXED_MUL(y,l);
    z = (int16)IW_FIXED_MUL(z,l);
    w = (int16)IW_FIXED_MUL(w,l);
    return *this;
}




inline CIwSVec4 CIwSVec4::operator - () const
{
    return CIwSVec4(
        (int16)-x
        , (int16)-y
        , (int16)-z
        , (int16)-w
        );
}




inline CIwSVec4 CIwSVec4::operator / (const iwfixed s) const
{
    return CIwSVec4(
        (int16)(IW_FIXED_DIV(x, s))
        , (int16)(IW_FIXED_DIV(y, s))
        , (int16)(IW_FIXED_DIV(z, s))
        , (int16)(IW_FIXED_DIV(w, s))
        );
}




inline CIwSVec4 CIwSVec4::operator >> (const int s) const
{
    return CIwSVec4(
        (int16)(x >> s)
        , (int16)(y >> s)
        , (int16)(z >> s)
        , (int16)(w >> s)
        );
}

inline CIwSVec4 CIwSVec4::operator >>= (const int s)
{
    x >>= s;
    y >>= s;
    z >>= s;
    w >>= s;
    return *this;
}




inline CIwSVec4 CIwSVec4::operator << (const int s) const
{

    int32 test;
    test = (x << s); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator <<"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 610, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = (y << s); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator <<"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 611, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = (z << s); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator <<"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 612, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = (w << s); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator <<"); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 613, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return CIwSVec4(
        (int16)(x << s)
        , (int16)(y << s)
        , (int16)(z << s)
        , (int16)(w << s)
        );
}

inline CIwSVec4 CIwSVec4::operator <<= (const int s)
{

    int32 test;
    test = (int32)(x) << s; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator <<="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 627, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = (int32)(y) << s; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator <<="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 628, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    x <<= s;
    y <<= s;

    test = (int32)(z) << s; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator <<="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 633, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    z <<= s;

    test = (int32)(w) << s; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 31 == test >> 15)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwSVec4 overflow: operator <<="); switch (IwDebugAssertShow("test >> 31 == test >> 15", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 637, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    w <<= s;
    return *this;
}


inline int16 & CIwSVec4::operator [] (const int n)
{
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(n < 4)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Attempting to reference %d entry in 4 dimensional vector", n); switch (IwDebugAssertShow("n < 4", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 646, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (&x)[n];
}


inline int16 CIwSVec4::operator [] (const int n) const
{
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(n < 4)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Attempting to reference %d entry in 4 dimensional vector", n); switch (IwDebugAssertShow("n < 4", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h", 653, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (&x)[n];
}





inline CIwSVec4 operator * (iwfixed l, const CIwSVec4& v)
{
    return v * l;
}





# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h" 1
       
# 33 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h"
class CIwFVec2;
class CIwFVec3;
class CIwFVec4;
class CIwSVec2;
class CIwSVec3;
class CIwSVec4;
class CIwVec2;
class CIwVec3;
class CIwVec4;





class CIwVec4
{
public:
    int32 x;
    int32 y;
    int32 z;
    int32 w;


    static CIwVec4 g_Zero;


    static CIwVec4 g_AxisX;


    static CIwVec4 g_AxisY;


    static CIwVec4 g_AxisZ;


    static CIwVec4 g_AxisW;




    CIwVec4() {};
# 86 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h"
    CIwVec4(int32 _x, int32 _y, int32 _z, int32 _w) : x(_x), y(_y), z(_z), w(_w) {};

    explicit CIwVec4(const CIwSVec4& v);
    explicit CIwVec4(const CIwFVec4& v);
    CIwVec4 operator = (const CIwSVec4& v);
    CIwVec4 operator = (const CIwFVec4& v);
# 104 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h"
    int32 GetLength() const;





    inline int32 GetLengthSquared() const
    {


        int64 test;
        test = (int64)x*x + (int64)y*y+ (int64)z*z+ (int64)w*w; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 115, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        return (x*x + y*y+ z*z+ w*w) >> 12;
    }






    int32 GetLengthSafe() const;






    int32 GetLengthSquaredSafe() const;





    int32 GetLengthSquaredUnshifted() const;
# 154 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h"
    void NormaliseSlow();
# 164 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h"
    void Normalise();





    CIwVec4 GetNormalised() const;







    void NormaliseSafe();





    CIwVec4 GetNormalisedSafe() const;






    bool IsNormalised() const;
# 204 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h"
    void Serialise(void);





    bool IsZero() const;






    inline int32 Dot(CIwVec4 const & v) const {return *this * v;}
# 233 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h"
    CIwVec4& operator = (CIwVec4 const & v);






    CIwVec4 operator + (CIwVec4 const & v) const;






    CIwVec4 & operator += (CIwVec4 const & v);






    CIwVec4 operator - (CIwVec4 const & v) const;






    CIwVec4 & operator -= (CIwVec4 const & v);






    int32 operator * (CIwVec4 const & v) const;







    bool operator == (CIwVec4 const & v) const;






    bool operator != (CIwVec4 const & v) const;
# 296 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h"
    CIwVec4 operator - () const;






    CIwVec4 operator * (iwfixed l) const;







    CIwVec4 & operator *= (iwfixed l);






    CIwVec4 operator / (const iwfixed s) const;






    CIwVec4 operator >> (const int s) const;







    CIwVec4 operator >>= (const int s);






    CIwVec4 operator << (const int s) const;







    CIwVec4 operator <<= (const int s);






    int32 & operator [] (const int n);






    int32 operator [] (const int n) const;




};




inline CIwVec4& CIwVec4::operator = (CIwVec4 const & v)
{
    x = v.x;
    y = v.y;
    z = v.z;
    w = v.w;
    return *this;
}




inline CIwVec4 CIwVec4::operator + (CIwVec4 const & v) const
{

    int64 test;
    test = x + (int64)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator +"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 388, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y + (int64)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator +"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 389, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = z + (int64)v.z; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator +"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 390, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = w + (int64)v.w; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator +"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 391, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return CIwVec4(
        (int32)(x + v.x)
        , (int32)(y + v.y)
        , (int32)(z + v.z)
        , (int32)(w + v.w)
        );
}




inline CIwVec4 & CIwVec4::operator += (CIwVec4 const & v)
{

    int64 test;
    test = x + (int64)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator +="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 408, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y + (int64)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator +="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 409, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = z + (int64)v.z; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator +="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 410, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = w + (int64)v.w; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator +="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 411, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    x += v.x;
    y += v.y;
    z += v.z;
    w += v.w;
    return *this;
}




inline CIwVec4 CIwVec4::operator - (CIwVec4 const & v) const
{

    int64 test;
    test = x - (int64)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator -"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 427, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y - (int64)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator -"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 428, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = z - (int64)v.z; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator -"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 429, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = w - (int64)v.w; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator -"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 430, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return CIwVec4(
        (int32)(x - v.x)
        , (int32)(y - v.y)
        , (int32)(z - v.z)
        , (int32)(w - v.w)
        );
}




inline CIwVec4 & CIwVec4::operator -= (CIwVec4 const & v)
{

    int64 test;
    test = x - (int64)v.x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator -="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 447, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = y - (int64)v.y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator -="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 448, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = z - (int64)v.z; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator -="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 449, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = w - (int64)v.w; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator -="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 450, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    x -= v.x;
    y -= v.y;
    z -= v.z;
    w -= v.w;
    return *this;
}




inline int32 CIwVec4::operator * (CIwVec4 const & v) const
{

    int64 test = (
        (int64)x * v.x +
        (int64)y * v.y +
        (int64)z * v.z +
        (int64)w * v.w +
        0);

    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator *"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 472, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    (void) test;


    return (
        (int32)x * v.x +
        (int32)y * v.y +
        (int32)z * v.z +
        (int32)w * v.w +
        0) >> 12;
}




inline bool CIwVec4::operator == (CIwVec4 const & v) const
{
    return (
        v.x == x &&
        v.y == y &&
        v.z == z &&
        v.w == w &&
        true);
}




inline bool CIwVec4::operator != (CIwVec4 const & v) const
{
    return (
        v.x != x ||
        v.y != y ||
        v.z != z ||
        v.w != w ||
        false);
}




inline CIwVec4 CIwVec4::operator * (iwfixed l) const
{



    int64 test;
    test = ((int64)(x) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator *"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 519, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int64)(y) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator *"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 520, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int64)(z) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator *"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 521, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int64)(w) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator *"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 522, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


    return CIwVec4(
          (int32)IW_FIXED_MUL(x,l)
        , (int32)IW_FIXED_MUL(y,l)
        , (int32)IW_FIXED_MUL(z,l)
        , (int32)IW_FIXED_MUL(w,l)
        );
}




inline CIwVec4 & CIwVec4::operator *= (iwfixed l)
{



    int64 test;
    test = ((int64)(x) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator *="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 542, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int64)(y) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator *="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 543, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int64)(z) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator *="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 544, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = ((int64)(w) * l) >> 12; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator *="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 545, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


    x = (int32)IW_FIXED_MUL(x,l);
    y = (int32)IW_FIXED_MUL(y,l);
    z = (int32)IW_FIXED_MUL(z,l);
    w = (int32)IW_FIXED_MUL(w,l);
    return *this;
}




inline CIwVec4 CIwVec4::operator - () const
{
    return CIwVec4(
        (int32)-x
        , (int32)-y
        , (int32)-z
        , (int32)-w
        );
}




inline CIwVec4 CIwVec4::operator / (const iwfixed s) const
{
    return CIwVec4(
        (int32)(IW_FIXED_DIV(x, s))
        , (int32)(IW_FIXED_DIV(y, s))
        , (int32)(IW_FIXED_DIV(z, s))
        , (int32)(IW_FIXED_DIV(w, s))
        );
}




inline CIwVec4 CIwVec4::operator >> (const int s) const
{
    return CIwVec4(
        (int32)(x >> s)
        , (int32)(y >> s)
        , (int32)(z >> s)
        , (int32)(w >> s)
        );
}

inline CIwVec4 CIwVec4::operator >>= (const int s)
{
    x >>= s;
    y >>= s;
    z >>= s;
    w >>= s;
    return *this;
}




inline CIwVec4 CIwVec4::operator << (const int s) const
{

    int64 test;
    test = (x << s); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator <<"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 610, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = (y << s); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator <<"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 611, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = (z << s); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator <<"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 612, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = (w << s); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator <<"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 613, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    return CIwVec4(
        (int32)(x << s)
        , (int32)(y << s)
        , (int32)(z << s)
        , (int32)(w << s)
        );
}

inline CIwVec4 CIwVec4::operator <<= (const int s)
{

    int64 test;
    test = (int64)(x) << s; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator <<="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 627, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    test = (int64)(y) << s; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator <<="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 628, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    x <<= s;
    y <<= s;

    test = (int64)(z) << s; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator <<="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 633, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    z <<= s;

    test = (int64)(w) << s; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwVec4 overflow: operator <<="); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 637, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

    w <<= s;
    return *this;
}


inline int32 & CIwVec4::operator [] (const int n)
{
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(n < 4)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Attempting to reference %d entry in 4 dimensional vector", n); switch (IwDebugAssertShow("n < 4", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 646, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (&x)[n];
}


inline int32 CIwVec4::operator [] (const int n) const
{
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(n < 4)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Attempting to reference %d entry in 4 dimensional vector", n); switch (IwDebugAssertShow("n < 4", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h", 653, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (&x)[n];
}





inline CIwVec4 operator * (iwfixed l, const CIwVec4& v)
{
    return v * l;
}







inline CIwVec4::CIwVec4(const CIwSVec4& v)
{
    x = (int32)v.x;
    y = (int32)v.y;
    z = (int32)v.z;
    w = (int32)v.w;
}

inline CIwVec4 CIwVec4::operator = (const CIwSVec4& v)
{
    x = (int32)v.x;
    y = (int32)v.y;
    z = (int32)v.z;
    w = (int32)v.w;
    return *this;
}


inline bool operator == (const CIwVec4& v1, const CIwSVec4& v2)
{
    return (
        v1.x == (int32)v2.x &&
        v1.y == (int32)v2.y &&
        v1.z == (int32)v2.z &&
        v1.w == (int32)v2.w &&
        true);
}


inline CIwVec4 operator + (const CIwVec4& v1, const CIwSVec4& v2)
{
    return CIwVec4(
        v1.x + (int32)v2.x
        , v1.y + (int32)v2.y
        , v1.z + (int32)v2.z
        , v1.w + (int32)v2.w
        );
}


inline CIwVec4 operator - (const CIwVec4& v1, const CIwSVec4& v2)
{
    return CIwVec4(
        v1.x - (int32)v2.x
        , v1.y - (int32)v2.y
        , v1.z - (int32)v2.z
        , v1.w - (int32)v2.w
        );
}




inline CIwVec4 operator += (CIwVec4& v1, const CIwSVec4& v2)
{
    v1.x += (int32)v2.x;
    v1.y += (int32)v2.y;
    v1.z += (int32)v2.z;
    v1.w += (int32)v2.w;
    return v1;
}




inline CIwVec4 operator -= (CIwVec4& v1, const CIwSVec4& v2)
{
    v1.x -= (int32)v2.x;
    v1.y -= (int32)v2.y;
    v1.z -= (int32)v2.z;
    v1.w -= (int32)v2.w;
    return v1;
}




inline int32 operator * (const CIwVec4& v1, const CIwSVec4& v2)
{
    return v1 * CIwVec4(v2);
}






# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec4.h" 1
       
# 33 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec4.h"
class CIwFVec2;
class CIwFVec3;
class CIwFVec4;
class CIwSVec2;
class CIwSVec3;
class CIwSVec4;
class CIwVec2;
class CIwVec3;
class CIwVec4;





class CIwFVec4
{
public:
    float x;
    float y;
    float z;
    float w;


    static CIwFVec4 g_Zero;


    static CIwFVec4 g_AxisX;


    static CIwFVec4 g_AxisY;


    static CIwFVec4 g_AxisZ;


    static CIwFVec4 g_AxisW;




    CIwFVec4() {};
# 86 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec4.h"
    CIwFVec4(float _x, float _y, float _z, float _w) : x(_x), y(_y), z(_z), w(_w) {};

    explicit CIwFVec4(const CIwSVec4& v);
    explicit CIwFVec4(const CIwVec4& v);
    CIwFVec4 operator = (const CIwSVec4& v);
    CIwFVec4 operator = (const CIwVec4& v);
# 104 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec4.h"
    float GetLength() const;





    inline float GetLengthSquared() const
    {

        return (x*x + y*y+ z*z+ w*w);
    }
# 131 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec4.h"
    void Normalise();






    CIwFVec4 GetNormalised() const;







    bool IsNormalised() const;
# 159 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec4.h"
    void Serialise(void);





    bool IsZero() const;






    inline float Dot(CIwFVec4 const & v) const {return *this * v;}
# 188 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec4.h"
    CIwFVec4& operator = (CIwFVec4 const & v);






    CIwFVec4 operator + (CIwFVec4 const & v) const;






    CIwFVec4 & operator += (CIwFVec4 const & v);






    CIwFVec4 operator - (CIwFVec4 const & v) const;






    CIwFVec4 & operator -= (CIwFVec4 const & v);






    float operator * (CIwFVec4 const & v) const;







    bool operator == (CIwFVec4 const & v) const;






    bool operator != (CIwFVec4 const & v) const;
# 251 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec4.h"
    CIwFVec4 operator - () const;






    CIwFVec4 operator * (float l) const;







    CIwFVec4 & operator *= (float l);






    CIwFVec4 operator / (const float s) const;







    float & operator [] (const int n);






    float operator [] (const int n) const;




};




inline CIwFVec4& CIwFVec4::operator = (CIwFVec4 const & v)
{
    x = v.x;
    y = v.y;
    z = v.z;
    w = v.w;
    return *this;
}




inline CIwFVec4 CIwFVec4::operator + (CIwFVec4 const & v) const
{
    return CIwFVec4(
        (float)(x + v.x)
        , (float)(y + v.y)
        , (float)(z + v.z)
        , (float)(w + v.w)
        );
}




inline CIwFVec4 & CIwFVec4::operator += (CIwFVec4 const & v)
{
    x += v.x;
    y += v.y;
    z += v.z;
    w += v.w;
    return *this;
}




inline CIwFVec4 CIwFVec4::operator - (CIwFVec4 const & v) const
{
    return CIwFVec4(
        (float)(x - v.x)
        , (float)(y - v.y)
        , (float)(z - v.z)
        , (float)(w - v.w)
        );
}




inline CIwFVec4 & CIwFVec4::operator -= (CIwFVec4 const & v)
{
    x -= v.x;
    y -= v.y;
    z -= v.z;
    w -= v.w;
    return *this;
}




inline float CIwFVec4::operator * (CIwFVec4 const & v) const
{

    return (
        (float)x * v.x +
        (float)y * v.y +
        (float)z * v.z +
        (float)w * v.w +
        0);
}




inline bool CIwFVec4::operator == (CIwFVec4 const & v) const
{
    return (
        v.x == x &&
        v.y == y &&
        v.z == z &&
        v.w == w &&
        true);
}




inline bool CIwFVec4::operator != (CIwFVec4 const & v) const
{
    return (
        v.x != x ||
        v.y != y ||
        v.z != z ||
        v.w != w ||
        false);
}




inline CIwFVec4 CIwFVec4::operator * (float l) const
{
    return CIwFVec4(
        (float)(x * l)
        , (float)(y * l)
        , (float)(z * l)
        , (float)(w * l)
        );
}




inline CIwFVec4 & CIwFVec4::operator *= (float l)
{
    x = (float)(x * l);
    y = (float)(y * l);
    z = (float)(z * l);
    w = (float)(w * l);
    return *this;
}




inline CIwFVec4 CIwFVec4::operator - () const
{
    return CIwFVec4(
        (float)-x
        , (float)-y
        , (float)-z
        , (float)-w
        );
}




inline CIwFVec4 CIwFVec4::operator / (const float s) const
{
    return CIwFVec4(
        (float)(x / s)
        , (float)(y / s)
        , (float)(z / s)
        , (float)(w / s)
        );
}


inline float & CIwFVec4::operator [] (const int n)
{
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(n < 4)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Attempting to reference %d entry in 4 dimensional vector", n); switch (IwDebugAssertShow("n < 4", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec4.h", 451, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (&x)[n];
}


inline float CIwFVec4::operator [] (const int n) const
{
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(n < 4)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Attempting to reference %d entry in 4 dimensional vector", n); switch (IwDebugAssertShow("n < 4", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec4.h", 458, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    return (&x)[n];
}





inline CIwFVec4 operator * (float l, const CIwFVec4& v)
{
    return v * l;
}







inline CIwFVec4::CIwFVec4(const CIwSVec4& v)
{
    x = ((float)(v.x) / (float)(1 << 12));
    y = ((float)(v.y) / (float)(1 << 12));
    z = ((float)(v.z) / (float)(1 << 12));
    w = ((float)(v.w) / (float)(1 << 12));
}

inline CIwFVec4 CIwFVec4::operator = (const CIwSVec4& v)
{
    x = ((float)(v.x) / (float)(1 << 12));
    y = ((float)(v.y) / (float)(1 << 12));
    z = ((float)(v.z) / (float)(1 << 12));
    w = ((float)(v.w) / (float)(1 << 12));
    return *this;
}


inline bool operator == (const CIwFVec4& v1, const CIwSVec4& v2)
{
    return (
        v1.x == ((float)(v2.x) / (float)(1 << 12)) &&
        v1.y == ((float)(v2.y) / (float)(1 << 12)) &&
        v1.z == ((float)(v2.z) / (float)(1 << 12)) &&
        v1.w == ((float)(v2.w) / (float)(1 << 12)) &&
        true);
}


inline CIwFVec4 operator + (const CIwFVec4& v1, const CIwSVec4& v2)
{
    return CIwFVec4(
        v1.x + ((float)(v2.x) / (float)(1 << 12))
        , v1.y + ((float)(v2.y) / (float)(1 << 12))
        , v1.z + ((float)(v2.z) / (float)(1 << 12))
        , v1.w + ((float)(v2.w) / (float)(1 << 12))
        );
}


inline CIwFVec4 operator - (const CIwFVec4& v1, const CIwSVec4& v2)
{
    return CIwFVec4(
        v1.x - ((float)(v2.x) / (float)(1 << 12))
        , v1.y - ((float)(v2.y) / (float)(1 << 12))
        , v1.z - ((float)(v2.z) / (float)(1 << 12))
        , v1.w - ((float)(v2.w) / (float)(1 << 12))
        );
}




inline CIwFVec4 operator += (CIwFVec4& v1, const CIwSVec4& v2)
{
    v1.x += ((float)(v2.x) / (float)(1 << 12));
    v1.y += ((float)(v2.y) / (float)(1 << 12));
    v1.z += ((float)(v2.z) / (float)(1 << 12));
    v1.w += ((float)(v2.w) / (float)(1 << 12));
    return v1;
}




inline CIwFVec4 operator -= (CIwFVec4& v1, const CIwSVec4& v2)
{
    v1.x -= ((float)(v2.x) / (float)(1 << 12));
    v1.y -= ((float)(v2.y) / (float)(1 << 12));
    v1.z -= ((float)(v2.z) / (float)(1 << 12));
    v1.w -= ((float)(v2.w) / (float)(1 << 12));
    return v1;
}




inline float operator * (const CIwFVec4& v1, const CIwSVec4& v2)
{
    return v1 * CIwFVec4(v2);
}
# 566 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFVec4.h"
inline CIwFVec4::CIwFVec4(const CIwVec4& v)
{
    x = ((float)(v.x) / (float)(1 << 12));
    y = ((float)(v.y) / (float)(1 << 12));
    z = ((float)(v.z) / (float)(1 << 12));
    w = ((float)(v.w) / (float)(1 << 12));
}




inline CIwFVec4 CIwFVec4::operator = (const CIwVec4& v)
{
    x = ((float)(v.x) / (float)(1 << 12));
    y = ((float)(v.y) / (float)(1 << 12));
    z = ((float)(v.z) / (float)(1 << 12));
    w = ((float)(v.w) / (float)(1 << 12));
    return *this;
}




inline bool operator == (const CIwFVec4& v1, const CIwVec4& v2)
{
    return (
        v1.x == ((float)(v2.x) / (float)(1 << 12)) &&
        v1.y == ((float)(v2.y) / (float)(1 << 12)) &&
        v1.z == ((float)(v2.z) / (float)(1 << 12)) &&
        v1.w == ((float)(v2.w) / (float)(1 << 12)) &&
        true);
}




inline CIwFVec4 operator + (const CIwFVec4& v1, const CIwVec4& v2)
{
    return CIwFVec4(
        v1.x + ((float)(v2.x) / (float)(1 << 12))
        , v1.y + ((float)(v2.y) / (float)(1 << 12))
        , v1.z + ((float)(v2.z) / (float)(1 << 12))
        , v1.w + ((float)(v2.w) / (float)(1 << 12))
        );
}




inline CIwFVec4 operator - (const CIwFVec4& v1, const CIwVec4& v2)
{
    return CIwFVec4(
        v1.x - ((float)(v2.x) / (float)(1 << 12))
        , v1.y - ((float)(v2.y) / (float)(1 << 12))
        , v1.z - ((float)(v2.z) / (float)(1 << 12))
        , v1.w - ((float)(v2.w) / (float)(1 << 12))
        );
}




inline CIwFVec4 operator += (CIwFVec4& v1, const CIwVec4& v2)
{
    v1.x += ((float)(v2.x) / (float)(1 << 12));
    v1.y += ((float)(v2.y) / (float)(1 << 12));
    v1.z += ((float)(v2.z) / (float)(1 << 12));
    v1.w += ((float)(v2.w) / (float)(1 << 12));
    return v1;
}




inline CIwFVec4 operator -= (CIwFVec4& v1, const CIwVec4& v2)
{
    v1.x -= ((float)(v2.x) / (float)(1 << 12));
    v1.y -= ((float)(v2.y) / (float)(1 << 12));
    v1.z -= ((float)(v2.z) / (float)(1 << 12));
    v1.w -= ((float)(v2.w) / (float)(1 << 12));
    return v1;
}




inline float operator * (const CIwFVec4& v1, const CIwVec4& v2)
{
    return v1 * CIwFVec4(v2);
}
# 760 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec4.h" 2

inline CIwVec4::CIwVec4(const CIwFVec4& v)
{
    x = IW_FIXED_FROM_FLOAT(v.x);
    y = IW_FIXED_FROM_FLOAT(v.y);
    z = IW_FIXED_FROM_FLOAT(v.z);
    w = IW_FIXED_FROM_FLOAT(v.w);
}




inline CIwVec4 CIwVec4::operator = (const CIwFVec4& v)
{
    x = IW_FIXED_FROM_FLOAT(v.x);
    y = IW_FIXED_FROM_FLOAT(v.y);
    z = IW_FIXED_FROM_FLOAT(v.z);
    w = IW_FIXED_FROM_FLOAT(v.w);
    return *this;
}




inline bool operator == (const CIwVec4& v1, const CIwFVec4& v2)
{
    return (
        ((float)(v1.x) / (float)(1 << 12)) == v2.x &&
        ((float)(v1.y) / (float)(1 << 12)) == v2.y &&
        ((float)(v1.z) / (float)(1 << 12)) == v2.z &&
        ((float)(v1.w) / (float)(1 << 12)) == v2.w &&
        true);
}




inline CIwFVec4 operator + (const CIwVec4& v1, const CIwFVec4& v2)
{
    return CIwFVec4(
        ((float)(v1.x) / (float)(1 << 12)) + v2.x
        , ((float)(v1.y) / (float)(1 << 12)) + v2.y
        , ((float)(v1.z) / (float)(1 << 12)) + v2.z
        , ((float)(v1.w) / (float)(1 << 12)) + v2.w
        );
}




inline CIwFVec4 operator - (const CIwVec4& v1, const CIwFVec4& v2)
{
    return CIwFVec4(
        ((float)(v1.x) / (float)(1 << 12)) - v2.x
        , ((float)(v1.y) / (float)(1 << 12)) - v2.y
        , ((float)(v1.z) / (float)(1 << 12)) - v2.z
        , ((float)(v1.w) / (float)(1 << 12)) - v2.w
        );
}




inline CIwVec4 operator += (CIwVec4& v1, const CIwFVec4& v2)
{
    v1.x += IW_FIXED_FROM_FLOAT(v2.x);
    v1.y += IW_FIXED_FROM_FLOAT(v2.y);
    v1.z += IW_FIXED_FROM_FLOAT(v2.z);
    v1.w += IW_FIXED_FROM_FLOAT(v2.w);
    return v1;
}




inline CIwVec4 operator -= (CIwVec4& v1, const CIwFVec4& v2)
{
    v1.x -= IW_FIXED_FROM_FLOAT(v2.x);
    v1.y -= IW_FIXED_FROM_FLOAT(v2.y);
    v1.z -= IW_FIXED_FROM_FLOAT(v2.z);
    v1.w -= IW_FIXED_FROM_FLOAT(v2.w);
    return v1;
}




inline float operator * (const CIwVec4& v1, const CIwFVec4& v2)
{
    return CIwFVec4(v1) * v2;
}
# 671 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h" 2

inline CIwSVec4::CIwSVec4(const CIwVec4& v)
{
    x = IW_SFIXED_FROM_FIXED(v.x);
    y = IW_SFIXED_FROM_FIXED(v.y);
    z = IW_SFIXED_FROM_FIXED(v.z);
    w = IW_SFIXED_FROM_FIXED(v.w);
}

inline CIwSVec4 CIwSVec4::operator = (const CIwVec4& v)
{
    x = IW_SFIXED_FROM_FIXED(v.x);
    y = IW_SFIXED_FROM_FIXED(v.y);
    z = IW_SFIXED_FROM_FIXED(v.z);
    w = IW_SFIXED_FROM_FIXED(v.w);
    return *this;
}


inline bool operator == (const CIwSVec4& v1, const CIwVec4& v2)
{
    return (
        (int32)v1.x == v2.x &&
        (int32)v1.y == v2.y &&
        (int32)v1.z == v2.z &&
        (int32)v1.w == v2.w &&
        true);
}


inline CIwVec4 operator + (const CIwSVec4& v1, const CIwVec4& v2)
{
    return CIwVec4(
        (int32)v1.x + v2.x
        , (int32)v1.y + v2.y
        , (int32)v1.z + v2.z
        , (int32)v1.w + v2.w
        );
}


inline CIwVec4 operator - (const CIwSVec4& v1, const CIwVec4& v2)
{
    return CIwVec4(
        (int32)v1.x - v2.x
        , (int32)v1.y - v2.y
        , (int32)v1.z - v2.z
        , (int32)v1.w - v2.w
        );
}




inline CIwSVec4 operator += (CIwSVec4& v1, const CIwVec4& v2)
{
    v1.x += IW_SFIXED_FROM_FIXED(v2.x);
    v1.y += IW_SFIXED_FROM_FIXED(v2.y);
    v1.z += IW_SFIXED_FROM_FIXED(v2.z);
    v1.w += IW_SFIXED_FROM_FIXED(v2.w);
    return v1;
}




inline CIwSVec4 operator -= (CIwSVec4& v1, const CIwVec4& v2)
{
    v1.x -= IW_SFIXED_FROM_FIXED(v2.x);
    v1.y -= IW_SFIXED_FROM_FIXED(v2.y);
    v1.z -= IW_SFIXED_FROM_FIXED(v2.z);
    v1.w -= IW_SFIXED_FROM_FIXED(v2.w);
    return v1;
}




inline int32 operator * (const CIwSVec4& v1, const CIwVec4& v2)
{
    return CIwVec4(v1) * v2;
}
# 761 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSVec4.h"
inline CIwSVec4::CIwSVec4(const CIwFVec4& v)
{
    x = IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v.x));
    y = IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v.y));
    z = IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v.z));
    w = IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v.w));
}




inline CIwSVec4 CIwSVec4::operator = (const CIwFVec4& v)
{
    x = IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v.x));
    y = IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v.y));
    z = IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v.z));
    w = IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v.w));
    return *this;
}




inline bool operator == (const CIwSVec4& v1, const CIwFVec4& v2)
{
    return (
        ((float)(v1.x) / (float)(1 << 12)) == v2.x &&
        ((float)(v1.y) / (float)(1 << 12)) == v2.y &&
        ((float)(v1.z) / (float)(1 << 12)) == v2.z &&
        ((float)(v1.w) / (float)(1 << 12)) == v2.w &&
        true);
}




inline CIwFVec4 operator + (const CIwSVec4& v1, const CIwFVec4& v2)
{
    return CIwFVec4(
        ((float)(v1.x) / (float)(1 << 12)) + v2.x
        , ((float)(v1.y) / (float)(1 << 12)) + v2.y
        , ((float)(v1.z) / (float)(1 << 12)) + v2.z
        , ((float)(v1.w) / (float)(1 << 12)) + v2.w
        );
}




inline CIwFVec4 operator - (const CIwSVec4& v1, const CIwFVec4& v2)
{
    return CIwFVec4(
        ((float)(v1.x) / (float)(1 << 12)) - v2.x
        , ((float)(v1.y) / (float)(1 << 12)) - v2.y
        , ((float)(v1.z) / (float)(1 << 12)) - v2.z
        , ((float)(v1.w) / (float)(1 << 12)) - v2.w
        );
}




inline CIwSVec4 operator += (CIwSVec4& v1, const CIwFVec4& v2)
{
    v1.x += IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v2.x));
    v1.y += IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v2.y));
    v1.z += IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v2.z));
    v1.w += IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v2.w));
    return v1;
}




inline CIwSVec4 operator -= (CIwSVec4& v1, const CIwFVec4& v2)
{
    v1.x -= IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v2.x));
    v1.y -= IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v2.y));
    v1.z -= IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v2.z));
    v1.w -= IW_SFIXED_FROM_FIXED(IW_FIXED_FROM_FLOAT(v2.w));
    return v1;
}




inline float operator * (const CIwSVec4& v1, const CIwFVec4& v2)
{
    return CIwFVec4(v1) * v2;
}
# 36 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomVec.h" 2
# 23 "c:/marmalade/6.2/modules/iwgeom/h/IwGeom.h" 2
# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h" 1
       
# 35 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h"
class CIwFMat;
# 63 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h"
class CIwMat
{
public:



    iwfixed m[3][3];



    CIwVec3 t;




    static CIwMat g_Identity;




    CIwMat() {};





    explicit CIwMat(iwfixed f)
    {
        m[0][0] = m[1][1] = m[2][2] = f;
        m[0][1] = m[0][2] = m[1][0] = m[1][2] = m[2][0] = m[2][1] = 0;
        t.x = t.y = t.z = 0;
    }






    explicit CIwMat(const CIwFMat & M);





    inline CIwFMat ConvertToCIwFMat();
# 116 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h"
    CIwMat(CIwMat const & R, CIwVec3 const & T)
    {
        m[0][0] = R.m[0][0];
        m[1][0] = R.m[1][0];
        m[2][0] = R.m[2][0];
        m[0][1] = R.m[0][1];
        m[1][1] = R.m[1][1];
        m[2][1] = R.m[2][1];
        m[0][2] = R.m[0][2];
        m[1][2] = R.m[1][2];
        m[2][2] = R.m[2][2];
        t = T;
    }







    CIwMat(CIwMat const & R, CIwSVec3 const & T)
    {
        m[0][0] = R.m[0][0];
        m[1][0] = R.m[1][0];
        m[2][0] = R.m[2][0];
        m[0][1] = R.m[0][1];
        m[1][1] = R.m[1][1];
        m[2][1] = R.m[2][1];
        m[0][2] = R.m[0][2];
        m[1][2] = R.m[1][2];
        m[2][2] = R.m[2][2];
        t = T;
    }






    void Serialise();





    void Normalise()
    {
        CIwVec3* pVecX = (CIwVec3*)&m[0][0];
        CIwVec3* pVecY = (CIwVec3*)&m[1][0];
        CIwVec3* pVecZ = (CIwVec3*)&m[2][0];

        pVecZ->Normalise();




        pVecX->Normalise();

        *pVecY = *pVecZ ^ *pVecX;
# 183 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h"
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(pVecY->GetLengthSquared() > 0x10)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Matrix cannot be normalised. This usually occurs when row vectors X and Z are linearly dependent."); switch (IwDebugAssertShow("pVecY->GetLengthSquared() > 0x10", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 183, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);



        pVecY->Normalise();

        *pVecX = *pVecY ^ *pVecZ;
    }




    void Transpose();





    CIwVec3 const & GetTrans() const
    {
        return t;
    }






    CIwMat & SetTrans(CIwVec3 const & v)
    {
        t = v;
        return *this;
    }






    CIwMat & SetTrans(CIwSVec3 const & v)
    {
        t = v;
        return *this;
    }






    CIwMat & operator += (CIwVec3 const & V)
    {
        t += V;
        return *this;
    }






    CIwMat & operator += (CIwSVec3 const & V)
    {
        t += V;
        return *this;
    }






    CIwMat operator + (CIwVec3 const & V) const
    {
        return CIwMat(*this, t+V);
    }






    CIwMat operator + (CIwSVec3 const & V) const
    {
        return CIwMat(*this, t+V);
    }







    CIwMat& operator <<= (int32 s)
    {
        m[0][0] <<= s; m[0][1] <<= s; m[0][2] <<= s;
        m[1][0] <<= s; m[1][1] <<= s; m[1][2] <<= s;
        m[2][0] <<= s; m[2][1] <<= s; m[2][2] <<= s;
        t.x <<= s, t.y <<= s, t.z <<= s;
        return *this;
    }






    CIwMat& operator >>= (int32 s)
    {
        m[0][0] >>= s; m[0][1] >>= s; m[0][2] >>= s;
        m[1][0] >>= s; m[1][1] >>= s; m[1][2] >>= s;
        m[2][0] >>= s; m[2][1] >>= s; m[2][2] >>= s;
        t.x >>= s, t.y >>= s, t.z >>= s;
        return *this;
    }





    CIwVec3 ColumnX() const
    {
        return CIwVec3(m[0][0], m[1][0], m[2][0]);
    }




    CIwVec3 ColumnY() const
    {
        return CIwVec3(m[0][1], m[1][1], m[2][1]);
    }




    CIwVec3 ColumnZ() const
    {
        return CIwVec3(m[0][2], m[1][2], m[2][2]);
    }







    CIwVec3 RowX() const
    {
        return CIwVec3(m[0][0], m[0][1], m[0][2]);
    }







    CIwVec3 RowY() const
    {
        return CIwVec3(m[1][0], m[1][1], m[1][2]);
    }







    CIwVec3 RowZ() const
    {
        return CIwVec3(m[2][0], m[2][1], m[2][2]);
    }







    CIwVec3 RotateVec(CIwVec3 const &V) const
    {
        return CIwVec3(
        IW_FIXED_MUL3(m[0][0], m[1][0], m[2][0], V.x, V.y, V.z),
        IW_FIXED_MUL3(m[0][1], m[1][1], m[2][1], V.x, V.y, V.z),
        IW_FIXED_MUL3(m[0][2], m[1][2], m[2][2], V.x, V.y, V.z)
        );
    }







    CIwSVec3 RotateVec(CIwSVec3 const &V) const
    {
        return CIwSVec3(
        IW_SFIXED_FROM_FIXED(IW_FIXED_MUL3(m[0][0], m[1][0], m[2][0], V.x, V.y, V.z)),
        IW_SFIXED_FROM_FIXED(IW_FIXED_MUL3(m[0][1], m[1][1], m[2][1], V.x, V.y, V.z)),
        IW_SFIXED_FROM_FIXED(IW_FIXED_MUL3(m[0][2], m[1][2], m[2][2], V.x, V.y, V.z))
        );
    }







    CIwVec3 RotateVecSafe(CIwVec3 const &V) const
    {
        return CIwVec3(
        IW_FIXED_MUL3_SAFE(m[0][0], m[1][0], m[2][0], V.x, V.y, V.z),
        IW_FIXED_MUL3_SAFE(m[0][1], m[1][1], m[2][1], V.x, V.y, V.z),
        IW_FIXED_MUL3_SAFE(m[0][2], m[1][2], m[2][2], V.x, V.y, V.z)
        );
    }







    CIwVec3 TransformVec(CIwVec3 const &V) const
    {
        return CIwVec3(
        IW_FIXED_MUL3(m[0][0], m[1][0], m[2][0], V.x, V.y, V.z) + t.x,
        IW_FIXED_MUL3(m[0][1], m[1][1], m[2][1], V.x, V.y, V.z) + t.y,
        IW_FIXED_MUL3(m[0][2], m[1][2], m[2][2], V.x, V.y, V.z) + t.z
        );
    }
# 424 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h"
    CIwVec3 TransformVec(CIwSVec3 const &V) const
    {
        return CIwVec3(
        IW_FIXED_MUL3(m[0][0], m[1][0], m[2][0], V.x, V.y, V.z) + t.x,
        IW_FIXED_MUL3(m[0][1], m[1][1], m[2][1], V.x, V.y, V.z) + t.y,
        IW_FIXED_MUL3(m[0][2], m[1][2], m[2][2], V.x, V.y, V.z) + t.z
        );
    }
# 441 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h"
    CIwVec3 TransformVecShift(CIwSVec3 const &V, int32 shift) const
    {
        int32 lDotShift = 12 - shift;
        return CIwVec3(
        IW_MUL_3_SHIFT(m[0][0] >> shift, m[1][0] >> shift, m[2][0] >> shift, V.x, V.y, V.z, lDotShift) + t.x,
        IW_MUL_3_SHIFT(m[0][1] >> shift, m[1][1] >> shift, m[2][1] >> shift, V.x, V.y, V.z, lDotShift) + t.y,
        IW_MUL_3_SHIFT(m[0][2] >> shift, m[1][2] >> shift, m[2][2] >> shift, V.x, V.y, V.z, lDotShift) + t.z
        );
    }
# 459 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h"
    CIwVec3 TransformVecSafe(CIwVec3 const &V) const
    {
        return CIwVec3(
        IW_FIXED_MUL3_SAFE(m[0][0], m[1][0], m[2][0], V.x, V.y, V.z) + t.x,
        IW_FIXED_MUL3_SAFE(m[0][1], m[1][1], m[2][1], V.x, V.y, V.z) + t.y,
        IW_FIXED_MUL3_SAFE(m[0][2], m[1][2], m[2][2], V.x, V.y, V.z) + t.z
        );
    }






    CIwVec3 TransformVecSafe(CIwSVec3 const &V) const
    {
        return CIwVec3(
        IW_FIXED_MUL3_SAFE(m[0][0], m[1][0], m[2][0], V.x, V.y, V.z) + t.x,
        IW_FIXED_MUL3_SAFE(m[0][1], m[1][1], m[2][1], V.x, V.y, V.z) + t.y,
        IW_FIXED_MUL3_SAFE(m[0][2], m[1][2], m[2][2], V.x, V.y, V.z) + t.z
        );
    }







    CIwVec3 TransposeRotateVec(CIwVec3 const &V) const
    {
        return CIwVec3(
        IW_FIXED_MUL3(m[0][0], m[0][1], m[0][2], V.x, V.y, V.z),
        IW_FIXED_MUL3(m[1][0], m[1][1], m[1][2], V.x, V.y, V.z),
        IW_FIXED_MUL3(m[2][0], m[2][1], m[2][2], V.x, V.y, V.z)
        );
    }







    CIwSVec3 TransposeRotateVec(CIwSVec3 const &V) const
    {
        return CIwSVec3(
        IW_SFIXED_FROM_FIXED(IW_FIXED_MUL3(m[0][0], m[0][1], m[0][2], V.x, V.y, V.z)),
        IW_SFIXED_FROM_FIXED(IW_FIXED_MUL3(m[1][0], m[1][1], m[1][2], V.x, V.y, V.z)),
        IW_SFIXED_FROM_FIXED(IW_FIXED_MUL3(m[2][0], m[2][1], m[2][2], V.x, V.y, V.z))
        );
    }







    CIwVec3 TransposeRotateVecSafe(CIwVec3 const &V) const
    {
        return CIwVec3(
        IW_FIXED_MUL3_SAFE(m[0][0], m[0][1], m[0][2], V.x, V.y, V.z),
        IW_FIXED_MUL3_SAFE(m[1][0], m[1][1], m[1][2], V.x, V.y, V.z),
        IW_FIXED_MUL3_SAFE(m[2][0], m[2][1], m[2][2], V.x, V.y, V.z)
        );
    }
# 534 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h"
    CIwVec3 TransposeTransformVec(CIwVec3 const &V) const
    {
        return CIwVec3(
            IW_FIXED_MUL3(m[0][0], m[0][1], m[0][2], V.x-t.x, V.y-t.y, V.z-t.z),
            IW_FIXED_MUL3(m[1][0], m[1][1], m[1][2], V.x-t.x, V.y-t.y, V.z-t.z),
            IW_FIXED_MUL3(m[2][0], m[2][1], m[2][2], V.x-t.x, V.y-t.y, V.z-t.z)
            );
    }
# 551 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h"
    iwfixed TransformVecX(CIwVec3 const &V) const { int64 test = (((int64)(IW_FIXED_MUL3(m[0][0],m[1][0],m[2][0],V.x,V.y,V.z))) + ((int64)(t.x))); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Add overflow."); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 551, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0); return (iwfixed)test;; }
    iwfixed TransformVecY(CIwVec3 const &V) const { int64 test = (((int64)(IW_FIXED_MUL3(m[0][1],m[1][1],m[2][1],V.x,V.y,V.z))) + ((int64)(t.y))); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Add overflow."); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 552, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0); return (iwfixed)test;; }
    iwfixed TransformVecZ(CIwVec3 const &V) const { int64 test = (((int64)(IW_FIXED_MUL3(m[0][2],m[1][2],m[2][2],V.x,V.y,V.z))) + ((int64)(t.z))); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Add overflow."); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 553, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0); return (iwfixed)test;; }
    iwfixed TransformVecZ(CIwSVec3 const &V) const { int64 test = (((int64)(IW_FIXED_MUL3(m[0][2],m[1][2],m[2][2],V.x,V.y,V.z))) + ((int64)(t.z))); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Add overflow."); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 554, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0); return (iwfixed)test;; }
    iwfixed TransformVecX(iwsfixed x, iwsfixed y, iwsfixed z) const { int64 test = (((int64)(IW_FIXED_MUL3(m[0][0],m[1][0],m[2][0],x,y,z))) + ((int64)(t.x))); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Add overflow."); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 555, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0); return (iwfixed)test;; }
    iwfixed TransformVecY(iwsfixed x, iwsfixed y, iwsfixed z) const { int64 test = (((int64)(IW_FIXED_MUL3(m[0][1],m[1][1],m[2][1],x,y,z))) + ((int64)(t.y))); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Add overflow."); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 556, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0); return (iwfixed)test;; }
    iwfixed TransformVecZ(iwsfixed x, iwsfixed y, iwsfixed z) const { int64 test = (((int64)(IW_FIXED_MUL3(m[0][2],m[1][2],m[2][2],x,y,z))) + ((int64)(t.z))); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Add overflow."); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 557, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0); return (iwfixed)test;; }
    iwfixed TransformVecX(iwfixed x, iwfixed y, iwfixed z) const { int64 test = (((int64)(IW_FIXED_MUL3(m[0][0],m[1][0],m[2][0],x,y,z))) + ((int64)(t.x))); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Add overflow."); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 558, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0); return (iwfixed)test;; }
    iwfixed TransformVecY(iwfixed x, iwfixed y, iwfixed z) const { int64 test = (((int64)(IW_FIXED_MUL3(m[0][1],m[1][1],m[2][1],x,y,z))) + ((int64)(t.y))); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Add overflow."); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 559, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0); return (iwfixed)test;; }
    iwfixed TransformVecZ(iwfixed x, iwfixed y, iwfixed z) const { int64 test = (((int64)(IW_FIXED_MUL3(m[0][2],m[1][2],m[2][2],x,y,z))) + ((int64)(t.z))); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Add overflow."); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 560, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0); return (iwfixed)test;; }







    inline iwfixed RotateVecX(const CIwVec3& V) const
    {
            return IW_FIXED_MUL(m[0][0], V.x) + IW_FIXED_MUL(m[1][0], V.y) + IW_FIXED_MUL(m[2][0], V.z);
    }





    inline iwfixed RotateVecY(const CIwVec3& V) const
    {
            return IW_FIXED_MUL(m[0][1], V.x) + IW_FIXED_MUL(m[1][1], V.y) + IW_FIXED_MUL(m[2][1], V.z);
    }





    inline iwfixed RotateVecZ(const CIwVec3& V) const
    {
            return IW_FIXED_MUL(m[0][2], V.x) + IW_FIXED_MUL(m[1][2], V.y) + IW_FIXED_MUL(m[2][2], V.z);
    }







    inline iwsfixed RotateVecX(const CIwSVec3& V) const
    {
            return IW_SFIXED_FROM_FIXED(IW_FIXED_MUL(m[0][0], V.x) + IW_FIXED_MUL(m[1][0], V.y) + IW_FIXED_MUL(m[2][0], V.z));
    }





    inline iwsfixed RotateVecY(const CIwSVec3& V) const
    {
            return IW_SFIXED_FROM_FIXED(IW_FIXED_MUL(m[0][1], V.x) + IW_FIXED_MUL(m[1][1], V.y) + IW_FIXED_MUL(m[2][1], V.z));
    }





    inline iwsfixed RotateVecZ(const CIwSVec3& V) const
    {
            return IW_SFIXED_FROM_FIXED(IW_FIXED_MUL(m[0][2], V.x) + IW_FIXED_MUL(m[1][2], V.y) + IW_FIXED_MUL(m[2][2], V.z));
    }





    CIwMat GetTranspose() const
    {
        CIwMat N;
        N.m[0][0] = m[0][0];
        N.m[1][0] = m[0][1];
        N.m[2][0] = m[0][2];
        N.m[0][1] = m[1][0];
        N.m[1][1] = m[1][1];
        N.m[2][1] = m[1][2];
        N.m[0][2] = m[2][0];
        N.m[1][2] = m[2][1];
        N.m[2][2] = m[2][2];


        N.t = CIwVec3(0, 0, 0);
        return N;
    }
# 650 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h"
    inline void SetRotX(iwangle r = 0, bool resetTrans = true, bool setZeros = true)
    {
        if (resetTrans) t.x = t.y = t.z = 0;
        if (setZeros) m[0][1] = m[0][2] = m[1][0] = m[2][0] = 0;
        m[0][0] = (1 << 12);
        m[1][1] = m[2][2] = IwGeomCos(r);
        m[1][2] = -(m[2][1] = IwGeomSin(r));
    }







    inline void SetRotY(iwangle r = 0, bool resetTrans = true, bool setZeros = true)
    {
        if (resetTrans) t.x = t.y = t.z = 0;
        if (setZeros) m[0][1] = m[1][2] = m[1][0] = m[2][1] = 0;
        m[1][1] = (1 << 12);
        m[0][0] = m[2][2] = IwGeomCos(r);
        m[2][0] = -(m[0][2] = IwGeomSin(r));
    }







    inline void SetRotZ(iwangle r = 0, bool resetTrans = true, bool setZeros = true)
    {
        if (resetTrans) t.x = t.y = t.z = 0;
        if (setZeros) m[0][2] = m[1][2] = m[2][0] = m[2][1] = 0;
        m[2][2] = (1 << 12);
        m[0][0] = m[1][1] = IwGeomCos(r);
        m[0][1] = -(m[1][0] = IwGeomSin(r));
    }


    inline void PreRotateX(iwangle r)
    {
        CIwMat rx;
        rx.SetRotX(r, true, true);
        PreRotate(rx);
    }
    inline void PreRotateY(iwangle r)
    {
        CIwMat ry;
        ry.SetRotY(r, true, true);
        PreRotate(ry);
    }
    inline void PreRotateZ(iwangle r)
    {
        CIwMat rz;
        rz.SetRotZ(r, true, true);
        PreRotate(rz);
    }
    inline void PostRotateX(iwangle r)
    {
        CIwMat rx;
        rx.SetRotX(r, true, true);
        PostRotate(rx);
    }
    inline void PostRotateY(iwangle r)
    {
        CIwMat ry;
        ry.SetRotY(r, true, true);
        PostRotate(ry);
    }
    inline void PostRotateZ(iwangle r)
    {
        CIwMat rz;
        rz.SetRotZ(r, true, true);
        PostRotate(rz);
    }







    void SetAxisAngle(CIwVec3 axis, iwangle angle);






    void LookAt(const CIwVec3& from, const CIwVec3& to, const CIwVec3& up)
    {

        CIwVec3 vx, vy, vz;

        vz = (to - from).GetNormalised();
        vx = (up ^ vz);
        if (vx.IsZero())
            vx.x = (1 << 12);
        else
            vx.Normalise();
        vy = (vz ^ vx);
        m[0][0] = vx.x; m[0][1] = vx.y; m[0][2] = vx.z;
        m[1][0] = vy.x; m[1][1] = vy.y; m[1][2] = vy.z;
        m[2][0] = vz.x; m[2][1] = vz.y; m[2][2] = vz.z;
    }







    CIwMat operator * (CIwMat const & M) const
    {
        CIwMat N;
        N.m[0][0] = FindComponentFromBA(M,*this,0,0);
        N.m[0][1] = FindComponentFromBA(M,*this,0,1);
        N.m[0][2] = FindComponentFromBA(M,*this,0,2);

        N.m[1][0] = FindComponentFromBA(M,*this,1,0);
        N.m[1][1] = FindComponentFromBA(M,*this,1,1);
        N.m[1][2] = FindComponentFromBA(M,*this,1,2);

        N.m[2][0] = FindComponentFromBA(M,*this,2,0);
        N.m[2][1] = FindComponentFromBA(M,*this,2,1);
        N.m[2][2] = FindComponentFromBA(M,*this,2,2);

        N.t = M.TransformVec(t);

        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(N.TransformVec(CIwVec3::g_Zero) == M.TransformVec(TransformVec(CIwVec3::g_Zero)))) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwMat overflow: operator *"); switch (IwDebugAssertShow("N.TransformVec(CIwVec3::g_Zero) == M.TransformVec(TransformVec(CIwVec3::g_Zero))", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 781, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


        return N;
    }







    CIwMat & PreMult(CIwMat const & M)
    {
        return (*this = M * (*this));
    }




    CIwMat & PreMultiply(CIwMat const & M)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("This method is deprecated in favour of CIwMat::PreMult(M)."); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 802, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return PreMult(M);
    }







    CIwMat & PostMult(CIwMat const & M)
    {
        return (*this = (*this) * M);
    }




    CIwMat & PostMultiply(CIwMat const & M)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("This method is deprecated in favour of CIwMat::PostMult(M)."); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 822, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return PostMult(M);
    }







    CIwMat& operator *= (CIwMat const & M)
    {
        return PostMult(M);
    }







    CIwMat& PostRotate(CIwMat const& M)
    {
        CIwMat N;

        N.m[0][0] = FindComponentFromBA(M,*this,0,0);
        N.m[0][1] = FindComponentFromBA(M,*this,0,1);
        N.m[0][2] = FindComponentFromBA(M,*this,0,2);

        N.m[1][0] = FindComponentFromBA(M,*this,1,0);
        N.m[1][1] = FindComponentFromBA(M,*this,1,1);
        N.m[1][2] = FindComponentFromBA(M,*this,1,2);

        N.m[2][0] = FindComponentFromBA(M,*this,2,0);
        N.m[2][1] = FindComponentFromBA(M,*this,2,1);
        N.m[2][2] = FindComponentFromBA(M,*this,2,2);

        CopyRot(N);

        return *this;
    }






    CIwMat PreRotate(CIwMat const& M)
    {
        CIwMat t = M;
        t.t = this->t;
        return (*this = t.PostRotate(*this));
    }







    CIwMat& ScaleRot(iwfixed v)
    {
        for (int i=0; i<3; i++)
            for (int j=0; j<3; j++)
                m[i][j] = IW_FIXED_MUL(m[i][j],v);
        return *this;
    }






    CIwMat& ScaleTrans(iwfixed v)
    {
        t *= v;
        return *this;
    }





    CIwMat& Scale(iwfixed v)
    {
        ScaleRot(v);
        ScaleTrans(v);
        return *this;
    }






    CIwMat& operator *= (const iwfixed v)
    {
        Scale(v);
        return *this;
    }
# 933 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h"
    void InterpRot(CIwMat const & m0, CIwMat const & m1, iwfixed fraction);


    void InterpolateRot(CIwMat const & m0, CIwMat const & m1, iwfixed fraction)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("This method is deprecated in favour of CIwMat::InterpRot(m0, m1, fraction)."); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 938, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        InterpRot(m0, m1, fraction);
    }
# 952 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h"
    void InterpTrans(CIwMat const & m0, CIwMat const & m1, iwfixed fraction);


    void InterpolatePos(CIwMat const & m0, CIwMat const & m1, iwfixed fraction)
    {

        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("This method is deprecated in favour of CIwMat::InterpTrans(m0, m1, fraction)."); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 958, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        InterpTrans(m0, m1, fraction);
    }






    void CopyRot(const CIwMat& m0)
    {
        m[0][0] = m0.m[0][0];
        m[0][1] = m0.m[0][1];
        m[0][2] = m0.m[0][2];
        m[1][0] = m0.m[1][0];
        m[1][1] = m0.m[1][1];
        m[1][2] = m0.m[1][2];
        m[2][0] = m0.m[2][0];
        m[2][1] = m0.m[2][1];
        m[2][2] = m0.m[2][2];
    }





    void CopyTrans(const CIwMat& m0)
    {
        t = m0.t;
    }







    bool IsRotSame(CIwMat const& m0) const
    {
        return m[0][0] == m0.m[0][0] &&
        m[0][1] == m0.m[0][1] &&
        m[0][2] == m0.m[0][2] &&
        m[1][0] == m0.m[1][0] &&
        m[1][1] == m0.m[1][1] &&
        m[1][2] == m0.m[1][2] &&
        m[2][0] == m0.m[2][0] &&
        m[2][1] == m0.m[2][1] &&
        m[2][2] == m0.m[2][2];
    }






    bool IsTransSame(CIwMat const& m0) const
    {
        return (t == m0.t);
    }






    bool operator == (CIwMat const & m0) const
    {
        return IsRotSame(m0) && IsTransSame(m0);
    }







    bool operator != (CIwMat const & m0) const
    {
        return !IsRotSame(m0) || !IsTransSame(m0);
    }



    bool IsRotIdentity() const
    {
        return IsRotSame(g_Identity);
    }


    bool IsTransIdentity() const
    {
        return IsTransSame(g_Identity);
    }


    bool IsIdentity() const
    {
        return (*this)==g_Identity;
    }


    void SetIdentity()
    {
        *this = g_Identity;
    }


    bool IsRotZero() const
    {
        return m[0][0] == 0 &&
        m[0][1] == 0 &&
        m[0][2] == 0 &&
        m[1][0] == 0 &&
        m[1][1] == 0 &&
        m[1][2] == 0 &&
        m[2][0] == 0 &&
        m[2][1] == 0 &&
        m[2][2] == 0;
    }


    bool IsTransZero() const
    {
        return t.x == 0 &&
        t.y == 0 &&
        t.z == 0;
    }


    bool IsZero() const
    {
        return IsRotZero() && IsTransZero();
    }


    void SetZero();


    void Zero()
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("This method is deprecated in favour of CIwMat::SetZero()."); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 1098, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        SetZero();
    }
# 1121 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h"
private:


    static inline iwfixed FindComponentFromBA(const CIwMat& A, const CIwMat& B, const int i, const int j)
    {


        int64 testA = (int64)(B.m[i][0]) * A.m[0][j];
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(testA >> 63 == testA >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Matrix multiplication overflow"); switch (IwDebugAssertShow("testA >> 63 == testA >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 1129, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        int64 testB = (int64)(B.m[i][1]) * A.m[1][j];
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(testB >> 63 == testB >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Matrix multiplication overflow"); switch (IwDebugAssertShow("testB >> 63 == testB >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 1132, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        int64 testC = (int64)(B.m[i][2]) * A.m[2][j];
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(testC >> 63 == testC >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Matrix multiplication overflow"); switch (IwDebugAssertShow("testC >> 63 == testC >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 1135, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        int64 test = testA + testB;
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Matrix multiplication overflow"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 1138, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        test += testC;
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Matrix multiplication overflow"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h", 1141, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        return (B.m[i][0]*A.m[0][j] + B.m[i][1]*A.m[1][j] + B.m[i][2]*A.m[2][j]) >> 12;
    }



};
# 1157 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h"
# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat.h" 1
       
# 35 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat.h"
class CIwMat;
# 63 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat.h"
class CIwFMat
{
public:



    float m[3][3];



    CIwFVec3 t;




    static CIwFMat g_Identity;




    CIwFMat() {};





    explicit CIwFMat(float f)
    {
        m[0][0] = m[1][1] = m[2][2] = f;
        m[0][1] = m[0][2] = m[1][0] = m[1][2] = m[2][0] = m[2][1] = 0;
        t.x = t.y = t.z = 0;
    }






    explicit CIwFMat(const CIwMat & M);





    inline CIwMat ConvertToCIwMat();
# 116 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat.h"
    CIwFMat(CIwFMat const & R, CIwFVec3 const & T)
    {
        m[0][0] = R.m[0][0];
        m[1][0] = R.m[1][0];
        m[2][0] = R.m[2][0];
        m[0][1] = R.m[0][1];
        m[1][1] = R.m[1][1];
        m[2][1] = R.m[2][1];
        m[0][2] = R.m[0][2];
        m[1][2] = R.m[1][2];
        m[2][2] = R.m[2][2];
        t = T;
    }







    void Serialise();





    void Normalise()
    {
        CIwFVec3* pVecX = (CIwFVec3*)&m[0][0];
        CIwFVec3* pVecY = (CIwFVec3*)&m[1][0];
        CIwFVec3* pVecZ = (CIwFVec3*)&m[2][0];

        pVecZ->Normalise();


        *pVecY = *pVecZ ^ *pVecX;
# 160 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat.h"
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(pVecY->GetLengthSquared() > ((float)(0x10) / (float)(1 << 12)))) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Matrix cannot be normalised. This usually occurs when row vectors X and Z are linearly dependent."); switch (IwDebugAssertShow("pVecY->GetLengthSquared() > ((float)(0x10) / (float)(1 << 12))", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat.h", 160, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);



        pVecY->Normalise();

        *pVecX = *pVecY ^ *pVecZ;
    }




    void Transpose();





    CIwFVec3 const & GetTrans() const
    {
        return t;
    }






    CIwFMat & SetTrans(CIwFVec3 const & v)
    {
        t = v;
        return *this;
    }







    CIwFMat & operator += (CIwFVec3 const & V)
    {
        t += V;
        return *this;
    }







    CIwFMat operator + (CIwFVec3 const & V) const
    {
        return CIwFMat(*this, t+V);
    }
# 225 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat.h"
    CIwFVec3 ColumnX() const
    {
        return CIwFVec3(m[0][0], m[1][0], m[2][0]);
    }




    CIwFVec3 ColumnY() const
    {
        return CIwFVec3(m[0][1], m[1][1], m[2][1]);
    }




    CIwFVec3 ColumnZ() const
    {
        return CIwFVec3(m[0][2], m[1][2], m[2][2]);
    }







    CIwFVec3 RowX() const
    {
        return CIwFVec3(m[0][0], m[0][1], m[0][2]);
    }







    CIwFVec3 RowY() const
    {
        return CIwFVec3(m[1][0], m[1][1], m[1][2]);
    }







    CIwFVec3 RowZ() const
    {
        return CIwFVec3(m[2][0], m[2][1], m[2][2]);
    }






    CIwFVec3 RotateVec(CIwFVec3 const &V) const
    {
        return CIwFVec3(
        ((m[0][0] * V.x) + (m[1][0] * V.y) + (m[2][0] * V.z)),
        ((m[0][1] * V.x) + (m[1][1] * V.y) + (m[2][1] * V.z)),
        ((m[0][2] * V.x) + (m[1][2] * V.y) + (m[2][2] * V.z))
        );
    }

    CIwSVec3 RotateVec(CIwSVec3 const &V) const
    {
        return CIwSVec3(
        IW_SFIXED_FROM_FLOAT_CAST((m[0][0] * V.x) + (m[1][0] * V.y) + (m[2][0] * V.z)),
        IW_SFIXED_FROM_FLOAT_CAST((m[0][1] * V.x) + (m[1][1] * V.y) + (m[2][1] * V.z)),
        IW_SFIXED_FROM_FLOAT_CAST((m[0][2] * V.x) + (m[1][2] * V.y) + (m[2][2] * V.z))
        );
    }







    CIwFVec3 TransformVec(CIwFVec3 const &V) const
    {
        return CIwFVec3(
        ((m[0][0] * V.x) + (m[1][0] * V.y) + (m[2][0] * V.z)) + t.x,
        ((m[0][1] * V.x) + (m[1][1] * V.y) + (m[2][1] * V.z)) + t.y,
        ((m[0][2] * V.x) + (m[1][2] * V.y) + (m[2][2] * V.z)) + t.z
        );
    }

    CIwVec3 TransformVec(CIwVec3 const &V) const
    {
        return CIwVec3(
        IW_FIXED_FROM_FLOAT_CAST((m[0][0] * V.x) + (m[1][0] * V.y) + (m[2][0] * V.z) + t.x),
        IW_FIXED_FROM_FLOAT_CAST((m[0][1] * V.x) + (m[1][1] * V.y) + (m[2][1] * V.z) + t.y),
        IW_FIXED_FROM_FLOAT_CAST((m[0][2] * V.x) + (m[1][2] * V.y) + (m[2][2] * V.z) + t.z)
        );
    }

    CIwVec3 TransformVec(CIwSVec3 const &V) const
    {
        return CIwVec3(
        IW_FIXED_FROM_FLOAT_CAST((m[0][0] * V.x) + (m[1][0] * V.y) + (m[2][0] * V.z) + t.x),
        IW_FIXED_FROM_FLOAT_CAST((m[0][1] * V.x) + (m[1][1] * V.y) + (m[2][1] * V.z) + t.y),
        IW_FIXED_FROM_FLOAT_CAST((m[0][2] * V.x) + (m[1][2] * V.y) + (m[2][2] * V.z) + t.z)
        );
    }






    CIwFVec3 TransposeRotateVec(CIwFVec3 const &V) const
    {
        return CIwFVec3(
        ((m[0][0] * V.x) + (m[0][1] * V.y) + (m[0][2] * V.z)),
        ((m[1][0] * V.x) + (m[1][1] * V.y) + (m[1][2] * V.z)),
        ((m[2][0] * V.x) + (m[2][1] * V.y) + (m[2][2] * V.z))
        );
    }

    CIwSVec3 TransposeRotateVec(CIwSVec3 const &V) const
    {
        return CIwSVec3(
        IW_SFIXED_FROM_FLOAT_CAST((m[0][0] * V.x) + (m[0][1] * V.y) + (m[0][2] * V.z)),
        IW_SFIXED_FROM_FLOAT_CAST((m[1][0] * V.x) + (m[1][1] * V.y) + (m[1][2] * V.z)),
        IW_SFIXED_FROM_FLOAT_CAST((m[2][0] * V.x) + (m[2][1] * V.y) + (m[2][2] * V.z))
        );
    }
# 366 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat.h"
    CIwFVec3 TransposeTransformVec(CIwFVec3 const &V) const
    {
        return CIwFVec3(
            ((m[0][0] * (V.x-t.x)) + (m[0][1] * (V.y-t.y)) + (m[0][2] * (V.z-t.z))),
            ((m[1][0] * (V.x-t.x)) + (m[1][1] * (V.y-t.y)) + (m[1][2] * (V.z-t.z))),
            ((m[2][0] * (V.x-t.x)) + (m[2][1] * (V.y-t.y)) + (m[2][2] * (V.z-t.z)))
            );
    }


    float TransformVecX(CIwFVec3 const &V) const { return (((m[0][0] * V.x) + (m[1][0] * V.y) + (m[2][0] * V.z))) + t.x; }
    float TransformVecY(CIwFVec3 const &V) const { return (((m[0][1] * V.x) + (m[1][1] * V.y) + (m[2][1] * V.z))) + t.y; }
    float TransformVecZ(CIwFVec3 const &V) const { return (((m[0][2] * V.x) + (m[1][2] * V.y) + (m[2][2] * V.z))) + t.z; }
    float TransformVecX(float x, float y, float z) const { return (((m[0][0] * x) + (m[1][0] * y) + (m[2][0] * z))) + t.x; }
    float TransformVecY(float x, float y, float z) const { return (((m[0][1] * x) + (m[1][1] * y) + (m[2][1] * z))) + t.y; }
    float TransformVecZ(float x, float y, float z) const { return (((m[0][2] * x) + (m[1][2] * y) + (m[2][2] * z))) + t.z; }







    inline float RotateVecX(const CIwFVec3& V) const
    {
            return m[0][0] * V.x + m[1][0] * V.y + m[2][0] * V.z;
    }





    inline float RotateVecY(const CIwFVec3& V) const
    {
            return m[0][1] * V.x + m[1][1] * V.y + m[2][1] * V.z;
    }





    inline float RotateVecZ(const CIwFVec3& V) const
    {
            return m[0][2] * V.x + m[1][2] * V.y + m[2][2] * V.z;
    }







    CIwFMat GetTranspose() const
    {
        CIwFMat N;
        N.m[0][0] = m[0][0];
        N.m[1][0] = m[0][1];
        N.m[2][0] = m[0][2];
        N.m[0][1] = m[1][0];
        N.m[1][1] = m[1][1];
        N.m[2][1] = m[1][2];
        N.m[0][2] = m[2][0];
        N.m[1][2] = m[2][1];
        N.m[2][2] = m[2][2];


        N.t = CIwFVec3(0, 0, 0);
        return N;
    }
# 444 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat.h"
    inline void SetRotX(float r = 0, bool resetTrans = true, bool setZeros = true)
    {
        if (resetTrans) t.x = t.y = t.z = 0;
        if (setZeros) m[0][1] = m[0][2] = m[1][0] = m[2][0] = 0;
        m[0][0] = 1.0f;
        m[1][1] = m[2][2] = (float)cos(r);
        m[1][2] = -(m[2][1] = (float)sin(r));
    }







    inline void SetRotY(float r = 0, bool resetTrans = true, bool setZeros = true)
    {
        if (resetTrans) t.x = t.y = t.z = 0;
        if (setZeros) m[0][1] = m[1][2] = m[1][0] = m[2][1] = 0;
        m[1][1] = 1.0f;
        m[0][0] = m[2][2] = (float)cos(r);
        m[2][0] = -(m[0][2] = (float)sin(r));
    }







    inline void SetRotZ(float r = 0, bool resetTrans = true, bool setZeros = true)
    {
        if (resetTrans) t.x = t.y = t.z = 0;
        if (setZeros) m[0][2] = m[1][2] = m[2][0] = m[2][1] = 0;
        m[2][2] = 1.0f;
        m[0][0] = m[1][1] = (float)cos(r);
        m[0][1] = -(m[1][0] = (float)sin(r));
    }


    inline void PreRotateX(float r)
    {
        CIwFMat rx;
        rx.SetRotX(r, true, true);
        PreRotate(rx);
    }
    inline void PreRotateY(float r)
    {
        CIwFMat ry;
        ry.SetRotY(r, true, true);
        PreRotate(ry);
    }
    inline void PreRotateZ(float r)
    {
        CIwFMat rz;
        rz.SetRotZ(r, true, true);
        PreRotate(rz);
    }
    inline void PostRotateX(float r)
    {
        CIwFMat rx;
        rx.SetRotX(r, true, true);
        PostRotate(rx);
    }
    inline void PostRotateY(float r)
    {
        CIwFMat ry;
        ry.SetRotY(r, true, true);
        PostRotate(ry);
    }
    inline void PostRotateZ(float r)
    {
        CIwFMat rz;
        rz.SetRotZ(r, true, true);
        PostRotate(rz);
    }







    void SetAxisAngle(CIwFVec3 axis, float angle);






    void LookAt(const CIwFVec3& from, const CIwFVec3& to, const CIwFVec3& up)
    {

        CIwFVec3 vx, vy, vz;

        vz = (to - from).GetNormalised();
        vx = (up ^ vz);
        if (vx.IsZero())
            vx.x = 1.0f;
        else
            vx.Normalise();
        vy = (vz ^ vx);
        m[0][0] = vx.x; m[0][1] = vx.y; m[0][2] = vx.z;
        m[1][0] = vy.x; m[1][1] = vy.y; m[1][2] = vy.z;
        m[2][0] = vz.x; m[2][1] = vz.y; m[2][2] = vz.z;
    }







    CIwFMat operator * (CIwFMat const & M) const
    {
        CIwFMat N;
        N.m[0][0] = FindComponentFromBA(M,*this,0,0);
        N.m[0][1] = FindComponentFromBA(M,*this,0,1);
        N.m[0][2] = FindComponentFromBA(M,*this,0,2);

        N.m[1][0] = FindComponentFromBA(M,*this,1,0);
        N.m[1][1] = FindComponentFromBA(M,*this,1,1);
        N.m[1][2] = FindComponentFromBA(M,*this,1,2);

        N.m[2][0] = FindComponentFromBA(M,*this,2,0);
        N.m[2][1] = FindComponentFromBA(M,*this,2,1);
        N.m[2][2] = FindComponentFromBA(M,*this,2,2);

        N.t = M.TransformVec(t);

        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(N.TransformVec(CIwFVec3::g_Zero) == M.TransformVec(TransformVec(CIwFVec3::g_Zero)))) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwFMat overflow: operator *"); switch (IwDebugAssertShow("N.TransformVec(CIwFVec3::g_Zero) == M.TransformVec(TransformVec(CIwFVec3::g_Zero))", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat.h", 575, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


        return N;
    }







    CIwFMat & PreMult(CIwFMat const & M)
    {
        return (*this = M * (*this));
    }




    CIwFMat & PreMultiply(CIwFMat const & M)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("This method is deprecated in favour of CIwFMat::PreMult(M)."); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat.h", 596, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return PreMult(M);
    }







    CIwFMat & PostMult(CIwFMat const & M)
    {
        return (*this = (*this) * M);
    }




    CIwFMat & PostMultiply(CIwFMat const & M)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("This method is deprecated in favour of CIwFMat::PostMult(M)."); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat.h", 616, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return PostMult(M);
    }







    CIwFMat& operator *= (CIwFMat const & M)
    {
        return PostMult(M);
    }







    CIwFMat& PostRotate(CIwFMat const& M)
    {
        CIwFMat N;

        N.m[0][0] = FindComponentFromBA(M,*this,0,0);
        N.m[0][1] = FindComponentFromBA(M,*this,0,1);
        N.m[0][2] = FindComponentFromBA(M,*this,0,2);

        N.m[1][0] = FindComponentFromBA(M,*this,1,0);
        N.m[1][1] = FindComponentFromBA(M,*this,1,1);
        N.m[1][2] = FindComponentFromBA(M,*this,1,2);

        N.m[2][0] = FindComponentFromBA(M,*this,2,0);
        N.m[2][1] = FindComponentFromBA(M,*this,2,1);
        N.m[2][2] = FindComponentFromBA(M,*this,2,2);

        CopyRot(N);

        return *this;
    }






    CIwFMat PreRotate(CIwFMat const& M)
    {
        CIwFMat t = M;
        t.t = this->t;
        return (*this = t.PostRotate(*this));
    }







    CIwFMat& ScaleRot(float v)
    {
        for (int i=0; i<3; i++)
            for (int j=0; j<3; j++)
                m[i][j] = (m[i][j]*v);
        return *this;
    }






    CIwFMat& ScaleTrans(float v)
    {
        t *= v;
        return *this;
    }





    CIwFMat& Scale(float v)
    {
        ScaleRot(v);
        ScaleTrans(v);
        return *this;
    }






    CIwFMat& operator *= (const float v)
    {
        Scale(v);
        return *this;
    }
# 727 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat.h"
    void InterpRot(CIwFMat const & m0, CIwFMat const & m1, float fraction);


    void InterpolateRot(CIwFMat const & m0, CIwFMat const & m1, float fraction)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("This method is deprecated in favour of CIwFMat::InterpRot(m0, m1, fraction)."); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat.h", 732, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        InterpRot(m0, m1, fraction);
    }
# 746 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat.h"
    void InterpTrans(CIwFMat const & m0, CIwFMat const & m1, float fraction);


    void InterpolatePos(CIwFMat const & m0, CIwFMat const & m1, float fraction)
    {

        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("This method is deprecated in favour of CIwFMat::InterpTrans(m0, m1, fraction)."); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat.h", 752, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        InterpTrans(m0, m1, fraction);
    }






    void CopyRot(const CIwFMat& m0)
    {
        m[0][0] = m0.m[0][0];
        m[0][1] = m0.m[0][1];
        m[0][2] = m0.m[0][2];
        m[1][0] = m0.m[1][0];
        m[1][1] = m0.m[1][1];
        m[1][2] = m0.m[1][2];
        m[2][0] = m0.m[2][0];
        m[2][1] = m0.m[2][1];
        m[2][2] = m0.m[2][2];
    }





    void CopyTrans(const CIwFMat& m0)
    {
        t = m0.t;
    }







    bool IsRotSame(CIwFMat const& m0) const
    {
        return m[0][0] == m0.m[0][0] &&
        m[0][1] == m0.m[0][1] &&
        m[0][2] == m0.m[0][2] &&
        m[1][0] == m0.m[1][0] &&
        m[1][1] == m0.m[1][1] &&
        m[1][2] == m0.m[1][2] &&
        m[2][0] == m0.m[2][0] &&
        m[2][1] == m0.m[2][1] &&
        m[2][2] == m0.m[2][2];
    }






    bool IsTransSame(CIwFMat const& m0) const
    {
        return (t == m0.t);
    }






    bool operator == (CIwFMat const & m0) const
    {
        return IsRotSame(m0) && IsTransSame(m0);
    }







    bool operator != (CIwFMat const & m0) const
    {
        return !IsRotSame(m0) || !IsTransSame(m0);
    }



    bool IsRotIdentity() const
    {
        return IsRotSame(g_Identity);
    }


    bool IsTransIdentity() const
    {
        return IsTransSame(g_Identity);
    }


    bool IsIdentity() const
    {
        return (*this)==g_Identity;
    }


    void SetIdentity()
    {
        *this = g_Identity;
    }


    bool IsRotZero() const
    {
        return m[0][0] == 0 &&
        m[0][1] == 0 &&
        m[0][2] == 0 &&
        m[1][0] == 0 &&
        m[1][1] == 0 &&
        m[1][2] == 0 &&
        m[2][0] == 0 &&
        m[2][1] == 0 &&
        m[2][2] == 0;
    }


    bool IsTransZero() const
    {
        return t.x == 0 &&
        t.y == 0 &&
        t.z == 0;
    }


    bool IsZero() const
    {
        return IsRotZero() && IsTransZero();
    }


    void SetZero();


    void Zero()
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("This method is deprecated in favour of CIwFMat::SetZero()."); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat.h", 892, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        SetZero();
    }
# 975 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat.h"
private:


    static inline float FindComponentFromBA(const CIwFMat& A, const CIwFMat& B, const int i, const int j)
    {
        return B.m[i][0]*A.m[0][j] + B.m[i][1]*A.m[1][j] + B.m[i][2]*A.m[2][j];

    }



};
# 998 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat.h"
inline CIwMat CIwFMat::ConvertToCIwMat()
    {
        return CIwMat(*this);
    }
# 1158 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat.h" 2


inline CIwFMat CIwMat::ConvertToCIwFMat()
    {
        return CIwFMat(*this);
    }
# 24 "c:/marmalade/6.2/modules/iwgeom/h/IwGeom.h" 2
# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h" 1
       
# 35 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h"
class CIwFMat2D;
# 63 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h"
class CIwMat2D
{
public:



    iwfixed m[2][2];



    CIwVec2 t;




    static CIwMat2D g_Identity;




    CIwMat2D() {};





    explicit CIwMat2D(iwfixed f)
    {
        m[0][0] = m[1][1] = f;
        m[0][1] = m[1][0] = 0;
        t.x = t.y = 0;
    }






    explicit CIwMat2D(const CIwFMat2D & M);





    inline CIwFMat2D ConvertToCIwFMat2D();
# 116 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h"
    CIwMat2D(CIwMat2D const & R, CIwVec2 const & T)
    {
        m[0][0] = R.m[0][0];
        m[1][0] = R.m[1][0];
        m[0][1] = R.m[0][1];
        m[1][1] = R.m[1][1];
        t = T;
    }







    CIwMat2D(CIwMat2D const & R, CIwSVec2 const & T)
    {
        m[0][0] = R.m[0][0];
        m[1][0] = R.m[1][0];
        m[0][1] = R.m[0][1];
        m[1][1] = R.m[1][1];
        t = T;
    }






    void Serialise();





    void Normalise()
    {
        CIwVec2* pVecX = (CIwVec2*)&m[0][0];
        CIwVec2* pVecY = (CIwVec2*)&m[1][0];

        pVecX->Normalise();

        *pVecY = CIwVec2(-pVecX->y, pVecX->x);
    }




    void Transpose();





    CIwVec2 const & GetTrans() const
    {
        return t;
    }






    CIwMat2D & SetTrans(CIwVec2 const & v)
    {
        t = v;
        return *this;
    }






    CIwMat2D & SetTrans(CIwSVec2 const & v)
    {
        t = v;
        return *this;
    }






    CIwMat2D & operator += (CIwVec2 const & V)
    {
        t += V;
        return *this;
    }






    CIwMat2D & operator += (CIwSVec2 const & V)
    {
        t += V;
        return *this;
    }






    CIwMat2D operator + (CIwVec2 const & V) const
    {
        return CIwMat2D(*this, t+V);
    }






    CIwMat2D operator + (CIwSVec2 const & V) const
    {
        return CIwMat2D(*this, t+V);
    }







    CIwMat2D& operator <<= (int32 s)
    {
        m[0][0] <<= s; m[0][1] <<= s;
        m[1][0] <<= s; m[1][1] <<= s;
        t.x <<= s, t.y <<= s;
        return *this;
    }






    CIwMat2D& operator >>= (int32 s)
    {
        m[0][0] >>= s; m[0][1] >>= s;
        m[1][0] >>= s; m[1][1] >>= s;
        t.x >>= s, t.y >>= s;
        return *this;
    }





    CIwVec2 ColumnX() const
    {
        return CIwVec2(m[0][0], m[1][0]);
    }




    CIwVec2 ColumnY() const
    {
        return CIwVec2(m[0][1], m[1][1]);
    }







    CIwVec2 RowX() const
    {
        return CIwVec2(m[0][0], m[0][1]);
    }







    CIwVec2 RowY() const
    {
        return CIwVec2(m[1][0], m[1][1]);
    }







    CIwVec2 RotateVec(CIwVec2 const &V) const
    {
        return CIwVec2(
        IW_FIXED_MUL2(m[0][0], m[1][0], V.x, V.y),
        IW_FIXED_MUL2(m[0][1], m[1][1], V.x, V.y)
        );
    }







    CIwSVec2 RotateVec(CIwSVec2 const &V) const
    {
        return CIwSVec2(
        IW_SFIXED_FROM_FIXED(IW_FIXED_MUL2(m[0][0], m[1][0], V.x, V.y)),
        IW_SFIXED_FROM_FIXED(IW_FIXED_MUL2(m[0][1], m[1][1], V.x, V.y))
        );
    }







    CIwVec2 RotateVecSafe(CIwVec2 const &V) const
    {
        return CIwVec2(
        IW_FIXED_MUL2_SAFE(m[0][0], m[1][0], V.x, V.y),
        IW_FIXED_MUL2_SAFE(m[0][1], m[1][1], V.x, V.y)
        );
    }







    CIwVec2 TransformVec(CIwVec2 const &V) const
    {
        return CIwVec2(
        IW_FIXED_MUL2(m[0][0], m[1][0], V.x, V.y) + t.x,
        IW_FIXED_MUL2(m[0][1], m[1][1], V.x, V.y) + t.y
        );
    }
# 368 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h"
    CIwVec2 TransformVec(CIwSVec2 const &V) const
    {
        return CIwVec2(
        IW_FIXED_MUL2(m[0][0], m[1][0], V.x, V.y) + t.x,
        IW_FIXED_MUL2(m[0][1], m[1][1], V.x, V.y) + t.y
        );
    }
# 384 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h"
    CIwVec2 TransformVecShift(CIwSVec2 const &V, int32 shift) const
    {
        int32 lDotShift = 12 - shift;
        return CIwVec2(
        IW_MUL_2_SHIFT(m[0][0] >> shift, m[1][0] >> shift, V.x, V.y, lDotShift) + t.x,
        IW_MUL_2_SHIFT(m[0][1] >> shift, m[1][1] >> shift, V.x, V.y, lDotShift) + t.y
        );
    }
# 401 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h"
    CIwVec2 TransformVecSafe(CIwVec2 const &V) const
    {
        return CIwVec2(
        IW_FIXED_MUL2_SAFE(m[0][0], m[1][0], V.x, V.y) + t.x,
        IW_FIXED_MUL2_SAFE(m[0][1], m[1][1], V.x, V.y) + t.y
        );
    }






    CIwVec2 TransformVecSafe(CIwSVec2 const &V) const
    {
        return CIwVec2(
        IW_FIXED_MUL2_SAFE(m[0][0], m[1][0], V.x, V.y) + t.x,
        IW_FIXED_MUL2_SAFE(m[0][1], m[1][1], V.x, V.y) + t.y
        );
    }







    CIwVec2 TransposeRotateVec(CIwVec2 const &V) const
    {
        return CIwVec2(
        IW_FIXED_MUL2(m[0][0], m[0][1], V.x, V.y),
        IW_FIXED_MUL2(m[1][0], m[1][1], V.x, V.y)
        );
    }







    CIwSVec2 TransposeRotateVec(CIwSVec2 const &V) const
    {
        return CIwSVec2(
        IW_SFIXED_FROM_FIXED(IW_FIXED_MUL2(m[0][0], m[0][1], V.x, V.y)),
        IW_SFIXED_FROM_FIXED(IW_FIXED_MUL2(m[1][0], m[1][1], V.x, V.y))
        );
    }







    CIwVec2 TransposeRotateVecSafe(CIwVec2 const &V) const
    {
        return CIwVec2(
        IW_FIXED_MUL2_SAFE(m[0][0], m[0][1], V.x, V.y),
        IW_FIXED_MUL2_SAFE(m[1][0], m[1][1], V.x, V.y)
        );
    }
# 471 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h"
    CIwVec2 TransposeTransformVec(CIwVec2 const &V) const
    {
        return CIwVec2(
            IW_FIXED_MUL2(m[0][0], m[0][1], V.x-t.x, V.y-t.y),
            IW_FIXED_MUL2(m[1][0], m[1][1], V.x-t.x, V.y-t.y)
            );
    }
# 487 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h"
    iwfixed TransformVecX(CIwVec2 const &V) const { int64 test = (((int64)(IW_FIXED_MUL2(m[0][0],m[1][0],V.x,V.y))) + ((int64)(t.x))); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Add overflow."); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h", 487, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0); return (iwfixed)test;; }
    iwfixed TransformVecY(CIwVec2 const &V) const { int64 test = (((int64)(IW_FIXED_MUL2(m[0][1],m[1][1],V.x,V.y))) + ((int64)(t.y))); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Add overflow."); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h", 488, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0); return (iwfixed)test;; }
    iwfixed TransformVecX(iwsfixed x, iwsfixed y) const { int64 test = (((int64)(IW_FIXED_MUL2(m[0][0],m[1][0],x,y))) + ((int64)(t.x))); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Add overflow."); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h", 489, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0); return (iwfixed)test;; }
    iwfixed TransformVecY(iwsfixed x, iwsfixed y) const { int64 test = (((int64)(IW_FIXED_MUL2(m[0][1],m[1][1],x,y))) + ((int64)(t.y))); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Add overflow."); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h", 490, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0); return (iwfixed)test;; }
    iwfixed TransformVecX(iwfixed x, iwfixed y) const { int64 test = (((int64)(IW_FIXED_MUL2(m[0][0],m[1][0],x,y))) + ((int64)(t.x))); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Add overflow."); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h", 491, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0); return (iwfixed)test;; }
    iwfixed TransformVecY(iwfixed x, iwfixed y) const { int64 test = (((int64)(IW_FIXED_MUL2(m[0][1],m[1][1],x,y))) + ((int64)(t.y))); do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Add overflow."); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h", 492, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0); return (iwfixed)test;; }







    inline iwfixed RotateVecX(const CIwVec2& V)
    {
            return IW_FIXED_MUL(m[0][0], V.x) + IW_FIXED_MUL(m[1][0], V.y);
    }





    inline iwfixed RotateVecY(const CIwVec2& V)
    {
            return IW_FIXED_MUL(m[0][1], V.x) + IW_FIXED_MUL(m[1][1], V.y);
    }






    inline iwsfixed RotateVecX(const CIwSVec2& V)
    {
            return IW_SFIXED_FROM_FIXED(IW_FIXED_MUL(m[0][0], V.x) + IW_FIXED_MUL(m[1][0], V.y));
    }





    inline iwsfixed RotateVecY(const CIwSVec2& V)
    {
            return IW_SFIXED_FROM_FIXED(IW_FIXED_MUL(m[0][1], V.x) + IW_FIXED_MUL(m[1][1], V.y));
    }





    CIwMat2D GetTranspose() const
    {
        CIwMat2D N;
        N.m[0][0] = m[0][0];
        N.m[1][0] = m[0][1];
        N.m[0][1] = m[1][0];
        N.m[1][1] = m[1][1];


        N.t = CIwVec2(0, 0);
        return N;
    }







    inline void SetRot(iwangle r = 0, bool resetTrans = true)
    {
        if (resetTrans) t.x = t.y = 0;
        m[0][0] = m[1][1] = IwGeomCos(-r);
        m[0][1] = -(m[1][0] = IwGeomSin(-r));
    }






    inline void SetRot(iwangle r, const CIwVec2& centre)
    {
        m[0][0] = m[1][1] = IwGeomCos(-r);
        m[0][1] = -(m[1][0] = IwGeomSin(-r));
        t = centre - RotateVec(centre);
    }


    inline void PreRotate(iwangle r)
    {
        CIwMat2D rz;
        rz.SetRot(r, true);
        PreRotate(rz);
    }
    inline void PostRotate(iwangle r)
    {
        CIwMat2D rz;
        rz.SetRot(r, true);
        PostRotate(rz);
    }







    CIwMat2D operator * (CIwMat2D const & M) const
    {
        CIwMat2D N;
        N.m[0][0] = FindComponentFromBA(M,*this,0,0);
        N.m[0][1] = FindComponentFromBA(M,*this,0,1);

        N.m[1][0] = FindComponentFromBA(M,*this,1,0);
        N.m[1][1] = FindComponentFromBA(M,*this,1,1);

        N.t = M.TransformVec(t);

        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(N.TransformVec(CIwVec2::g_Zero) == M.TransformVec(TransformVec(CIwVec2::g_Zero)))) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwMat2D overflow: operator *"); switch (IwDebugAssertShow("N.TransformVec(CIwVec2::g_Zero) == M.TransformVec(TransformVec(CIwVec2::g_Zero))", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h", 607, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


        return N;
    }







    CIwMat2D & PreMult(CIwMat2D const & M)
    {
        return (*this = M * (*this));
    }




    CIwMat2D & PreMultiply(CIwMat2D const & M)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("This method is deprecated in favour of CIwMat2D::PreMult(M)."); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h", 628, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return PreMult(M);
    }







    CIwMat2D & PostMult(CIwMat2D const & M)
    {
        return (*this = (*this) * M);
    }




    CIwMat2D & PostMultiply(CIwMat2D const & M)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("This method is deprecated in favour of CIwMat2D::PostMult(M)."); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h", 648, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return PostMult(M);
    }







    CIwMat2D& operator *= (CIwMat2D const & M)
    {
        return PostMult(M);
    }







    CIwMat2D& PostRotate(CIwMat2D const& M)
    {
        CIwMat2D N;

        N.m[0][0] = FindComponentFromBA(M,*this,0,0);
        N.m[0][1] = FindComponentFromBA(M,*this,0,1);

        N.m[1][0] = FindComponentFromBA(M,*this,1,0);
        N.m[1][1] = FindComponentFromBA(M,*this,1,1);

        CopyRot(N);

        return *this;
    }






    CIwMat2D PreRotate(CIwMat2D const& M)
    {
        CIwMat2D t = M;
        t.t = this->t;
        return (*this = t.PostRotate(*this));
    }







    CIwMat2D& ScaleRot(iwfixed v)
    {
        for (int i=0; i<2; i++)
            for (int j=0; j<2; j++)
                m[i][j] = IW_FIXED_MUL(m[i][j],v);
        return *this;
    }






    CIwMat2D& ScaleTrans(iwfixed v)
    {
        t *= v;
        return *this;
    }





    CIwMat2D& Scale(iwfixed v)
    {
        ScaleRot(v);
        ScaleTrans(v);
        return *this;
    }






    CIwMat2D& operator *= (const iwfixed v)
    {
        Scale(v);
        return *this;
    }
# 753 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h"
    void InterpRot(CIwMat2D const & m0, CIwMat2D const & m1, iwfixed fraction);


    void InterpolateRot(CIwMat2D const & m0, CIwMat2D const & m1, iwfixed fraction)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("This method is deprecated in favour of CIwMat2D::InterpRot(m0, m1, fraction)."); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h", 758, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        InterpRot(m0, m1, fraction);
    }
# 772 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h"
    void InterpTrans(CIwMat2D const & m0, CIwMat2D const & m1, iwfixed fraction);


    void InterpolatePos(CIwMat2D const & m0, CIwMat2D const & m1, iwfixed fraction)
    {

        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("This method is deprecated in favour of CIwMat2D::InterpTrans(m0, m1, fraction)."); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h", 778, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        InterpTrans(m0, m1, fraction);
    }






    void CopyRot(const CIwMat2D& m0)
    {
        m[0][0] = m0.m[0][0];
        m[0][1] = m0.m[0][1];
        m[1][0] = m0.m[1][0];
        m[1][1] = m0.m[1][1];
    }





    void CopyTrans(const CIwMat2D& m0)
    {
        t = m0.t;
    }







    bool IsRotSame(CIwMat2D const& m0) const
    {
        return m[0][0] == m0.m[0][0] &&
        m[0][1] == m0.m[0][1] &&
        m[1][0] == m0.m[1][0] &&
        m[1][1] == m0.m[1][1];
    }






    bool IsTransSame(CIwMat2D const& m0) const
    {
        return (t == m0.t);
    }






    bool operator == (CIwMat2D const & m0) const
    {
        return IsRotSame(m0) && IsTransSame(m0);
    }







    bool operator != (CIwMat2D const & m0) const
    {
        return !IsRotSame(m0) || !IsTransSame(m0);
    }



    bool IsRotIdentity()
    {
        return IsRotSame(g_Identity);
    }


    bool IsTransIdentity()
    {
        return IsTransSame(g_Identity);
    }


    bool IsIdentity()
    {
        return (*this)==g_Identity;
    }


    void SetIdentity()
    {
        *this = g_Identity;
    }


    bool IsRotZero()
    {
        return m[0][0] == 0 &&
        m[0][1] == 0 &&
        m[1][0] == 0 &&
        m[1][1] == 0;
    }


    bool IsTransZero()
    {
        return t.x == 0 &&
        t.y == 0;
    }


    bool IsZero()
    {
        return IsRotZero() && IsTransZero();
    }


    void SetZero();


    void Zero()
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("This method is deprecated in favour of CIwMat2D::SetZero()."); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h", 902, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        SetZero();
    }

    iwfixed GetDeterminant() const
    {
        return IW_FIXED_MUL(m[0][0], m[1][1]) - IW_FIXED_MUL(m[0][1], m[1][0]);
    }




    CIwMat2D GetInverse() const;
# 930 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h"
private:


    static inline iwfixed FindComponentFromBA(const CIwMat2D& A, const CIwMat2D& B, const int i, const int j)
    {


        int64 testA = (int64)(B.m[i][0]) * A.m[0][j];
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(testA >> 63 == testA >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Matrix multiplication overflow"); switch (IwDebugAssertShow("testA >> 63 == testA >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h", 938, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        int64 testB = (int64)(B.m[i][1]) * A.m[1][j];
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(testB >> 63 == testB >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Matrix multiplication overflow"); switch (IwDebugAssertShow("testB >> 63 == testB >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h", 941, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        int64 test = testA + testB;
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test >> 63 == test >> 31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("Matrix multiplication overflow"); switch (IwDebugAssertShow("test >> 63 == test >> 31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h", 944, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


        return (B.m[i][0]*A.m[0][j] + B.m[i][1]*A.m[1][j]) >> 12;
    }



};
# 961 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h"
# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat2D.h" 1
       
# 35 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat2D.h"
class CIwMat2D;
# 63 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat2D.h"
class CIwFMat2D
{
public:



    float m[2][2];



    CIwFVec2 t;




    static CIwFMat2D g_Identity;




    CIwFMat2D() {};





    explicit CIwFMat2D(float f)
    {
        m[0][0] = m[1][1] = f;
        m[0][1] = m[1][0] = 0;
        t.x = t.y = 0;
    }






    explicit CIwFMat2D(const CIwMat2D & M);





    inline CIwMat2D ConvertToCIwMat2D();
# 116 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat2D.h"
    CIwFMat2D(CIwFMat2D const & R, CIwFVec2 const & T)
    {
        m[0][0] = R.m[0][0];
        m[1][0] = R.m[1][0];
        m[0][1] = R.m[0][1];
        m[1][1] = R.m[1][1];
        t = T;
    }







    void Serialise();





    void Normalise()
    {
        CIwFVec2* pVecX = (CIwFVec2*)&m[0][0];
        CIwFVec2* pVecY = (CIwFVec2*)&m[1][0];

        pVecX->Normalise();

        *pVecY = CIwFVec2(-pVecX->y, pVecX->x);
    }




    void Transpose();





    CIwFVec2 const & GetTrans() const
    {
        return t;
    }






    CIwFMat2D & SetTrans(CIwFVec2 const & v)
    {
        t = v;
        return *this;
    }







    CIwFMat2D & operator += (CIwFVec2 const & V)
    {
        t += V;
        return *this;
    }







    CIwFMat2D operator + (CIwFVec2 const & V) const
    {
        return CIwFMat2D(*this, t+V);
    }
# 203 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat2D.h"
    CIwFVec2 ColumnX() const
    {
        return CIwFVec2(m[0][0], m[1][0]);
    }




    CIwFVec2 ColumnY() const
    {
        return CIwFVec2(m[0][1], m[1][1]);
    }







    CIwFVec2 RowX() const
    {
        return CIwFVec2(m[0][0], m[0][1]);
    }







    CIwFVec2 RowY() const
    {
        return CIwFVec2(m[1][0], m[1][1]);
    }






    CIwFVec2 RotateVec(CIwFVec2 const &V) const
    {
        return CIwFVec2(
        ((m[0][0] * V.x) + (m[1][0] * V.y)),
        ((m[0][1] * V.x) + (m[1][1] * V.y))
        );
    }
# 258 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat2D.h"
    CIwFVec2 TransformVec(CIwFVec2 const &V) const
    {
        return CIwFVec2(
        ((m[0][0] * V.x) + (m[1][0] * V.y)) + t.x,
        ((m[0][1] * V.x) + (m[1][1] * V.y)) + t.y
        );
    }
# 273 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat2D.h"
    CIwFVec2 TransposeRotateVec(CIwFVec2 const &V) const
    {
        return CIwFVec2(
        ((m[0][0] * V.x) + (m[0][1] * V.y)),
        ((m[1][0] * V.x) + (m[1][1] * V.y))
        );
    }
# 289 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat2D.h"
    CIwFVec2 TransposeTransformVec(CIwFVec2 const &V) const
    {
        return CIwFVec2(
            ((m[0][0] * (V.x-t.x)) + (m[0][1] * (V.y-t.y))),
            ((m[1][0] * (V.x-t.x)) + (m[1][1] * (V.y-t.y)))
            );
    }


    float TransformVecX(CIwFVec2 const &V) const { return (((m[0][0] * V.x) + (m[1][0] * V.y))) + t.x; }
    float TransformVecY(CIwFVec2 const &V) const { return (((m[0][1] * V.x) + (m[1][1] * V.y))) + t.y; }
    float TransformVecX(float x, float y) const { return (((m[0][0] * x) + (m[1][0] * y))) + t.x; }
    float TransformVecY(float x, float y) const { return (((m[0][1] * x) + (m[1][1] * y))) + t.y; }







    inline float RotateVecX(const CIwFVec2& V)
    {
            return m[0][0] * V.x + m[1][0] * V.y;
    }





    inline float RotateVecY(const CIwFVec2& V)
    {
            return m[0][1] * V.x + m[1][1] * V.y;
    }






    CIwFMat2D GetTranspose() const
    {
        CIwFMat2D N;
        N.m[0][0] = m[0][0];
        N.m[1][0] = m[0][1];
        N.m[0][1] = m[1][0];
        N.m[1][1] = m[1][1];


        N.t = CIwFVec2(0, 0);
        return N;
    }







    inline void SetRot(float r = 0, bool resetTrans = true)
    {
        if (resetTrans) t.x = t.y = 0;
        m[0][0] = m[1][1] = (float)cos(-r);
        m[0][1] = -(m[1][0] = (float)sin(-r));
    }






    inline void SetRot(float r, const CIwFVec2& centre)
    {
        m[0][0] = m[1][1] = (float)cos(-r);
        m[0][1] = -(m[1][0] = (float)sin(-r));
        t = centre - RotateVec(centre);
    }


    inline void PreRotate(float r)
    {
        CIwFMat2D rz;
        rz.SetRot(r, true);
        PreRotate(rz);
    }
    inline void PostRotate(float r)
    {
        CIwFMat2D rz;
        rz.SetRot(r, true);
        PostRotate(rz);
    }







    CIwFMat2D operator * (CIwFMat2D const & M) const
    {
        CIwFMat2D N;
        N.m[0][0] = FindComponentFromBA(M,*this,0,0);
        N.m[0][1] = FindComponentFromBA(M,*this,0,1);

        N.m[1][0] = FindComponentFromBA(M,*this,1,0);
        N.m[1][1] = FindComponentFromBA(M,*this,1,1);

        N.t = M.TransformVec(t);

        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(N.TransformVec(CIwFVec2::g_Zero) == M.TransformVec(TransformVec(CIwFVec2::g_Zero)))) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwFMat2D overflow: operator *"); switch (IwDebugAssertShow("N.TransformVec(CIwFVec2::g_Zero) == M.TransformVec(TransformVec(CIwFVec2::g_Zero))", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat2D.h", 398, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


        return N;
    }







    CIwFMat2D & PreMult(CIwFMat2D const & M)
    {
        return (*this = M * (*this));
    }




    CIwFMat2D & PreMultiply(CIwFMat2D const & M)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("This method is deprecated in favour of CIwFMat2D::PreMult(M)."); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat2D.h", 419, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return PreMult(M);
    }







    CIwFMat2D & PostMult(CIwFMat2D const & M)
    {
        return (*this = (*this) * M);
    }




    CIwFMat2D & PostMultiply(CIwFMat2D const & M)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("This method is deprecated in favour of CIwFMat2D::PostMult(M)."); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat2D.h", 439, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        return PostMult(M);
    }







    CIwFMat2D& operator *= (CIwFMat2D const & M)
    {
        return PostMult(M);
    }







    CIwFMat2D& PostRotate(CIwFMat2D const& M)
    {
        CIwFMat2D N;

        N.m[0][0] = FindComponentFromBA(M,*this,0,0);
        N.m[0][1] = FindComponentFromBA(M,*this,0,1);

        N.m[1][0] = FindComponentFromBA(M,*this,1,0);
        N.m[1][1] = FindComponentFromBA(M,*this,1,1);

        CopyRot(N);

        return *this;
    }






    CIwFMat2D PreRotate(CIwFMat2D const& M)
    {
        CIwFMat2D t = M;
        t.t = this->t;
        return (*this = t.PostRotate(*this));
    }







    CIwFMat2D& ScaleRot(float v)
    {
        for (int i=0; i<2; i++)
            for (int j=0; j<2; j++)
                m[i][j] = (m[i][j]*v);
        return *this;
    }






    CIwFMat2D& ScaleTrans(float v)
    {
        t *= v;
        return *this;
    }





    CIwFMat2D& Scale(float v)
    {
        ScaleRot(v);
        ScaleTrans(v);
        return *this;
    }






    CIwFMat2D& operator *= (const float v)
    {
        Scale(v);
        return *this;
    }
# 544 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat2D.h"
    void InterpRot(CIwFMat2D const & m0, CIwFMat2D const & m1, float fraction);


    void InterpolateRot(CIwFMat2D const & m0, CIwFMat2D const & m1, float fraction)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("This method is deprecated in favour of CIwFMat2D::InterpRot(m0, m1, fraction)."); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat2D.h", 549, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        InterpRot(m0, m1, fraction);
    }
# 563 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat2D.h"
    void InterpTrans(CIwFMat2D const & m0, CIwFMat2D const & m1, float fraction);


    void InterpolatePos(CIwFMat2D const & m0, CIwFMat2D const & m1, float fraction)
    {

        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("This method is deprecated in favour of CIwFMat2D::InterpTrans(m0, m1, fraction)."); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat2D.h", 569, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        InterpTrans(m0, m1, fraction);
    }






    void CopyRot(const CIwFMat2D& m0)
    {
        m[0][0] = m0.m[0][0];
        m[0][1] = m0.m[0][1];
        m[1][0] = m0.m[1][0];
        m[1][1] = m0.m[1][1];
    }





    void CopyTrans(const CIwFMat2D& m0)
    {
        t = m0.t;
    }







    bool IsRotSame(CIwFMat2D const& m0) const
    {
        return m[0][0] == m0.m[0][0] &&
        m[0][1] == m0.m[0][1] &&
        m[1][0] == m0.m[1][0] &&
        m[1][1] == m0.m[1][1];
    }






    bool IsTransSame(CIwFMat2D const& m0) const
    {
        return (t == m0.t);
    }






    bool operator == (CIwFMat2D const & m0) const
    {
        return IsRotSame(m0) && IsTransSame(m0);
    }







    bool operator != (CIwFMat2D const & m0) const
    {
        return !IsRotSame(m0) || !IsTransSame(m0);
    }



    bool IsRotIdentity()
    {
        return IsRotSame(g_Identity);
    }


    bool IsTransIdentity()
    {
        return IsTransSame(g_Identity);
    }


    bool IsIdentity()
    {
        return (*this)==g_Identity;
    }


    void SetIdentity()
    {
        *this = g_Identity;
    }


    bool IsRotZero()
    {
        return m[0][0] == 0 &&
        m[0][1] == 0 &&
        m[1][0] == 0 &&
        m[1][1] == 0;
    }


    bool IsTransZero()
    {
        return t.x == 0 &&
        t.y == 0;
    }


    bool IsZero()
    {
        return IsRotZero() && IsTransZero();
    }


    void SetZero();


    void Zero()
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("This method is deprecated in favour of CIwFMat2D::SetZero()."); switch (IwDebugAssertShow("false", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat2D.h", 693, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        SetZero();
    }

    float GetDeterminant() const
    {
        return m[0][0] * m[1][1] - m[0][1] * m[1][0];
    }




    CIwFMat2D GetInverse() const;
# 779 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat2D.h"
private:


    static inline float FindComponentFromBA(const CIwFMat2D& A, const CIwFMat2D& B, const int i, const int j)
    {
        return B.m[i][0]*A.m[0][j] + B.m[i][1]*A.m[1][j];

    }



};
# 802 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFMat2D.h"
inline CIwMat2D CIwFMat2D::ConvertToCIwMat2D()
    {
        return CIwMat2D(*this);
    }
# 962 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomMat2D.h" 2


inline CIwFMat2D CIwMat2D::ConvertToCIwFMat2D()
    {
        return CIwFMat2D(*this);
    }
# 25 "c:/marmalade/6.2/modules/iwgeom/h/IwGeom.h" 2
# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomPlane.h" 1
       
# 51 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomPlane.h"
class CIwPlane
{
public:




    CIwSVec3 v;
    int16 padding;





    int32 k;





    static CIwPlane g_YZ;



    static CIwPlane g_XZ;



    static CIwPlane g_XY;




    CIwPlane() {};





    CIwPlane(CIwSVec3 const & _v, int32 vk) : v(_v), k(vk) {};





    CIwPlane(CIwSVec3 const & _v, CIwVec3 const & vk)
    {
        v = _v;
        if (!v.IsZero())
            v.NormaliseSafe();
        k = v * vk;
    }





    CIwPlane(CIwSVec3 const & _v, CIwSVec3 const & vk)
    {
        v = _v;
        if (!v.IsZero())
            v.NormaliseSafe();
        k = v * vk;
    }






    CIwPlane(CIwVec3 const & _a, CIwVec3 const & _b, CIwVec3 const & _c)
    {
        v = ( (_a-_b)^(_c-_a) );
        if (!v.IsZero())
            v.Normalise();
        k = v * _a;
    }






    CIwPlane(CIwSVec3 const & _a, CIwSVec3 const & _b, CIwSVec3 const & _c)
    {
        v = ( (_a-_b)^(_c-_a) );
        if (!v.IsZero())
            v.Normalise();
        k = v * _a;
    }
# 150 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomPlane.h"
    int32 GetPerpDist(CIwVec3 const & a) const
    {
        return v * a - k;
    }





    CIwPlane operator - () const
    {
        return CIwPlane(-v,-k);
    }





    bool operator == (CIwPlane const & p) const
    {
        return k==p.k && v==p.v;
    }
};
# 26 "c:/marmalade/6.2/modules/iwgeom/h/IwGeom.h" 2
# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomQuat.h" 1
       
# 29 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomQuat.h"
static inline iwqfixed iwqfixed_mul30to13(iwqfixed a, iwqfixed b) {

    int64 check = (int64(a) * b)>>47;
    int32 out = (((a>>16)*(b>>16))>>15);
    do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(out>=check-2 && out<=check+1)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("iwqfixed_mul30to13 overflow"); switch (IwDebugAssertShow("out>=check-2 && out<=check+1", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomQuat.h", 33, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


    return (((a>>16)*(b>>16))>>15);
}
# 56 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomQuat.h"
class CIwQuat
{
public:



    iwqfixed s,
                x, y, z;




    static CIwQuat g_Identity;




    CIwQuat():x(0),y(0),z(0),s((1 << 30)) {}





    CIwQuat(iwqfixed s,iwqfixed x,iwqfixed y,iwqfixed z):x(x),y(y),z(z),s(s) {}







    CIwQuat(CIwMat const &mat);






    CIwQuat(iwqfixed s):x(0),y(0),z(0),s(s) {}






    CIwQuat(CIwVec3 const& v, iwqangle theta){
        CIwVec3 vn = v.GetNormalised();
        SetAxisAngle(vn.x<<(30 - 12), vn.y<<(30 - 12), vn.z<<(30 - 12), theta);
    }





    void Serialise()
    {
        IwSerialiseInt32(s, 4);
    }






    bool operator == (CIwQuat const &q) const {
        return (x == q.x && y == q.y && z == q.z && s == q.s);
    }






    bool operator != (CIwQuat const &q) const {
        return !(*this == q);
    }
# 140 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomQuat.h"
    void SetAxisAngle(iwqfixed x, iwqfixed y, iwqfixed z, iwqangle theta);





    iwqfixed GetLengthSquared() const;





    iwqfixed GetLength() const;







    CIwQuat operator * (CIwQuat const & q) const {
        return CIwQuat (IW_QFIXED_MUL_SAFE(s, q.s) - (IW_QFIXED_MUL_SAFE(q.x, x) + IW_QFIXED_MUL_SAFE(q.y, y) + IW_QFIXED_MUL_SAFE(q.z, z)),
            IW_QFIXED_MUL_SAFE(s, q.x) + IW_QFIXED_MUL_SAFE(q.s, x) + IW_QFIXED_MUL_SAFE(y, q.z) - IW_QFIXED_MUL_SAFE(z, q.y),
            IW_QFIXED_MUL_SAFE(s, q.y) + IW_QFIXED_MUL_SAFE(q.s, y) + IW_QFIXED_MUL_SAFE(z, q.x) - IW_QFIXED_MUL_SAFE(x, q.z),
            IW_QFIXED_MUL_SAFE(s, q.z) + IW_QFIXED_MUL_SAFE(q.s, z) + IW_QFIXED_MUL_SAFE(x, q.y) - IW_QFIXED_MUL_SAFE(y, q.x)
            );
    }






    CIwQuat operator << (const int c) const {
        return CIwQuat(s<<c, x<<c, y<<c, z<<c);
    }






    CIwQuat operator >> (const int c) const {
        return CIwQuat(s>>c, x>>c, y>>c, z>>c);
    }
# 193 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomQuat.h"
    CIwVec3 RotateVector (CIwVec3 const &v) const {


        int64 qxvx = (((int64)v.y * z) - ((int64)v.z * y)) >> (12 -1),
                    qxvy = (((int64)v.z * x) - ((int64)v.x * z)) >> (12 -1),
                    qxvz = (((int64)v.x * y) - ((int64)v.y * x)) >> (12 -1);

        int64 qxqxvx = (((int64)qxvy * z) - ((int64)qxvz * y)) >> (30 + (30 - 12)),
                  qxqxvy = (((int64)qxvz * x) - ((int64)qxvx * z)) >> (30 + (30 - 12)),
                  qxqxvz = (((int64)qxvx * y) - ((int64)qxvy * x)) >> (30 + (30 - 12));

        return CIwVec3(
            (int32)(v.x + ((s*qxvx) >> ((30 - 12) + 30)) + qxqxvx),
            (int32)(v.y + ((s*qxvy) >> ((30 - 12) + 30)) + qxqxvy),
            (int32)(v.z + ((s*qxvz) >> ((30 - 12) + 30)) + qxqxvz));

      }





    CIwQuat operator - () const {
        return CIwQuat(s, -x, -y, -z);
    }





    CIwQuat &NormaliseInPlace() {
        iwqfixed l = GetLengthSquared();

        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(l > 0)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwQuat overflow"); switch (IwDebugAssertShow("l > 0", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomQuat.h", 226, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        if (l == 0) return *this;





        if (l < 0x3FE00000 || l > 0x40200000) {
            int64 recip = (((int64)1 << (30 << 1)) >> 2) / IW_GEOM_QSQRT(l);
            do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!((recip>>31) == (recip>>63))) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwQuat overflow"); switch (IwDebugAssertShow("(recip>>31) == (recip>>63)", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomQuat.h", 235, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
            do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(recip > 0x200000)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwQuat overflow"); switch (IwDebugAssertShow("recip > 0x200000", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomQuat.h", 236, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

            s = IW_QFIXED_MUL_SAFE(s, (iwqfixed)recip)<<2;
            x = IW_QFIXED_MUL_SAFE(x, (iwqfixed)recip)<<2;
            y = IW_QFIXED_MUL_SAFE(y, (iwqfixed)recip)<<2;
            z = IW_QFIXED_MUL_SAFE(z, (iwqfixed)recip)<<2;

        }

        return *this;
    }





    CIwVec3 GetRotationAxis(){
        CIwVec3 v(x>>(30 - 12),y>>(30 - 12),z>>(30 - 12));
        v.Normalise();
        return v;
    }





    iwqangle GetRotationAngle(){
        return IwGeomQACos (s) * 2;
    }




    CIwQuat operator * (iwqfixed const l) const {
        return CIwQuat (
            IW_QFIXED_MUL_SAFE((l<<(30 - 12)), s),
            IW_QFIXED_MUL_SAFE((l<<(30 - 12)), x),
            IW_QFIXED_MUL_SAFE((l<<(30 - 12)), y),
            IW_QFIXED_MUL_SAFE((l<<(30 - 12)), z));
    }






    CIwQuat operator + (CIwQuat const & q) const {

        int64 test;
        test = (int64)q.x + x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwQuat overflow"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomQuat.h", 285, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = (int64)q.y + y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwQuat overflow"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomQuat.h", 286, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = (int64)q.z + z; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwQuat overflow"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomQuat.h", 287, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        return CIwQuat(s + q.s, x + q.x, y + q.y, z + q.z);
    }






    CIwQuat operator - (CIwQuat const & q) const {

        int64 test;
        test = (int64)q.x - x; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwQuat overflow"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomQuat.h", 300, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = (int64)q.y - y; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwQuat overflow"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomQuat.h", 301, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        test = (int64)q.z - z; do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(test>>63 == test>>31)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage ("CIwQuat overflow"); switch (IwDebugAssertShow("test>>63 == test>>31", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomQuat.h", 302, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        return CIwQuat(s - q.s, x - q.x, y - q.y, z - q.z);
    }






    CIwQuat &operator = (CIwQuat const &q) {
        s = q.s;
        x = q.x;
        y = q.y;
        z = q.z;
        return *this;
    }





    operator CIwMat() const {
        CIwMat m;

        iwqfixed x2 = iwqfixed_mul30to13(x,x),
                    y2 = iwqfixed_mul30to13(y,y),
                    z2 = iwqfixed_mul30to13(z,z),
                    xy = iwqfixed_mul30to13(x,y),
                    yz = iwqfixed_mul30to13(y,z),
                    xz = iwqfixed_mul30to13(x,z),
                    wx = iwqfixed_mul30to13(s,x),
                    wy = iwqfixed_mul30to13(s,y),
                    wz = iwqfixed_mul30to13(s,z);



        m.m[0][0] = (1 << 12) - y2 - z2;
        m.m[1][1] = (1 << 12) - x2 - z2;
        m.m[2][2] = (1 << 12) - x2 - y2;
        m.m[1][0] = xy - wz;
        m.m[2][0] = xz + wy;
        m.m[0][1] = xy + wz;
        m.m[2][1] = yz - wx;
        m.m[0][2] = xz - wy;
        m.m[1][2] = yz + wx;

        m.t.x = m.t.y = m.t.z = 0;
        return m;
    }
# 361 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomQuat.h"
    void Lerp(const CIwQuat &startQ, const CIwQuat &endQ, iwfixed const t);
# 371 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomQuat.h"
    void Slerp(const CIwQuat &startQ, const CIwQuat &endQ, iwfixed const t);
};
# 27 "c:/marmalade/6.2/modules/iwgeom/h/IwGeom.h" 2
# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSphere.h" 1
       
# 53 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSphere.h"
template <class V, class R>
class CIwSphereT
{
public:




    V t;




    R r;

    uint32 r2;




    CIwSphereT() {};





    CIwSphereT(V const & _t, R _r) : t(_t)
    {
        SetRadius(_r);
    };





    void Serialise();
# 97 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSphere.h"
    inline void SetRadius(R _r)
    {
        r = _r;
        r2 = ((r) * (r));
    };






    inline uint32 GetRadius() const
    {
        return r;
    };




    inline V const & GetTrans() const
    {
        return t;
    };
# 128 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSphere.h"
    template <class V2>
    void BoundVecs(V2* pVec, uint32 v)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(v > 0)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(390); IwDebugAssertSetMessage ("Must specify non-0 number of vecs"); switch (IwDebugAssertShow("v > 0", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSphere.h", 131, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);


        t.x = t.y = t.z = 0;
        uint32 v2 = v;
        V2* pVec2 = pVec;
        while(v2--)
            t += *pVec2++;


        t = t / ((iwfixed)((v) * (1 << 12)));
        r = 0;
        while(v--)
        {


            CIwVec3 dv(*pVec);
            dv -= t;
            r = (((r) > ((int32)dv.GetLengthSafe())) ? (r) : ((int32)dv.GetLengthSafe()));
            pVec++;
        }


        r2 = ((r) * (r));
    }







    inline bool ClipToPlane(const CIwPlane& plane)
    {
        int32 dot = t * plane.v;
        int32 dotk = dot - plane.k;
        return dotk >= (int32)r;
    }
# 180 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSphere.h"
    bool ClipToFrustrum(CIwPlane* pPlanes, uint32 clipFlags)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(pPlanes)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(391); IwDebugAssertSetMessage ("NULL ptr"); switch (IwDebugAssertShow("pPlanes", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSphere.h", 182, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        while(clipFlags != 0)
        {
            if (
                (clipFlags & 0x1) &&
                (ClipToPlane(*pPlanes) == true)
                )

                return true;

            pPlanes++;
            clipFlags >>= 1;
        }

        return false;
    }
# 208 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSphere.h"
    iwufixed GetDistSqFromLine(const CIwVec3& point, const CIwVec3& dir) const
    {
        CIwVec3 delta = t-point;
        uint32 hyp2 = delta.GetLengthSquaredSafe();
        iwfixed adj = dir*(delta);
        iwufixed adj2 = IW_FIXED_MUL_SAFE(adj,adj);
        iwufixed perpdist2 = hyp2-adj2;
        return perpdist2;
    }
# 226 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomSphere.h"
    bool IntersectsLine(CIwVec3& point, CIwVec3& dir)
    {
        iwufixed r2_proper = IW_FIXED_MUL_SAFE(r,r);
        return GetDistSqFromLine(point,dir) <= r2_proper;
    }







    template <class V2>
    bool ContainsVec(const V2& v) const
    {
        return (v - t).GetLengthSafe() < r;
    }
};





typedef CIwSphereT<CIwVec3, iwfixed> CIwSphere;





typedef CIwSphereT<CIwSVec3, iwsfixed> CIwSSphere;
# 28 "c:/marmalade/6.2/modules/iwgeom/h/IwGeom.h" 2
# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomBBox.h" 1
       
# 26 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomBBox.h"
class CIwMat;
# 54 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomBBox.h"
template <class V>
class CIwBBoxT
{
public:




    V m_Min;





    V m_Max;




    CIwBBoxT() {};
# 82 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomBBox.h"
    CIwBBoxT(const V& _min, const V& _max) : m_Min(_min), m_Max(_max) {};





    void Serialise();





    V GetCentre() { return m_Min + (m_Max - m_Min) / ((iwfixed)((2) * (1 << 12))); }





    template <class V2>
    void BoundVec(V2* pVec)
    {
        m_Min.x = (((m_Min.x) < (pVec->x)) ? (m_Min.x) : (pVec->x));
        m_Min.y = (((m_Min.y) < (pVec->y)) ? (m_Min.y) : (pVec->y));
        m_Min.z = (((m_Min.z) < (pVec->z)) ? (m_Min.z) : (pVec->z));
        m_Max.x = (((m_Max.x) > (pVec->x)) ? (m_Max.x) : (pVec->x));
        m_Max.y = (((m_Max.y) > (pVec->y)) ? (m_Max.y) : (pVec->y));
        m_Max.z = (((m_Max.z) > (pVec->z)) ? (m_Max.z) : (pVec->z));
    }
# 119 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomBBox.h"
    template <class V2>
    void BoundVecs(V2* pVec, uint32 v)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(v > 0)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(348); IwDebugAssertSetMessage ("Must specify non-0 number of vecs"); switch (IwDebugAssertShow("v > 0", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomBBox.h", 122, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        m_Min = V(0x7fff, 0x7fff, 0x7fff);
        m_Max = V((-0x7fff - 1), (-0x7fff - 1), (-0x7fff - 1));
        while(v--)
        {
            BoundVec(pVec);
            pVec++;
        }
    }
# 141 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomBBox.h"
    template <class V2>
    bool ContainsVec(const V2& v, CIwMat* pMat = __null) const
    {
        if (pMat)
        {
            CIwVec3 dv = v - pMat->t;
            int32 lx, ly, lz;
            lx = pMat->RotateVecX(dv);
            if ((lx >= m_Min.x) && (lx <= m_Max.x))
            {
                ly = pMat->RotateVecY(dv);
                if ((ly >= m_Min.y) && (ly <= m_Max.y))
                {
                    lz = pMat->RotateVecZ(dv);
                    if ((lz >= m_Min.z) && (lz <= m_Max.z))
                        return true;
                }
            }
        }
        else
        {
            if (
                (v.x >= m_Min.x) && (v.x <= m_Max.x) &&
                (v.y >= m_Min.y) && (v.y <= m_Max.y) &&
                (v.z >= m_Min.z) && (v.z <= m_Max.z)
                )
                return true;
        }
        return false;
    }
};





typedef CIwBBoxT<CIwSVec3> CIwSBBox;





typedef CIwBBoxT<CIwVec3> CIwBBox;
# 29 "c:/marmalade/6.2/modules/iwgeom/h/IwGeom.h" 2
# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomIntersect.h" 1
       
# 40 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomIntersect.h"
extern int32 IW_GEOM_INTERSECT_EPSILON;
# 56 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomIntersect.h"
bool IwIntersectLinePlane( const CIwVec3& vFrom,
                                const CIwVec3& vFromTo,
                                const CIwPlane& plane,
                                int32& f,
                                bool finite = true);
# 76 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomIntersect.h"
bool IwIntersectLineSegPlaneOneSided(const CIwVec3& vOrg,
                                        const CIwVec3& vDirn,
                                        const CIwPlane& plane,
                                        int32& f,
                                        bool finite = true);
# 91 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomIntersect.h"
bool IwIntersectLineSphere( const CIwVec3& vOrg,
                                const CIwVec3& vDirn,
                                const CIwSphere& sphere);
# 111 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomIntersect.h"
bool IwIntersectLineTriNorm( const CIwVec3& vOrg,
                                const CIwVec3& vDirn,
                                const CIwVec3& v0,
                                const CIwVec3& v1,
                                const CIwVec3& v2,
                                const CIwSVec3& norm,
                                int32& f,
                                bool finite = true);
# 136 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomIntersect.h"
bool IwIntersectLineLine2D( const CIwVec2& p1, const CIwVec2& dir1,
                                const CIwVec2& p2, const CIwVec2& dir2,
                                CIwVec2& collpt,
                                iwfixed& t1,
                                iwfixed& t2,
                                bool finite = true);
# 151 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomIntersect.h"
bool IwIntersectSphereSphere(const CIwSphere& s0, const CIwSphere& s1);
# 30 "c:/marmalade/6.2/modules/iwgeom/h/IwGeom.h" 2


# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFIntersect.h" 1
       
# 33 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFIntersect.h"
# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFPlane.h" 1
       
# 45 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFPlane.h"
class CIwFPlane
{
public:




    CIwFVec3 v;
    int16 padding;





    float k;





    static CIwFPlane g_YZ;



    static CIwFPlane g_XZ;



    static CIwFPlane g_XY;




    CIwFPlane() {};





    CIwFPlane(CIwFVec3 const & _v, float vk) : v(_v), k(vk) {};





    CIwFPlane(CIwFVec3 const & _v, CIwFVec3 const & vk)
    {
        v = _v;
        if (!v.IsZero())
            v.Normalise();
        k = v * vk;
    }






    CIwFPlane(CIwFVec3 const & _a, CIwFVec3 const & _b, CIwFVec3 const & _c)
    {
        v = ( (_a - _b) ^ (_c - _a) );
        if (!v.IsZero())
            v.Normalise();
        k = v * _a;
    }
# 120 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFPlane.h"
    float GetPerpDist(CIwFVec3 const & a) const
    {
        return v * a - k;
    }





    CIwFPlane operator - () const
    {
        return CIwFPlane(-v, -k);
    }





    bool operator == (CIwFPlane const & p) const
    {
        return k == p.k && v == p.v;
    }
};
# 34 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFIntersect.h" 2
# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFSphere.h" 1
# 21 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFSphere.h"
# 1 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFBBox.h" 1
       
# 22 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFBBox.h"
class CIwFMat;





class CIwFBBox
{
public:

    CIwFVec3 minV;
    CIwFVec3 maxV;


    CIwFBBox() {};
    CIwFBBox(const CIwFVec3& _min, const CIwFVec3& _max) : minV(_min), maxV(_max) {};


    CIwFVec3 GetCentre() { return minV + (maxV - minV) / 2; }


    inline void BoundVec(CIwFVec3* pVec)
    {
        minV.x = (((minV.x) < (pVec->x)) ? (minV.x) : (pVec->x));
        minV.y = (((minV.y) < (pVec->y)) ? (minV.y) : (pVec->y));
        minV.z = (((minV.z) < (pVec->z)) ? (minV.z) : (pVec->z));
        maxV.x = (((maxV.x) > (pVec->x)) ? (maxV.x) : (pVec->x));
        maxV.y = (((maxV.y) > (pVec->y)) ? (maxV.y) : (pVec->y));
        maxV.z = (((maxV.z) > (pVec->z)) ? (maxV.z) : (pVec->z));
    }


    void BoundVecs(CIwFVec3* pVec, uint32 v)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(v > 0)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(363); IwDebugAssertSetMessage ("Must specify non-0 number of vecs"); switch (IwDebugAssertShow("v > 0", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFBBox.h", 56, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        minV = CIwFVec3(3.402823466e+38F, 3.402823466e+38F, 3.402823466e+38F);
        maxV = CIwFVec3(-3.402823466e+38F, -3.402823466e+38F, -3.402823466e+38F);
        while(v--)
        {

            minV.x = (((minV.x) < (pVec->x)) ? (minV.x) : (pVec->x));
            minV.y = (((minV.y) < (pVec->y)) ? (minV.y) : (pVec->y));
            minV.z = (((minV.z) < (pVec->z)) ? (minV.z) : (pVec->z));
            maxV.x = (((maxV.x) > (pVec->x)) ? (maxV.x) : (pVec->x));
            maxV.y = (((maxV.y) > (pVec->y)) ? (maxV.y) : (pVec->y));
            maxV.z = (((maxV.z) > (pVec->z)) ? (maxV.z) : (pVec->z));
            pVec++;
        }
    }


    bool ContainsVec(CIwFVec3& v, CIwFMat* pMat = __null)
    {
        if (pMat)
        {
            CIwFVec3 dv = v - pMat->t;
            float lx, ly, lz;
            lx = pMat->m[0][0]*dv.x + pMat->m[1][0]*dv.y + pMat->m[2][0]*dv.z;
            if ((lx >= minV.x) && (lx <= maxV.x))
            {
                ly = pMat->m[0][1]*dv.x + pMat->m[1][1]*dv.y + pMat->m[2][1]*dv.z;
                if ((ly >= minV.y) && (ly <= maxV.y))
                {
                    lz = pMat->m[0][2]*dv.x + pMat->m[1][2]*dv.y + pMat->m[2][2]*dv.z;
                    if ((lz >= minV.z) && (lz <= maxV.z))
                        return true;
                }
            }
        }
        else
        {
            if (
                (v.x >= minV.x) && (v.x <= maxV.x) &&
                (v.y >= minV.y) && (v.y <= maxV.y) &&
                (v.z >= minV.z) && (v.z <= maxV.z)
                )
                return true;
        }
        return false;
    }
};
# 22 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFSphere.h" 2







class CIwFSphere
{
public:

    CIwFVec3 t;
    float r;
    float r2;


    CIwFSphere() {};
    CIwFSphere(const CIwFVec3& _t, float _r) : t(_t)
    {
        SetRadius(_r);
    };

    inline void SetRadius(float _r)
    {
        r = _r;
        r2 = r*r;
    };

    inline float GetRadius()
    {
        return r;
    };

    inline CIwFVec3 const & GetTrans() const
    {
        return t;
    };


    void BoundVecs(CIwFVec3* pVec, uint32 v)
    {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(v > 0)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(372); IwDebugAssertSetMessage ("Must specify non-0 number of vecs"); switch (IwDebugAssertShow("v > 0", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFSphere.h", 63, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        CIwFBBox bbox;
        bbox.BoundVecs(pVec, v);

        t = bbox.GetCentre();
        r = 0;
        while(v--)
        {
            CIwFVec3 dv = *pVec;
            dv -= t;
            r = (((r) > (dv.GetLengthSquared())) ? (r) : (dv.GetLengthSquared()));
            pVec++;
        }


        r2 = r;

        r = (float)sqrt(r);
    }


    void Combine(CIwFSphere& rhs)
    {

        CIwFVec3 centre = rhs.t - t;
        float dist = centre.GetLength();

        if( dist + rhs.r <= r )
            return;

        if( dist + r <= rhs.r )
        {
            *this = rhs;
            return;
        }

        centre = centre / dist;

        t -= centre * r;

        t += rhs.t + centre * rhs.r;
        t = t / 2.0f;

        r = (dist + r + rhs.r) / 2.0f;
        r2 = r * r;

        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(r >= rhs.r)) && (IwDebugAssertIsChannelOn("GEOM")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("r >= rhs.r", "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFSphere.h", 110, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
    }
# 146 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFSphere.h"
};




inline void IwSerialiseSphere(CIwFSphere& Sphere)
{
    Sphere.t.Serialise ();
    IwSerialiseFloat(Sphere.r);
    IwSerialiseFloat(Sphere.r2);
}
# 35 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFIntersect.h" 2
# 54 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFIntersect.h"
bool IwIntersectLinePlane(const CIwFVec3& vFrom,
                          const CIwFVec3& vFromTo,
                          const CIwFPlane& plane,
                          float& f,
                          bool finite = true);
# 74 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFIntersect.h"
bool IwIntersectLineSegPlaneOneSided(const CIwFVec3& vOrg,
                                     const CIwFVec3& vDirn,
                                     const CIwFPlane& plane,
                                     float& f,
                                     bool finite = true);
# 89 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFIntersect.h"
bool IwIntersectLineSphere(const CIwFVec3& vOrg,
                           const CIwFVec3& vDirn,
                           const CIwFSphere& sphere);
# 109 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFIntersect.h"
bool IwIntersectLineTriNorm(const CIwFVec3& vOrg,
                            const CIwFVec3& vDirn,
                            const CIwFVec3& v0,
                            const CIwFVec3& v1,
                            const CIwFVec3& v2,
                            const CIwFVec3& norm,
                            float& f,
                            bool finite = true);
# 134 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFIntersect.h"
bool IwIntersectLineLine2D(const CIwFVec2& p1,
                           const CIwFVec2& dir1,
                           const CIwFVec2& p2,
                           const CIwFVec2& dir2,
                           CIwFVec2& collpt,
                           float& t1,
                           float& t2,
                           bool finite = true);
# 151 "c:/marmalade/6.2/modules/iwgeom/h/IwGeomFIntersect.h"
bool IwIntersectSphereSphere(const CIwFSphere& s0, const CIwFSphere& s1);
# 33 "c:/marmalade/6.2/modules/iwgeom/h/IwGeom.h" 2
# 29 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandlerGROUP.h" 2


class CIwTileSpecs;
class CIwResource;
# 116 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandlerGROUP.h"
class CIwResTemplateGROUP : public CIwResTemplate
{
public:
    typedef CIwArray<CIwResTemplateGROUP*> Array; typedef Array::iterator ArrayIt; const char* GetClassName() const;;


    CIwResTemplateGROUP();
    ~CIwResTemplateGROUP();
    virtual void Reset();
    virtual void Copy(CIwResTemplate* pSource);
    virtual void Apply() {}
    virtual bool ParseAttribute(CIwTextParserITX* pParser, const char* pAttrName);
    virtual const char* GetResExt() const { return "group"; }

    bool IsInline() const;



    uint32 m_MaxAtlasTargets;
    CIwSVec2 m_PageSize;
    CIwArray<CIwTileSpecs*> m_TileSpecs;
    CIwSVec2 m_MaxAreaPerTexture;
    bool m_BakeAtlasTextures;
    uint32 m_AtlasPadding;
    bool m_AtlasAllMaterials;
    bool m_Atlas16Bit;

    bool m_Mount;
    bool m_Optimise;

private:
    bool m_Inline;
};
# 162 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandlerGROUP.h"
class CIwResHandlerGROUP : public CIwResHandler
{
public:
    typedef CIwArray<CIwResHandlerGROUP*> Array; typedef Array::iterator ArrayIt; const char* GetClassName() const;;


    CIwResHandlerGROUP();
    virtual CIwResource* Build(const CIwStringL& pathname);
};
# 19 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManager.h" 2
# 1 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandlerImage.h" 1
       
# 25 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandlerImage.h"
class CIwResource;
# 120 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandlerImage.h"
class CIwResTemplateImage : public CIwResTemplate
{
public:
    typedef CIwArray<CIwResTemplateImage*> Array; typedef Array::iterator ArrayIt; const char* GetClassName() const;;

    CIwResTemplateImage();
    virtual void Reset();
    virtual void Copy(CIwResTemplate* pSource);
    virtual void Apply();
    virtual bool ParseAttribute(CIwTextParserITX* pParser, const char* pAttrName);
    virtual const char* GetResExt() const { return "bmp"; }

    bool m_Native16bit;
    bool m_KeepAfterUpload;
    bool m_UploadOnLoad;
    bool m_MipMapping;
    bool m_Filtering;
    uint8 m_FormatSW;
    uint8 m_FormatHW;
    bool m_CreateFor3DAPI;
    bool m_CreateFor2DAPI;
    bool m_CompressForDiskSpace;
    bool m_AllowLowQualityCompression;
    bool m_IgnoreImages;
    bool m_IgnoreMipMapOffset;
    bool m_NoChromaKey;
};
# 159 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandlerImage.h"
class CIwResHandlerImage : public CIwResHandler
{
public:
    typedef CIwArray<CIwResHandlerImage*> Array; typedef Array::iterator ArrayIt; const char* GetClassName() const;;


    CIwResHandlerImage();
    virtual CIwResource* Build(const CIwStringL& pathname);


    static const char* g_FlagNames[];
};
# 20 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManager.h" 2
# 1 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandlerITX.h" 1
       
# 25 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandlerITX.h"
class CIwResource;
# 38 "c:/marmalade/6.2/modules/iwresmanager/h/IwResHandlerITX.h"
class CIwResHandlerITX : public CIwResHandler
{
public:
    typedef CIwArray<CIwResHandlerITX*> Array; typedef Array::iterator ArrayIt; const char* GetClassName() const;;


    CIwResHandlerITX(const char* extentions = "itx cubemap");
    virtual CIwResource* Build(const CIwStringL& pathname);
};
# 21 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManager.h" 2
# 1 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h" 1
       
# 21 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwSingleton.h" 1
# 22 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h" 2
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwString.h" 1
# 23 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h" 2


class CIwMenu;
class CIwResource;
class CIwResBuildStyle;
class CIwResGroup;
class CIwResGroupHST;
class CIwResHandler;
class CIwResManager;
class CIwRect;
class CIwMaterial;
# 62 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
void IwResManagerInit();







void IwResManagerTerminate();
# 108 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
typedef enum IwGxResManagerFlags
{
    IW_RES_PERMIT_NULL_F = (1 << 0),
    IW_RES_SEARCH_ALL_F = (1 << 1),
    IW_RES_IGNORE_SHARED_F = (1 << 2),
    IW_RES_IGNORE_CHILDREN_F = (1 << 3),
    IW_RES_INCLUDE_DEBUG_GROUPS_F = (1 << 4),
    IW_RES_SKIP_CURRENT_GROUP_F = (1 << 5),
} IwGxResManagerFlags;
# 144 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
class CIwResManager
{
public:



    enum GlobalMode
    {
        MODE_BUILD,
        MODE_LOAD,
    };






    typedef void (*BuildGroupCallbackPre)(void);






    typedef void (*BuildGroupCallbackPost)(void);
# 181 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    inline void SetMode(GlobalMode mode)
    {
        if (mode == MODE_BUILD)
            m_Flags |= BUILDRES_F;
        else
            m_Flags &= ~BUILDRES_F;
    };
# 196 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    inline GlobalMode GetMode() const
    {
        return (m_Flags & BUILDRES_F) ? MODE_BUILD : MODE_LOAD;
    };
# 219 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    void AddHandler(CIwResHandler* pHandler);







    void RemoveHandler(const char* classname);
# 236 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    void AddGroup(CIwResGroup* pGroup);







    CIwResGroup::ArrayIt DestroyGroup(const char* groupname);







    CIwResGroup::ArrayIt DestroyGroup(CIwResGroup* pGroup);
# 263 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    void ReserveGroups(int numGroups);
# 274 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    void ReserveHandlers(int numHandlers);
# 285 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    CIwResGroup* GetGroupNamed(const char* groupname, uint32 flags = 0) const;
# 296 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    CIwResGroup* GetGroupHashed(uint32 hash, uint32 flags = 0) const;







    uint32 GetNumGroups() const;
# 315 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    CIwResGroup* GetGroup(uint32 index) const;
# 326 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    CIwResHandler* GetHandler(const char* ext, uint32 flags = 0) const;
# 337 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    const char* GetResType(const char* ext, uint32 flags = 0) const;
# 358 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    void SplitPathName(const char* pathname, CIwStringL& pathonly, CIwStringL& fileonly, CIwStringS& ext);
    void SplitPathName(const char* pathname, CIwStringL& pathonly, CIwStringS& fileonly, CIwStringS& ext);
# 375 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    CIwResource* GetResNamed(const char* resName, const char* resType, uint32 flags = 0) const;
# 386 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    CIwResource* GetResHashed(uint32 hash, const char* resType, uint32 flags = 0) const;
# 397 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    void AddRes(const char* resType, CIwResource* pData);
# 406 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    inline void SetCurrentGroup(CIwResGroup* pGroup)
    {
        do { static uint8 _s_IwAssertIgnoreThis = 0;; if (!(pGroup)) { if( (IwDebugAssertIsChannelOn("GX")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetUID(1280); IwDebugAssertSetMessage ("Illegal NULL input"); switch (IwDebugAssertShow("pGroup", "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h", 408, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } return; } } while (0);
        m_GroupCurr = pGroup;
    }
# 419 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    inline CIwResGroup* GetCurrentGroup() const {return m_GroupCurr;}
# 428 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    CIwResGroup* GetLastSearchGroup() const;
# 438 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    CIwResGroup* LoadGroup(const char* pathname, bool allowNonExist = false);
# 449 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    CIwResGroup* LoadGroupFromMemory(const uint8* buffer, uint32 length);
# 460 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    CIwResGroup* MountGroup(const char* pathname, bool allowNonExist = false);


    CIwResGroup* ReloadGroup(const char* pathname, bool allowNonExist = false);







    void SetBuildGroupCallbackPre(BuildGroupCallbackPre fn);







    void SetBuildGroupCallbackPost(BuildGroupCallbackPost fn);
# 495 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    void SerialiseResPtr(CIwManaged*& pData, const char* resType,
        bool resolveNow = true);
# 506 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    void ResolveResPtr(CIwManaged*& pData, const char* resType);
# 516 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    CIwMaterial* GetAtlasMaterial(CIwMaterial* pMaterial, CIwRect& outUVRect);
# 526 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManagerClass.h"
    void SetBuildStyle(const char* name);






    CIwStringL GetBuildStyleCurrName() const;




    enum
    {
        COLLISION_MODE_SHIFT = 17,


        BUILDRES_F = (1 << 0),
        LOADPVR_F = (1 << 1),


        OMIT_SHARED_F = (1 << 4),
        OMIT_CHILDREN_F = (1 << 5),
        IGNORE_SHADERS_F = (1 << 6),
        IGNORE_MULTIPASS_F = (1 << 7),
        DONT_TEST_BINARIES_F = ( 1 << 8),
        GROUP_LIST_RESERVED_F = (1 << 9),
        HANDLER_LIST_RESERVED_F = (1 << 10),
        DONT_SERIALISE_BLOCK_SIZES_F = (1 << 11),
        DONT_LOAD_CHILD_GROUPS_F = (1 << 12),
        OPTIMISE_INCLUDE_UNUSED_RES_F = (1 <<13),
        OPTIMISE_MOUNTED_BINARIES_F = (1 <<14),
        MANUAL_RESOLVE_F = (1 << 15),
        IGNORE_INLINING_F = (1 << 16),
        COLLISION_MODE_F = (3 << COLLISION_MODE_SHIFT),
        PATCH_BINARIES_F = (1 << (2 + COLLISION_MODE_SHIFT)),
        LEGACY_SERIALISE_F = (1 << (3 + COLLISION_MODE_SHIFT)),
        USE_DEPENDENCY_F = (1 << (4 + COLLISION_MODE_SHIFT)),
    };


    CIwResource* LoadRes(const char* pathname, const char* tokens = __null, uint32 flags = 0);


    inline void AddLoadPath(const CIwStringL& path) {m_LoadPaths.push_back(path);}


    inline void ClearLoadPaths() {m_LoadPaths.clear();}


    inline const char* GetPathName() const {return m_PathName;}







    static void ChangeExtension(CIwStringL& filename, const char* pExt);


    void DebugAddMenuItems(CIwMenu* pMenu);







    inline void DebugSetGroupBinCopyPath(const char* path)
    {
        m_DebugGroupBinCopyPath = path;
    }


    inline void AddBuildStyle(CIwResBuildStyle* pStyle) {m_BuildStyles.Add((CIwManaged*)pStyle);}
    inline CIwResBuildStyle* GetBuildStyleNamed(const char* name) const {return (CIwResBuildStyle*)m_BuildStyles.GetObjNamed(name);}
    inline CIwResBuildStyle* GetBuildStyleCurr() const {return m_BuildStyleCurr;}


    bool BuildResources();


    void DumpCatalogue(const char* pLogName = __null) const;




public:
    uint32 m_Flags;
    CIwArray<CIwStringL> m_LoadPaths;
    const char* m_OwnerResName;
    const char* m_DebugGroupBinCopyPath;
    CIwManagedList m_GroupBuildData;
    int32 m_ChildBuildScale;


    void ClearAtlasOwner() {m_AtlasParentGroup = __null;}
    void SetAltasOwner(CIwResGroup* group) {m_AtlasParentGroup = group;}
    CIwResGroup* GetAtlasOwner() {return m_AtlasParentGroup;}
    uint32 GetUniqueRunStamp() { return m_UniqueRunStamp; }

private:

    void _TempRemoveGroup(CIwResGroup* pGroup);
    CIwStringL GetBinaryPath(const char* path);

    typedef enum IwResGroupCollisionHandling
    {
        IW_RES_GROUP_COLLISION_ERROR_F = 0,
        IW_RES_GROUP_COLLISION_REPLACE_F = 1,
        IW_RES_GROUP_COLLISION_PATCH_F = 2,
    } IwGxResManagerGroupCollisionHandling;

    void SetGroupCollisionHandling(IwResGroupCollisionHandling handling)
    {
        m_Flags = (m_Flags & ~COLLISION_MODE_F) | (handling << COLLISION_MODE_SHIFT);
    }

    IwResGroupCollisionHandling GetGroupCollisionHandling()
    {
        return (IwResGroupCollisionHandling)((m_Flags & COLLISION_MODE_F) >> COLLISION_MODE_SHIFT);
    }

    void OptimisedMountedGroups();

    CIwResGroup* m_AtlasParentGroup;
    CIwManagedList m_Handlers;
    CIwManagedList m_Groups;
    CIwManagedList m_ReplacingGroups;
    CIwResGroup* m_GroupCurr;
    const char* m_PathName;
    CIwStringL m_GroupPathNameCurr;
    CIwManagedList m_BuildStyles;
    CIwResBuildStyle* m_BuildStyleCurr;
    uint32 m_UniqueRunStamp;
    bool m_LoadingPatch;

    struct CRemovedGroup
    {
        int32 m_Index;
        CIwResGroup* m_Group;
    };
    CIwArray<CRemovedGroup> m_RemovedGroups;

    CIwArray<CIwStringL> m_GroupsMounted;

    CIwResManager();
    ~CIwResManager();

    friend class CIwMaterial;
    friend class CIwResGroup;
    friend class CIwResHandlerGROUP;
    friend void _Serialise_ResGroupMembers();
    friend void _Serialise_ResGroupChildPaths(void);
    friend void IwResManagerInit();
    friend void IwResManagerTerminate();
};


extern CIwResManager* g_IwResManager;




inline CIwResManager* IwGetResManager() {return g_IwResManager;}







class CIwMenuItemResManager : public CIwMenuItem
{
public:
    CIwMenuItemResManager() : CIwMenuItem("", "IwResManager", 0, CIwMenuItem::MENU) {}
    void Select();
};




class CIwMenuItemResGroup : public CIwMenuItemManaged
{
public:
    CIwMenuItemResGroup(const char* text, CIwResGroup* pGroup) : CIwMenuItemManaged(text, pGroup) {};
    void Select();
    CIwResGroup* m_Group;
};




void IwResolveManagedHash(void* pptr, const char* resType, uint32 flags = 0);
# 22 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManager.h" 2
# 1 "c:/marmalade/6.2/modules/iwresmanager/h/IwResSerialise.h" 1
       
# 21 "c:/marmalade/6.2/modules/iwresmanager/h/IwResSerialise.h"
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwTypes.h" 1
# 22 "c:/marmalade/6.2/modules/iwresmanager/h/IwResSerialise.h" 2
# 51 "c:/marmalade/6.2/modules/iwresmanager/h/IwResSerialise.h"
struct _IwGxBinaryHeader
{
    uint8 m_Magic;
    uint8 m_Major;
    uint8 m_Minor;
    uint8 m_Rev;
};


typedef void(*_IwGxBinaryBlockSerialiseFn)();


struct _IwGxBinaryBlockHashedFn
{
    uint32 m_Hash;
    _IwGxBinaryBlockSerialiseFn m_Function;
};
# 83 "c:/marmalade/6.2/modules/iwresmanager/h/IwResSerialise.h"
void _IwGxBinaryBlockSerialiseAdd(uint32 hash, _IwGxBinaryBlockSerialiseFn fn);


bool _IwGxBinaryBlockSerialiseRemove(uint32 hash);


void _IwGxBinaryBlockSerialise(uint32 hash);


void IwResBinaryRead(const char* pathname, bool allowNonExist);


void IwResBinaryMount(const char* pathname, bool allowNonExist);


void IwResBinarySerialise();


bool IwResBinaryOpen(const char* pathname, bool allowNonExist);

bool IwResBinarySerialiseHeader();

uint32 IwResBinarySerialiseBlock();

void IwResBinaryClose();
# 23 "c:/marmalade/6.2/modules/iwresmanager/h/IwResManager.h" 2
# 22 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwResHandlerWAV.h" 2







typedef struct IwRIFFHeader
{
    char typeID[4];
    uint32 length;
    char subTypeID[4];
} IwRIFFHeader;

typedef struct IwRIFFChunkHeader
{
    char typeID[4];
    uint32 length;
} IwRIFFChunkHeader;

typedef struct IwWAVEFormatChunk
{
    uint16 formatTag;
    uint16 channels;
    uint32 samplesPerSec;
    uint32 avgBytesPerSec;
    uint16 blockAlign;
    uint16 bitsPerSample;
} IwWAVEFormatChunk;


typedef struct IwWAVEFormatChunkADPCM
{
    uint16 formatTag;
    uint16 channels;
    uint32 samplesPerSec;
    uint32 avgBytesPerSec;
    uint16 blockAlign;
    uint16 bitsPerSample;
    uint16 cbSize;
    uint16 samplesPerBlock;
} IwWAVEFormatChunkADPCM;





class CIwSoundData;
class CIwResource;






class CIwResHandlerWAV : public CIwResHandler
{
public:
    typedef CIwArray<CIwResHandlerWAV*> Array; typedef Array::iterator ArrayIt; const char* GetClassName() const;;
    ;

    CIwResHandlerWAV();
    virtual CIwResource* Build(const CIwStringL& pathname);


    CIwStringL m_Pathname;


    static const char* g_FlagNames[];

private:

    bool ReadChunkHeader(IwRIFFChunkHeader& header, s3eFile& file);
    bool ReadChunkFormat(const IwRIFFChunkHeader& header, CIwSoundData*& pData, s3eFile& file);
    bool ReadChunkData(const IwRIFFChunkHeader& header, CIwSoundData*& pData, s3eFile& file);
    bool ReadChunkFact(const IwRIFFChunkHeader& header, CIwSoundData*& pData, s3eFile& file);
};
# 17 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSound.h" 2
# 1 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundManager.h" 1
# 24 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundManager.h"
# 1 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundPCM.h" 1
# 19 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundPCM.h"
# 1 "c:/marmalade/6.2/s3e/h/s3eSound.h" 1
# 20 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundPCM.h" 2
# 1 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundSpec.h" 1
# 21 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundSpec.h"
class CIwSoundData;
class CIwSoundGroup;
class CIwSoundInst;
class CIwSoundParams;
class CIwTextParserITX;
struct s3eSoundEndSampleInfo;





class CIwSoundSpec : public CIwResource
{
public:
    enum
    {
        LOOPED_F = (1 << 0),
    };

    typedef CIwArray<CIwSoundSpec*> Array; typedef Array::iterator ArrayIt; const char* GetClassName() const;;
    CIwSoundSpec();
    ~CIwSoundSpec();
    virtual void Serialise();
    virtual void Resolve();
    virtual bool ParseAttribute(CIwTextParserITX* pParser, const char* pAttrName);
    virtual void ParseClose(CIwTextParserITX* pParser);


    CIwSoundInst* Play(const CIwSoundParams* pParams = __null);


    inline CIwSoundGroup* GetGroup() const {return m_Group;}


    inline void SetGroup(CIwSoundGroup* pGroup) {m_Group = pGroup;}


    inline const CIwSoundData* GetData() const {return m_Data;}


    inline void SetData(const CIwSoundData* pData)
    {

        m_Data = pData;
    }


    inline bool IsLooped() const {return (m_Flags & LOOPED_F) != 0;}

    inline iwsfixed GetVolMin() const { return m_VolMin; }
    inline iwsfixed GetVolMax() const { return m_VolMax; }
    inline iwsfixed GetPanMin() const { return m_PanMin; }
    inline iwsfixed GetPanMax() const { return m_PanMax; }
    inline iwsfixed GetPitchMin() const { return m_PitchMin; }
    inline iwsfixed GetPitchMax() const { return m_PitchMax; }



    void Trace();


private:
    uint16 m_Flags;
    uint16 pad;
    iwsfixed m_VolMin;
    iwsfixed m_VolMax;
    iwsfixed m_PanMin;
    iwsfixed m_PanMax;
    iwsfixed m_PitchMin;
    iwsfixed m_PitchMax;

    const CIwSoundData* m_Data;
    CIwSoundGroup* m_Group;


    friend int _IwSoundSpec_EndSampleCB(s3eSoundEndSampleInfo* esInfo, void* userData);
};

int _IwSoundSpec_EndSampleCB(s3eSoundEndSampleInfo* esInfo, void* userData);
# 21 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundPCM.h" 2



class CIwSoundInst;






template <class SAMPLE>
class CIwChannelPCM
{



public:

    SAMPLE * pos;
    SAMPLE * loop_pos;
    SAMPLE * end_pos;
    int32 offset;

    int m_ChannelID;
    CIwSoundInst* m_Instance;


    CIwChannelPCM();


    int GenerateAudio(s3eSoundGenAudioInfo* pInfo);


    int GenerateAudioFast(int16* aTarget, int aLength, int relative_rate, int volume, int mix, int* endOfSample);


    static int GenerateAudioCB(s3eSoundGenAudioInfo* pSystemData, CIwChannelPCM* pUserData)
    {
        return pUserData->GenerateAudio(pSystemData);
    }


    static inline int16 clip_to_int16( int32 sval )
    {
        enum{ minval = -32768,
              maxval = 32767,
              allbits = 0xffff };

        if ((sval-minval) & ~allbits )
        {

            if (sval > maxval)
                sval = maxval;
            else
            if (sval < minval)
                sval = minval;
            else
            {
                do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(false)) && (IwDebugAssertIsChannelOn("SOUND")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("false", "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundPCM.h", 79, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
            }
        }

        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(sval >= minval)) && (IwDebugAssertIsChannelOn("SOUND")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("sval >= minval", "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundPCM.h", 83, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(sval <= maxval)) && (IwDebugAssertIsChannelOn("SOUND")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("sval <= maxval", "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundPCM.h", 84, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        return (int16)sval;
    }

};


typedef CIwChannelPCM<int16> CIwChannelPCM16;
typedef CIwChannelPCM<int8> CIwChannelPCM8;






template <class SAMPLE>
CIwChannelPCM<SAMPLE>::CIwChannelPCM()
: pos(__null),
    end_pos(__null),
    offset(0),
    m_Instance(__null)
{
}



template <class SAMPLE>
int CIwChannelPCM<SAMPLE>::GenerateAudio(s3eSoundGenAudioInfo* pInfo)
{
    int16* aTarget = pInfo->m_Target;
    int aLength = pInfo->m_NumSamples;
    int mix = pInfo->m_Mix;

    if (!pos)
    {



        pos = (SAMPLE*)pInfo->m_OrigStart;
        end_pos = (SAMPLE*)(pInfo->m_OrigStart + pInfo->m_OrigNumSamples);
        offset = 0;
    }

    int relative_rate = (s3eSoundChannelGetInt(pInfo->m_Channel, S3E_CHANNEL_RATE)*0x1000)/s3eSoundGetInt(S3E_SOUND_OUTPUT_FREQ);
    int volume = s3eSoundChannelGetInt(pInfo->m_Channel, S3E_CHANNEL_VOLUME);

    if (relative_rate != 0x1000)
    {
        int endSample = 0;
        int ret = GenerateAudioFast(aTarget, aLength, relative_rate, volume, mix, &endSample);
        if (endSample)
        {
            pInfo->m_EndSample = (1);
            pos = __null;
        }
        return ret;
    }
    do {
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(end_pos >= pos)) && (IwDebugAssertIsChannelOn("SOUND")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("end_pos >= pos", "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundPCM.h", 143, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);
        do { do { static uint8 _s_IwAssertIgnoreThis = 0;; if ((!(pos != __null)) && (IwDebugAssertIsChannelOn("SOUND")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetSolution (__null); IwDebugAssertSetUID(0); IwDebugAssertSetMessage (__null); switch (IwDebugAssertShow("pos != __null", "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundPCM.h", 144, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } } while (0); } while (0);

        int remain = end_pos - pos;
        int qty = (((remain) < (aLength)) ? (remain) : (aLength));
        aLength -= qty;

        if (volume == 0)
        {
            if (!mix)
                memset(aTarget, 0, sizeof(*aTarget)*qty);
            pos += qty, aTarget += qty, qty=0;
        }
        else
        {
            if (mix)
                for (; qty; qty--, pos++, aTarget++)
                    *aTarget += (*pos * volume) >> 8;
            else
                for (; qty; qty--, pos++, aTarget++)
                    *aTarget = (*pos * volume) >> 8;
        }

        if (pos == end_pos)
        {

            pos = __null;
            pInfo->m_EndSample = 1;
            return pInfo->m_NumSamples - aLength;
        }
    } while (aLength);

    return pInfo->m_NumSamples;
}



template <class SAMPLE>
int CIwChannelPCM<SAMPLE>::GenerateAudioFast(int16* aTarget, int aLength, int relative_rate, int volume, int mix, int* endOfSample)
{

    if (!aLength)
        return mix;
    {
    int16 * _origTarget = aTarget;
    SAMPLE * _pos = pos ;

    int _offset = offset ;

    SAMPLE * endPosMinus1 = end_pos - 1;
    register uint32 mask = 0x0FFF;
    if (mix)
    {
checkfailedmix:
        while (_pos == endPosMinus1)
        {
            if (aLength)
            {
                int32 a = _pos[0];
                int32 b = _pos[0];
                int32 curntsamp, samp;
                curntsamp = *aTarget;
                samp = a + ((b-a)*_offset >> 12);

                *aTarget++ = (int16) clip_to_int16(curntsamp + ((samp * volume)>>8));

                _offset += relative_rate;
                _pos += _offset>>12;
                _offset &= mask;
                aLength--;
            }
            else
                goto myreturn;
        }
        if (_pos > endPosMinus1)
        {
            if (1)
            {
                *endOfSample=1;
                goto myreturn;
            }
        }
        if (!aLength)
            goto myreturn;

        if (volume)
        {
            do{
            int a = _pos[0];
            int b = _pos[1];
            int curntsamp = *aTarget;
            int samp = a + ((b-a)*_offset >> 12);


            *aTarget++ = (int16) clip_to_int16(curntsamp + ((samp * volume)>>8));

            _offset += relative_rate;
            _pos += _offset>>12;
            _offset &= mask;
            aLength--;

            if (_pos >= endPosMinus1)
                goto checkfailedmix;

            }while (aLength);
        }
        else
        {
            do{
                aTarget++;
                _offset += relative_rate;
                _pos += _offset>>12;
                _offset &= mask;
                aLength--;
                if (_pos >= endPosMinus1)
                    goto checkfailedmix;
            }while (aLength);
        }
    }
    else
    {
checkfailednomix:
        while (_pos == endPosMinus1)
        {
            if (aLength)
            {
                int32 a = _pos[0];
                int32 b = _pos[0];
                int32 samp;
                samp = a + ((b-a)*_offset >> 12);

                *aTarget++ = (int16) ((samp * volume)>>8);
                _offset += relative_rate;
                _pos += _offset>>12;
                _offset &= mask;
                aLength--;
            }
            else
                goto myreturn;
        }
        if (_pos > endPosMinus1)
        {
            *endOfSample=1;
            goto myreturn;
        }
        if (!aLength)
            goto myreturn;

        if (volume)
        {
            do{
                int a = _pos[0];
                int b = _pos[1];
                int samp = a + ((b-a)*_offset >> 12);

                *aTarget++ = (int16) ((samp * volume)>>8);

                _offset += relative_rate;
                _pos += _offset>>12;
                _offset &= mask;
                aLength--;

                if (_pos >= endPosMinus1)
                    goto checkfailednomix;

            }while (aLength);
        }
        else
        {
            do{
                *aTarget++ = 0;
                _offset += relative_rate;
                _pos += _offset>>12;
                _offset &= mask;
                aLength--;
                if (_pos >= endPosMinus1)
                    goto checkfailednomix;
            }while (aLength);
        }
    }

myreturn:

    pos = _pos;
    offset = _offset;


    return aTarget-_origTarget;
    }
}
# 25 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundManager.h" 2
# 1 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundADPCM.h" 1
# 25 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundADPCM.h"
struct adpcm_state {
    short valprev;
    unsigned char index;
    unsigned char bufferstep;
};

class CIwChannelADPCM
{
    public:
    int16 * pos ;
    int16 * end_pos ;
    int bres_accum ;
    int count ;
    int16 s_1 ;
    int16 pad ;
    int16 s_2 ;
    int8 index;
    uint8 bufferstep;

    int32 m_SamplesPerBlock;
    int32 m_BlockAlign ;
    int32 m_SamplesRemaining;
    adpcm_state* m_LastBlock;

    int32 paused;



    uint8 m_FrameBuf[160*8];

    CIwChannelADPCM()
    {
        pos = 0;
        if (isInitialized == 0)
            Init();
    }


    static int GenerateAudioCB(s3eSoundGenAudioInfo* pSystemData, CIwChannelADPCM* pUserData)
    {
        return pUserData->GenerateAudio(pSystemData);
    }

    int GenerateAudio(s3eSoundGenAudioInfo* pInfo);

    int GenerateADPCMAudioFast(int16* aTarget, int aLength, int relative_rate, int volume, int mix, int* endOfSample);

    int16 GetNextSample ();

    static int isInitialized;
    static void Init();
};
# 26 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundManager.h" 2



class CIwSoundGroup;
class CIwSoundInst;
class CIwSoundParams;







void IwSoundInit();


void IwSoundTerminate();


typedef enum IwSoundDataFormat
{
    PCM_8BIT_MONO,
    PCM_16BIT_MONO,
    ADPCM_MONO
} IwSoundDataFormat;





class CIwSoundManager
{
public:

    enum
    {
        DIRTY_F = (1 << 0),
        ACTIVE_F = (1 << 1),
    };


    CIwSoundManager();
    virtual ~CIwSoundManager();


    void SetMaxSoundInsts(uint32 n);


    void Update();


    const CIwSoundGroup* GetGroupIdentity() const {return m_GroupIdentity;}


    const CIwSoundParams* GetParamsIdentity() const {return m_ParamsIdentity;}


    int32 GetFreeChannel(CIwSoundInst* pInst, IwSoundDataFormat format = PCM_16BIT_MONO);


    CIwSoundInst* GetFreeInst();


    void SetFreeInst(CIwSoundInst* pInst);


    inline iwsfixed GetMasterVol() const {return m_MasterVol;}


    inline iwsfixed GetMasterPan() const {return m_MasterPan;}


    inline iwsfixed GetMasterPitch() const {return m_MasterPitch;}


    inline void SetMasterVol(iwsfixed vol) {m_MasterVol = vol; m_Flags |= DIRTY_F;}


    inline void SetMasterPan(iwsfixed pan) {m_MasterPan = pan; m_Flags |= DIRTY_F;}


    inline void SetMasterPitch(iwsfixed pitch) {m_MasterPitch = pitch; m_Flags |= DIRTY_F;}


    void SetPitch(iwsfixed pitch, int channelID);


    inline uint16 GetFlags() const {return m_Flags;}


    uint32 GetMaxChannels() const { return m_MaxInsts; }


    inline void SetActive(bool status)
    {
        if (status == true)
            m_Flags |= ACTIVE_F;
        else
            m_Flags &= ~ACTIVE_F;
    }


    inline bool IsActive() const
    {
        return (m_Flags & ACTIVE_F) != 0;
    }


    void StopAll();


    void StopSoundSpec(CIwSoundSpec* pSpec);


    void PauseAll();


    void ResumeAll();
# 153 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundManager.h"
    uint32 GetNumInsts() const { return m_NumActiveInsts; }


    CIwSoundInst* GetSoundInst(int32 i) const { return m_SoundInstPtrs[i]; }

private:


    void UpdateCompleted(int i);




    uint32 m_TimeStamp;
    CIwSoundInst* m_SoundInsts;
    CIwSoundInst** m_SoundInstPtrs;
    uint32 m_MaxInsts;
    uint32 m_NumActiveInsts;

    iwsfixed m_MasterVol;
    iwsfixed m_MasterPan;
    iwsfixed m_MasterPitch;
    uint16 m_Flags;
    CIwSoundGroup* m_GroupIdentity;
    CIwSoundParams* m_ParamsIdentity;




    static CIwChannelPCM8* s_ChannelsPCM8;
    static CIwChannelPCM16* s_ChannelsPCM16;
    static CIwChannelADPCM* s_ChannelsADPCM;


    friend class CIwSoundGroup;
    friend class CIwSoundSpec;

    friend class CIwMenuItemSound;

};
extern CIwSoundManager* g_IwSoundManager; inline CIwSoundManager* IwGetSoundManager() {return g_IwSoundManager;};






class CIwMenuItemSound : public CIwMenuItem
{
public:
    CIwMenuItemSound() : CIwMenuItem("", "IwSound", 0, CIwMenuItem::MENU) {};
    void Select();
};
# 18 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSound.h" 2
# 1 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundData.h" 1
# 21 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundData.h"
# 1 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSound.h" 1
# 22 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundData.h" 2







class CIwSoundData : public CIwResource
{



public:

    typedef CIwArray<CIwSoundData*> Array; typedef Array::iterator ArrayIt; const char* GetClassName() const;;

    CIwSoundData();
    CIwSoundData(IwSoundDataFormat format, uint32 pitch) ;

    ~CIwSoundData();


    void SetSampleCount(uint32 nSamples) { m_SampleCount = nSamples; }
    uint32 GetSampleCount() { return m_SampleCount; }


    uint32 GetBufferSize() const;

    void SetBufferSize(uint32 nBytes);


    void GetData(CIwArray<int16>& array) const { array.Share((int16*)m_Samples, GetBufferSize()/2, GetBufferSize()/2); }
    void GetData(CIwArray<int8>& array) const { array.Share(m_Samples, GetBufferSize(), GetBufferSize()); }


    uint32 GetRecPitch() const { return m_RecPitch; }



    void SwitchDataSign();

    virtual void Serialise();




protected:
    uint32 m_BufferSize;
    uint32 m_SampleCount;
    int8* m_Samples;
    uint32 m_RecPitch;
    IwSoundDataFormat m_Format;


    friend class CIwSoundSpec;
    friend class CIwResHandlerWAV;
    friend class CIwSoundDataADPCM;
};






class CIwSoundDataADPCM : public CIwSoundData
{
public:
    typedef CIwArray<CIwSoundDataADPCM*> Array; typedef Array::iterator ArrayIt; const char* GetClassName() const;;

    CIwSoundDataADPCM();

    CIwSoundDataADPCM(IwSoundDataFormat format, uint32 pitch, uint32 samplesPerBlock, uint32 blockAlign);

    virtual void Serialise();

    uint32 GetSamplesPerBlock() { return m_SamplesPerBlock; }

    uint32 GetBlockAlignment() { return m_BlockAlign; }


protected:
    uint32 m_SamplesPerBlock;
    uint32 m_BlockAlign;

};
# 19 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSound.h" 2
# 1 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundGroup.h" 1
# 22 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundGroup.h"
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h" 1
       
# 20 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
# 1 "c:/marmalade/6.2/modules/iwutil/h/IwTextParser.h" 1
       
# 54 "c:/marmalade/6.2/modules/iwutil/h/IwTextParser.h"
class CIwTextParser
{
public:
# 70 "c:/marmalade/6.2/modules/iwutil/h/IwTextParser.h"
    virtual void* ParseFile(const char* pPathname, bool allowNonExist = false);







    virtual void* ParseString(const char* pString, const char* pPathname = __null);





    typedef void(*TokenFn)(CIwTextParser* pImp);


    inline bool IsWhitespace(char c) {return (c == ' ') || (c == '\t') || (c == '\n') || (c == '\r');}


    inline bool IsTerminator(char c) {return (c == ' ') || (c == '\t') || (c == '\n') || (c == '\r') || (c == '\0');}


    struct TokenInfo
    {
        const char* m_String;
        TokenFn m_Fn;
    };



    typedef CIwArray<TokenInfo> TokenInfoArray;


    typedef TokenInfoArray::iterator TokenInfoArrayIt;


    struct State
    {
        s3eFile* m_File;
        const char* m_Pathname;
        const char* m_CharStart;
        const char* m_Char;
        int32 m_TokenOfs;
        char m_Token[200];
        void* m_ReturnValue;
        int32 m_Line;
        int32 m_Col;
    };


    typedef CIwArray<State> StateArray;


    typedef StateArray::iterator StateArrayIt;

    CIwTextParser();
    virtual ~CIwTextParser();






    void AddTokenFunction(const char* pString, TokenFn pFn);





    inline void _PushState(const State& state) {m_StateStack.push_back(state);}




    inline void _PopState() {m_StateStack.pop_back();}





    inline State* _GetState()
    {
        do { static uint8 _s_IwAssertIgnoreThis = 0;; if (!(m_StateStack.size())) { if( (IwDebugAssertIsChannelOn("UTIL")) && (_s_IwAssertIgnoreThis==0)) { IwDebugAssertSetUID(1388); IwDebugAssertSetMessage ("Parser state stack is empty"); switch (IwDebugAssertShow("m_StateStack.size()", "c:/marmalade/6.2/modules/iwutil/h/IwTextParser.h", 153, (1))) { case S3E_ERROR_SHOW_STOP: do { if (s3eDebugIsDebuggerPresent()) do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); else IwDebugExit(); } while(0); break; case S3E_ERROR_SHOW_IGNORE: _s_IwAssertIgnoreThis = 1;; break; default:; } IwDebugAssertSetUID(0); } return __null; } } while (0);
        return m_StateStack.end() - 1;
    }





    inline void SetReturnValue(void* value)
    {
        State* pState = _GetState();
        pState->m_ReturnValue = value;
    }






    inline State* _GetStateNoAssert()
    {
        if (!m_StateStack.size())
            return __null;
        else
            return m_StateStack.end() - 1;
    }





    bool ParseToken();





    char ReadChar(bool checkValid = true);

    void UnreadChar();







    bool MatchStrings(const char* pChar0, const char* pChar1);
# 209 "c:/marmalade/6.2/modules/iwutil/h/IwTextParser.h"
    bool MatchStringsIgnoreCase(const char* pChar0, const char* pChar1);




    void SkipBackToken();

private:
    void _Parse();
    TokenInfoArray m_TokenInfos;
    StateArray m_StateStack;
    friend void IwTextParserAssertCallback(char* pBuffer);
};
# 21 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h" 2
# 41 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
class CIwParseable;
class CIwTextParserITX;
# 65 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
class CIwTextParserITX : public CIwTextParser
{
public:




    typedef CIwString<40> Field;




    typedef CIwArray<Field> FieldArray;




    typedef FieldArray::iterator FieldArrayIt;




    CIwTextParserITX();




    ~CIwTextParserITX();
# 102 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    virtual void* ParseFile(const char* pPathname, bool allowNonExist = false);
# 116 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void SkipScope();
# 139 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    inline void SetAssertOnUnrecognisedTokens(bool as)
    {
        m_AssertOnUnrecognisedTokens = as;
    }
# 154 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadString(char* pBuffer, uint32 buffSize, bool checkValid = true);
# 163 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadString(CIwStringS& string, bool checkValid = true) { ReadString((char*)string.c_str(), 32, checkValid); }
# 172 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadString(CIwStringL& string, bool checkValid = true) { ReadString((char*)string.c_str(), 160, checkValid); }
# 182 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    char* ReadString(bool checkValid = true);
# 191 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void PeekString(char* pString, int32 len, bool checkValid = true);
# 200 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadStringHash(uint32* pValue);
# 211 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadScope(char* pBuffer, uint32 buffSize);
# 221 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadLine(char* pBuffer, uint32 buffSize);
# 230 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    static void FieldStripQuotes(Field& f);
# 241 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    static void FilterString(const char*& pChar, FieldArray& fields, const char* fieldBreaks, const char* stringBreaks);
# 252 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    static uint32 FilterStringGetFlags(const char* pChar, const char** ppNames);
# 264 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    static bool FilterStringSetFlags(const char* pChar, const char** ppNames, uint32& flags);
# 276 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    static bool FilterStringResetFlags(const char* pChar, const char** ppNames, uint32& flags);
# 287 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    static bool FilterStringGetEnum(const char* pChar, const char** ppNames, uint32& value);
# 298 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    static bool FilterStringGetEnumAsserted(const char* pChar, const char** ppNames, uint32& value);
# 307 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadInt32(int32* pValue);
# 316 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadUInt32(uint32* pValue);
# 325 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadInt16(int16* pValue);
# 334 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadUInt16(uint16* pValue);
# 343 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadInt8(int8* pValue);
# 352 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadUInt8(uint8* pValue);
# 361 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadBool(bool* pValue);

    enum IntType
    {
        S_8 = 0,
        U_8,
        S_16,
        U_16,
        S_32,
        U_32
    };
# 382 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    inline void ReadInt32Array(int32* pValue, uint32 maxVals) {ReadIntArray(pValue, maxVals, S_32);}
# 393 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    inline void ReadUInt32Array(uint32* pValue, uint32 maxVals) {ReadIntArray(pValue, maxVals, U_32);}
# 404 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    inline void ReadInt16Array(int16* pValue, uint32 maxVals) {ReadIntArray(pValue, maxVals, S_16);}
# 415 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    inline void ReadUInt16Array(uint16* pValue, uint32 maxVals) {ReadIntArray(pValue, maxVals, U_16);}
# 426 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    inline void ReadInt8Array(int8* pValue, uint32 maxVals) {ReadIntArray(pValue, maxVals, S_8);}
# 437 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    inline void ReadUInt8Array(uint8* pValue, uint32 maxVals) {ReadIntArray(pValue, maxVals, U_8);}
# 446 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadFloat(float* pValue);
# 455 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadDouble(double* pValue);
# 466 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadFloatArray(float* pValue, uint32 maxVals);
# 477 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadDoubleArray(double* pValue, uint32 maxVals);
# 488 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadFixed(iwfixed* pValue, uint32 shift = 12);
# 500 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadFixedArray(iwfixed* pValue, uint32 maxVals, uint32 shift = 12);






    void ReadAngleRadians(iwangle* pValue);
# 516 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadAngleDegrees(iwangle* pValue);
# 525 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    CIwManaged* GetObject(int32 level = 0);







    void PushObject(CIwManaged* pObject);







    CIwManaged* PopObject();
# 553 "c:/marmalade/6.2/modules/iwutil/h/IwTextParserITX.h"
    void ReadManagedReference(CIwManaged** pPointer);






    inline void StoreObject(CIwManaged* pObject)
    {
        m_NamedObjects.push_back(pObject);
    }


    void ResolveReferences();

private:

    class CIwReference
    {
    public:
        CIwReference() : m_pPointer(__null), m_Hash(0) {};
        CIwManaged** m_pPointer;
        uint32 m_Hash;



        CIwStringS m_DebugName;

    };

    void ReadIntArray(void *pValue, uint32 maxVals, IntType type);


    CIwManaged* ForceCurrentObject(CIwManaged* pObj);

    char m_String[0x100];
    CIwArray<CIwManaged*> m_ObjectStack;
    CIwArray<CIwManaged*> m_NamedObjects;
    CIwArray<CIwReference> m_UnresolvedReferences;
    bool m_AssertOnUnrecognisedTokens;

    friend class CIwManaged;
    friend void _ITXReadUnknown(CIwTextParser* _pParser);
};

extern CIwTextParserITX* g_IwTextParserITX;




inline CIwTextParserITX* IwGetTextParserITX()
{

    if( !g_IwTextParserITX )
        do { IwDebugErrorShow ("To use the text parser in non-resource-building builds you must explicitly instantiate it using \"new CIwTextParserITX();\"") ; do {if (s3eDebugIsDebuggerPresent()) *(int*)0xfffffff4 = 0; } while(0); } while(0);

    return g_IwTextParserITX;
}
# 23 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundGroup.h" 2


struct s3eSoundEndSampleInfo;




class CIwSoundGroup : public CIwResource
{
public:

    enum
    {
        DIRTY_F = (1 << 0),
        KILL_OLDEST_F = (1 << 1),
    };

    typedef CIwArray<CIwSoundGroup*> Array; typedef Array::iterator ArrayIt; const char* GetClassName() const;;

    CIwSoundGroup();
    virtual void Serialise();
    virtual bool ParseAttribute(CIwTextParserITX* pParser, const char* pAttrName);
    virtual void ParseClose(CIwTextParserITX* pParser);





    inline iwsfixed GetVol() const {return m_Vol;}


    inline iwsfixed GetPan() const {return m_Pan;}


    inline iwsfixed GetPitch() const {return m_Pitch;}


    inline void SetVol(iwsfixed vol) {m_Vol = vol; m_Flags |= DIRTY_F;}


    inline void SetPan(iwsfixed pan) {m_Pan = pan; m_Flags |= DIRTY_F;}


    inline void SetPitch(iwsfixed pitch) {m_Pitch = pitch; m_Flags |= DIRTY_F;}


    inline uint16 GetFlags() const {return m_Flags;}


    inline void SetMaxPolyphony(uint16 m) {m_MaxPolyphony = m;}


    inline uint16 GetMaxPolyphony() const {return m_MaxPolyphony;}


    inline uint16 GetCurrPolyphony() const {return m_CurrPolyphony;}


    void Stop();


    void Pause();


    void Resume();




    void KillOldestInst(bool alreadyGotNewInst);


private:
    iwsfixed m_Vol;
    iwsfixed m_Pan;
    iwsfixed m_Pitch;
    uint16 m_MaxPolyphony;
    uint16 m_CurrPolyphony;
    uint16 m_Flags;
    uint16 pad;


    friend class CIwSoundManager;
    friend class CIwSoundSpec;
    friend int _IwSoundSpec_EndSampleCB(s3eSoundEndSampleInfo* esInfo, void* userData);
};
# 20 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSound.h" 2
# 1 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundInst.h" 1
# 24 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundInst.h"
class CIwSoundSpec;
struct s3eSoundEndSampleInfo;





class CIwSoundInst
{
public:

    typedef void(*IwSoundInstEndSampleCB)(CIwSoundInst* pInst);


    enum
    {
        DIRTY_F = (1 << 0),
        COMPLETE_F = (1 << 1),
        FREE_F = (1 << 2),
    };

    CIwSoundInst();





    inline uint16 GetFlags() const {return m_Flags;}


    inline const CIwSoundSpec* GetSpec() const {return m_Spec;}


    inline const uint16 GetChanID() const {return m_ChanID;}


    inline iwsfixed GetVol() const {return m_Vol;}


    inline iwsfixed GetPan() const {return m_Pan;}


    inline iwsfixed GetPitch() const {return m_Pitch;}


    void SetVol(iwsfixed vol);


    void SetPan(iwsfixed pan);


    void SetPitch(iwsfixed pitch);


    inline uint16 GetCount() const {return m_Count;}


    void Stop();


    void Pause();


    void Resume();


    bool IsPlaying() const;


    inline void SetEndSampleCB(IwSoundInstEndSampleCB cb) {m_EndSampleCB = cb;}


    inline IwSoundInstEndSampleCB GetEndSampleCB() const {return m_EndSampleCB;}

    uint16 GetPlayID() { return m_PlayID; }






private:
    CIwSoundSpec* m_Spec;
    iwsfixed m_Vol;
    iwsfixed m_Pan;
    iwsfixed m_Pitch;
    uint16 m_Flags;
    uint16 m_ChanID;
    uint16 m_Count;
    uint16 m_PlayID;
    IwSoundInstEndSampleCB m_EndSampleCB;


    friend class CIwSoundGroup;
    friend class CIwSoundManager;
    friend class CIwSoundSpec;
    friend int _IwSoundSpec_EndSampleCB(s3eSoundEndSampleInfo* esInfo, void* userData);
};
# 21 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSound.h" 2
# 1 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundParams.h" 1
# 29 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSoundParams.h"
class CIwSoundParams
{
public:
    CIwSoundParams();


    iwsfixed m_Vol;
    iwsfixed m_Pan;
    iwsfixed m_Pitch;
    uint16 m_Pad;
};
# 22 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/libs/soundengine/h/IwSound.h" 2
# 5 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/h/audio.h" 2

enum AudioState
{
 PLAYING=0,
 PAUSED=1,
 STOPPED=2
};

class Audio
{
public:

 Audio();
 virtual ~Audio();
 int32 static AudioStopCallback(void* systemData, void* userData);
 virtual void Play();
 void Stop();
 void Pause();
 void Resume();
 bool Update(bool play);
 void Init(char* filename);
 AudioState static g_Status_RN;
 s3eBool g_MP3Supported;
 void* g_AudioData;
 int g_AudioSize;

private:
 bool _Play;
 char* _Filename;
 s3eFile * _FileHandle;
};
# 2 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/src/audio.cpp" 2

# 1 "c:/marmalade/6.2/s3e/h/std/c++/iostream" 1
# 24 "c:/marmalade/6.2/s3e/h/std/c++/iostream"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_prolog.h" 1
# 16 "c:/marmalade/6.2/s3e/h/std/c++/stl/_prolog.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/config/_prolog.h" 1
# 17 "c:/marmalade/6.2/s3e/h/std/c++/stl/_prolog.h" 2
# 25 "c:/marmalade/6.2/s3e/h/std/c++/iostream" 2



         




# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_iosfwd.h" 1
# 22 "c:/marmalade/6.2/s3e/h/std/c++/stl/_iosfwd.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/char_traits.h" 1
# 31 "c:/marmalade/6.2/s3e/h/std/c++/stl/char_traits.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/cstring" 1
# 27 "c:/marmalade/6.2/s3e/h/std/c++/cstring"
# 1 "c:/marmalade/6.2/s3e/h/ext/../std/string.h" 1
# 28 "c:/marmalade/6.2/s3e/h/std/c++/cstring" 2



namespace _STL {
# 1 "c:/marmalade/6.2/s3e/h/std/c++/using/cstring" 1
using ::size_t;
# 17 "c:/marmalade/6.2/s3e/h/std/c++/using/cstring"
 using ::memmove;
 using ::memcpy;




using ::memchr;
using ::strchr;
using ::strpbrk;
using ::strrchr;
using ::strstr;


using ::memcmp;
using ::memset;

using ::strcat;


using ::strcmp;


using ::strcoll;

using ::strcpy;

using ::strcspn;
using ::strerror;
using ::strlen;
using ::strncat;
using ::strncmp;

using ::strncpy;
using ::strspn;

using ::strtok;
using ::strxfrm;
# 33 "c:/marmalade/6.2/s3e/h/std/c++/cstring" 2
}
# 32 "c:/marmalade/6.2/s3e/h/std/c++/stl/char_traits.h" 2
# 46 "c:/marmalade/6.2/s3e/h/std/c++/stl/char_traits.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/type_traits.h" 1
# 62 "c:/marmalade/6.2/s3e/h/std/c++/stl/type_traits.h"
namespace _STL {

struct __true_type {};
struct __false_type {};


template <int _Is> struct __bool2type {
  typedef __false_type _Ret;
};

template<>
struct __bool2type<1> { typedef __true_type _Ret; };

template<>
struct __bool2type<0> { typedef __false_type _Ret; };


template <class _P1, class _P2, class _P3>
struct _Land3 {
  typedef __false_type _Ret;
};

template<>
struct _Land3<__true_type, __true_type, __true_type> {
  typedef __true_type _Ret;
};



template <class _Tp> struct __type_traits;
template <int _IsPOD> struct __type_traits_aux {
   typedef __false_type has_trivial_default_constructor;
   typedef __false_type has_trivial_copy_constructor;
   typedef __false_type has_trivial_assignment_operator;
   typedef __false_type has_trivial_destructor;
   typedef __false_type is_POD_type;
};

template<>
struct __type_traits_aux<0> {
   typedef __false_type has_trivial_default_constructor;
   typedef __false_type has_trivial_copy_constructor;
   typedef __false_type has_trivial_assignment_operator;
   typedef __false_type has_trivial_destructor;
   typedef __false_type is_POD_type;
};

template<>
struct __type_traits_aux<1> {
   typedef __true_type has_trivial_default_constructor;
   typedef __true_type has_trivial_copy_constructor;
   typedef __true_type has_trivial_assignment_operator;
   typedef __true_type has_trivial_destructor;
   typedef __true_type is_POD_type;
};
# 188 "c:/marmalade/6.2/s3e/h/std/c++/stl/type_traits.h"
template <class _Tp>
struct __type_traits {
   typedef __true_type this_dummy_member_must_be_first;
# 206 "c:/marmalade/6.2/s3e/h/std/c++/stl/type_traits.h"
   typedef __false_type has_trivial_default_constructor;
   typedef __false_type has_trivial_copy_constructor;
   typedef __false_type has_trivial_assignment_operator;
   typedef __false_type has_trivial_destructor;
   typedef __false_type is_POD_type;
};


template <class _Tp> struct _IsPtr { enum { _Ret = 0 }; };
template <class _Tp> struct _IsPtrType {
  static __false_type _Ret() { return __false_type();}
};
template <class _Tp1, class _Tp2> struct _BothPtrType {
  static __false_type _Ret() { return __false_type();}
};

template <class _Tp1, class _Tp2>
struct _IsSame { enum { _Ret = 0 }; };





template <class _Tp> struct _IsPtr<_Tp*> { enum { _Ret = 1 }; };
template <class _Tp> struct _IsPtrType<_Tp*> {
  static __true_type _Ret() { return __true_type();}
};
template <class _Tp1, class _Tp2> struct _BothPtrType<_Tp1*, _Tp2*> {
  static __true_type _Ret() { return __true_type();}
};
template <class _Tp>
struct _IsSame<_Tp, _Tp> { enum { _Ret = 1 }; };
# 246 "c:/marmalade/6.2/s3e/h/std/c++/stl/type_traits.h"
template<> struct __type_traits<bool> : __type_traits_aux<1> {};

template<> struct __type_traits<char> : __type_traits_aux<1> {};

template<> struct __type_traits<signed char> : __type_traits_aux<1> {};

template<> struct __type_traits<unsigned char> : __type_traits_aux<1> {};




template<> struct __type_traits<short> : __type_traits_aux<1> {};
template<> struct __type_traits<unsigned short> : __type_traits_aux<1> {};
template<> struct __type_traits<int> : __type_traits_aux<1> {};
template<> struct __type_traits<unsigned int> : __type_traits_aux<1> {};
template<> struct __type_traits<long> : __type_traits_aux<1> {};
template<> struct __type_traits<unsigned long> : __type_traits_aux<1> {};


template<> struct __type_traits<long long> : __type_traits_aux<1> {};
template<> struct __type_traits<unsigned long long> : __type_traits_aux<1> {};


template<> struct __type_traits<float> : __type_traits_aux<1> {};
template<> struct __type_traits<double> : __type_traits_aux<1> {};


template<> struct __type_traits<long double> : __type_traits_aux<1> {};



template <class _Tp> struct __type_traits<_Tp*> : __type_traits_aux<1> {};





template <class _Tp> struct _Is_integer {
  typedef __false_type _Integral;
};



template<> struct _Is_integer<bool> {
  typedef __true_type _Integral;
};



template<> struct _Is_integer<char> {
  typedef __true_type _Integral;
};



template<> struct _Is_integer<signed char> {
  typedef __true_type _Integral;
};


template<> struct _Is_integer<unsigned char> {
  typedef __true_type _Integral;
};
# 318 "c:/marmalade/6.2/s3e/h/std/c++/stl/type_traits.h"
template<> struct _Is_integer<short> {
  typedef __true_type _Integral;
};

template<> struct _Is_integer<unsigned short> {
  typedef __true_type _Integral;
};

template<> struct _Is_integer<int> {
  typedef __true_type _Integral;
};

template<> struct _Is_integer<unsigned int> {
  typedef __true_type _Integral;
};

template<> struct _Is_integer<long> {
  typedef __true_type _Integral;
};

template<> struct _Is_integer<unsigned long> {
  typedef __true_type _Integral;
};



template<> struct _Is_integer<long long> {
  typedef __true_type _Integral;
};

template<> struct _Is_integer<unsigned long long> {
  typedef __true_type _Integral;
};



template <class _Tp1, class _Tp2>
struct _OKToMemCpy {
  enum { _Same = _IsSame<_Tp1,_Tp2>::_Ret } ;
  typedef typename __type_traits<_Tp1>::has_trivial_assignment_operator _Tr1;
  typedef typename __type_traits<_Tp2>::has_trivial_assignment_operator _Tr2;
  typedef typename __bool2type< _Same >::_Ret _Tr3;
  typedef typename _Land3<_Tr1, _Tr2, _Tr3>::_Ret _Type;
  static _Type _Ret() { return _Type(); }
};

template <class _Tp1, class _Tp2>
inline _OKToMemCpy<_Tp1, _Tp2> _IsOKToMemCpy(_Tp1*, _Tp2*) {
  return _OKToMemCpy<_Tp1, _Tp2>();
}

template <class _Tp>
struct _IsPOD {
  typedef typename __type_traits<_Tp>::is_POD_type _Type;
  static _Type _Ret() { return _Type(); }
};

template <class _Tp>
inline _IsPOD<_Tp> _Is_POD (_Tp*) { return _IsPOD<_Tp>(); }
# 411 "c:/marmalade/6.2/s3e/h/std/c++/stl/type_traits.h"
}
# 47 "c:/marmalade/6.2/s3e/h/std/c++/stl/char_traits.h" 2



# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_cwchar.h" 1
# 21 "c:/marmalade/6.2/s3e/h/std/c++/stl/_cwchar.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/cwchar" 1
# 49 "c:/marmalade/6.2/s3e/h/std/c++/cwchar"
# 1 "c:/marmalade/6.2/s3e/h/ext/../std/wchar.h" 1
# 17 "c:/marmalade/6.2/s3e/h/ext/../std/wchar.h"
# 1 "c:/marmalade/6.2/s3e/h/std/time.h" 1
# 19 "c:/marmalade/6.2/s3e/h/std/time.h"
typedef long time_t;





typedef long clock_t;




struct tm
{
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
};



struct timespec
{
    time_t tv_sec;
    long int tv_nsec;
};

extern "C" {






time_t time(time_t *t);

void tzset(void);

char *asctime(const struct tm *tm);
char *asctime_r(const struct tm *tm, char *buf);

char *ctime(const time_t *timep);
char *ctime_r(const time_t *timep, char *buf);

struct tm *gmtime(const time_t *timep);
struct tm *gmtime_r(const time_t *timep, struct tm *result);

struct tm *localtime(const time_t *timep);
struct tm *localtime_r(const time_t *timep, struct tm *result);

time_t mktime(struct tm *tm);

size_t strftime(char *s, size_t max, const char *format, const struct tm *tm);

clock_t clock(void);

double difftime(time_t time1, time_t time0);

int nanosleep(const struct timespec *req, struct timespec *rem);



    extern char *_tzname[2];
    extern int _daylight;
    extern long int _timezone;
# 101 "c:/marmalade/6.2/s3e/h/std/time.h"
typedef int clockid_t;

int clock_getres(clockid_t clk_id, struct timespec *res);

int clock_gettime(clockid_t clk_id, struct timespec *tp);

int clock_settime(clockid_t clk_id, const struct timespec *tp);

}

# 1 "c:/marmalade/6.2/s3e/h/std/sys/time.h" 1
# 16 "c:/marmalade/6.2/s3e/h/std/sys/time.h"
# 1 "c:/marmalade/6.2/s3e/h/std/time.h" 1
# 17 "c:/marmalade/6.2/s3e/h/std/sys/time.h" 2



extern "C" {

typedef long suseconds_t;
struct timeval
{
    time_t tv_sec;
    suseconds_t tv_usec;
};

struct _timezone
{
    int tz_minuteswest;
    int tz_dsttime;
};

int gettimeofday(struct timeval *tv, struct _timezone *tz);
int settimeofday(const struct timeval *tv , const struct _timezone *tz);

int utimes(const char *filename, const struct timeval times[2]);

}
# 112 "c:/marmalade/6.2/s3e/h/std/time.h" 2
# 18 "c:/marmalade/6.2/s3e/h/ext/../std/wchar.h" 2
# 1 "c:/marmalade/6.2/s3e/h/std/wctype.h" 1
# 18 "c:/marmalade/6.2/s3e/h/std/wctype.h"
extern "C" {

typedef const int32* wctrans_t;

wctype_t wctype(const char *name);
wctrans_t wctrans(const char *name);
int iswctype(wint_t wc, wctype_t desc);
wint_t towctrans(wint_t wc, wctrans_t desc);

int towupper(int c);
int towlower(int c);
int iswalnum(int c);
int iswalpha(int c);
int iswascii(int c);
int iswblank(int c);
int iswcntrl(int c);
int iswdigit(int c);
int iswgraph(int c);
int iswlower(int c);
int iswprint(int c);
int iswpunct(int c);
int iswspace(int c);
int iswupper(int c);
int iswxdigit(int c);

}
# 19 "c:/marmalade/6.2/s3e/h/ext/../std/wchar.h" 2


extern "C" {



typedef int mbstate_t;

wchar_t fgetwc(FILE *stream);
wchar_t *fgetws(wchar_t *ws, int n, FILE *stream);
wchar_t fputwc(wchar_t wc, FILE *stream);
wchar_t putwc(wchar_t wc, FILE *stream);
wchar_t getwc(FILE *stream);
wchar_t getwchar(void);
wchar_t ungetwc(wchar_t wc, FILE *stream);

int fputws(const wchar_t *ws, FILE *stream);
int fwide(FILE *stream, int mode);

int mbsinit(const mbstate_t *ps);
wchar_t btowc(int c);
size_t mbrlen(const char *s, size_t n, mbstate_t *ps);
size_t mbsrtowcs(wchar_t *dest, const char **src, size_t len, mbstate_t *ps);
size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps);
wchar_t putwchar(wchar_t wc);
wchar_t *wmemset(wchar_t *wcs, wchar_t wc, size_t n);
wchar_t *wcspbrk(const wchar_t *wcs, const wchar_t *accept);
wchar_t *wcsrchr(const wchar_t *wcs, wchar_t wc);
wchar_t *wmemchr(const wchar_t *s, wchar_t c, size_t n);
int wmemcmp(const wchar_t *s1, const wchar_t *s2, size_t n);
size_t wcslen(const wchar_t *s);
size_t wcsnlen(const wchar_t *s, size_t n);
size_t wcsrtombs(char *dest, const wchar_t **src, size_t len, mbstate_t *ps);
wchar_t *wmemmove(wchar_t *dest, const wchar_t *src, size_t n);
wchar_t *wmemcpy(wchar_t *dest, const wchar_t *src, size_t n);
wchar_t *wcsstr(const wchar_t *haystack, const wchar_t *needle);
wchar_t *wcschr(const wchar_t *wcs, wchar_t wc);
size_t wcsspn(const wchar_t *wcs, const wchar_t *accept);
wchar_t *wcstok(wchar_t *wcs, const wchar_t *delim, wchar_t **ptr);
wchar_t *wcsncpy(wchar_t *dest, const wchar_t *src, size_t n);
wchar_t *wcscat(wchar_t *dest, const wchar_t *src);
wchar_t *wcscpy(wchar_t *dest, const wchar_t *src);
size_t wcsxfrm (wchar_t *s1, const wchar_t *s2, size_t n);
float wcstof(const wchar_t *nptr, wchar_t **endptr);

int wcscoll (const wchar_t *s1, const wchar_t *s2);

int wprintf(const wchar_t *format, ...);
int fwprintf(FILE *stream, const wchar_t *format, ...);
int swprintf(wchar_t *wcs, size_t maxlen, const wchar_t *format, ...);

int wscanf(const wchar_t *format, ...);
int fwscanf(FILE *stream, const wchar_t *format, ...);
int swscanf(const wchar_t *str, const wchar_t *format, ...);

size_t wcrtomb(char *s, wchar_t wc, mbstate_t *ps);
int wcscmp(const wchar_t *s1, const wchar_t *s2);
int wcsncmp(const wchar_t *s1, const wchar_t *s2, size_t n);
size_t wcsftime(wchar_t *s, size_t maxsize, const wchar_t *format, const struct tm *tp);
int wctob(wint_t c);
size_t wcscspn(const wchar_t *wcs, const wchar_t *reject);
wchar_t *wcsncat(wchar_t *dest, const wchar_t *src, size_t n);

int64 wcstoll(wchar_t *nptr, wchar_t **endptr, int base);
uint64 wcstoull(wchar_t *nptr, wchar_t **endptr, int base);
long int wcstol(const wchar_t *nptr, wchar_t **endptr, int base);
unsigned long int wcstoul(const wchar_t *nptr, wchar_t **endptr, int base);
double wcstod(const wchar_t *nptr, wchar_t **endptr);
long double wcstold(wchar_t *nptr, wchar_t **endptr);

int vwprintf(const wchar_t *format, va_list args);
int vfwprintf(FILE *stream, const wchar_t *format, va_list args);
int vswprintf(wchar_t *wcs, size_t maxlen, const wchar_t *format, va_list args);

int vfwscanf(FILE *s, const wchar_t *format, va_list arg);
int vswscanf(wchar_t *s, wchar_t *format, va_list arg);
int vwscanf(wchar_t *format, va_list arg);






}
# 50 "c:/marmalade/6.2/s3e/h/std/c++/cwchar" 2
# 107 "c:/marmalade/6.2/s3e/h/std/c++/cwchar"
namespace _STL {





using ::wint_t;






using ::size_t;


using ::mbstate_t;
# 147 "c:/marmalade/6.2/s3e/h/std/c++/cwchar"
using ::fgetwc;
using ::fgetws;
using ::fputwc;
using ::fputws;





using ::fwide;

using ::fwprintf;
using ::fwscanf;
using ::getwchar;



using ::getwc;
using ::ungetwc;

using ::putwc;
using ::putwchar;




using ::swprintf;
using ::swscanf;
using ::vfwprintf;
using ::vwprintf;
using ::vswprintf;


using ::wcsftime;

using ::wcstok;




using ::wcscat;
using ::wcsrchr;
using ::wcscmp;
using ::wcscoll;

using ::wcscpy;
using ::wcscspn;

using ::wcslen;
using ::wcsncat;
using ::wcsncmp;
using ::wcsncpy;
using ::wcspbrk;
using ::wcschr;

using ::wcsspn;
using ::wcsxfrm;





using ::wcstod;
using ::wcstol;





using ::wcsstr;
using ::wmemchr;




using ::wctob;
using ::wmemcmp;

using ::wmemmove;
using ::wprintf;
using ::wscanf;



using ::wmemcpy;
using ::wmemset;



}
# 22 "c:/marmalade/6.2/s3e/h/std/c++/stl/_cwchar.h" 2
# 51 "c:/marmalade/6.2/s3e/h/std/c++/stl/char_traits.h" 2


namespace _STL {



template <class _Tp> class allocator;
# 67 "c:/marmalade/6.2/s3e/h/std/c++/stl/char_traits.h"
typedef long streamoff;


typedef ptrdiff_t streamsize;




template <class _StateT> class fpos
{
public:
  fpos(streamoff __pos) : _M_pos(__pos), _M_st(_StateT()) {}
  fpos() : _M_pos(0), _M_st(_StateT()) {}

  operator streamoff() const { return _M_pos; }

  bool operator==(const fpos<_StateT>& __y) const
    { return _M_pos == __y._M_pos; }
  bool operator!=(const fpos<_StateT>& __y) const
    { return _M_pos != __y._M_pos; }

  fpos<_StateT>& operator+=(streamoff __off) {
    _M_pos += __off;
    return *this;
  }
  fpos<_StateT>& operator-=(streamoff __off) {
    _M_pos -= __off;
    return *this;
  }

  fpos<_StateT> operator+(streamoff __off) {
    fpos<_StateT> __tmp(*this);
    __tmp += __off;
    return __tmp;
  }
  fpos<_StateT> operator-(streamoff __off) {
    fpos<_StateT> __tmp(*this);
    __tmp -= __off;
    return __tmp;
  }

public:
  _StateT state() const { return _M_st; }
  void state(_StateT __st) { _M_st = __st; }
private:
  streamoff _M_pos;
  _StateT _M_st;
};

typedef fpos<mbstate_t> streampos;
typedef fpos<mbstate_t> wstreampos;




template <class _CharT, class _IntT> class __char_traits_base {
public:
  typedef _CharT char_type;
  typedef _IntT int_type;

  typedef streamoff off_type;
  typedef streampos pos_type;



  typedef mbstate_t state_type;



  static void assign(char_type& __c1, const char_type& __c2) { __c1 = __c2; }
  static bool eq(const _CharT& __c1, const _CharT& __c2)
    { return __c1 == __c2; }
  static bool lt(const _CharT& __c1, const _CharT& __c2)
    { return __c1 < __c2; }

  static int compare(const _CharT* __s1, const _CharT* __s2, size_t __n) {
    for (size_t __i = 0; __i < __n; ++__i)
      if (!eq(__s1[__i], __s2[__i]))
        return __s1[__i] < __s2[__i] ? -1 : 1;
    return 0;
  }

  static size_t length(const _CharT* __s) {
    const _CharT _NullChar = _CharT();
    size_t __i;
    for (__i = 0; !eq(__s[__i], _NullChar); ++__i)
      {}
    return __i;
  }

  static const _CharT* find(const _CharT* __s, size_t __n, const _CharT& __c) {
    for ( ; __n > 0 ; ++__s, --__n)
      if (eq(*__s, __c))
        return __s;
    return 0;
  }


  static _CharT* move(_CharT* __s1, const _CharT* __s2, size_t _Sz) {
    return (_Sz == 0 ? __s1 : (_CharT*)memmove(__s1, __s2, _Sz * sizeof(_CharT)));
  }

  static _CharT* copy(_CharT* __s1, const _CharT* __s2, size_t __n) {
    return (__n == 0 ? __s1 :
     (_CharT*)memcpy(__s1, __s2, __n * sizeof(_CharT)));
    }

  static _CharT* assign(_CharT* __s, size_t __n, _CharT __c) {
    for (size_t __i = 0; __i < __n; ++__i)
      __s[__i] = __c;
    return __s;
  }

  static int_type not_eof(const int_type& __c) {
    return !eq_int_type(__c, eof()) ? __c : static_cast<int_type>(0);
  }

  static char_type to_char_type(const int_type& __c) {
    return (char_type)__c;
  }

  static int_type to_int_type(const char_type& __c) {
    return (int_type)__c;
  }

  static bool eq_int_type(const int_type& __c1, const int_type& __c2) {
    return __c1 == __c2;
  }

  static int_type eof() {
    return (int_type)-1;

  }
};






template <class _CharT> class char_traits
  : public __char_traits_base<_CharT, _CharT>
{};



template<> class char_traits<char>
  : public __char_traits_base<char, int>
{
public:
  typedef char char_type;
  typedef int int_type;

  typedef streamoff off_type;

  typedef streampos pos_type;
  typedef mbstate_t state_type;



  static char to_char_type(const int& __c) {
    return (char)(unsigned char)__c;
  }

  static int to_int_type(const char& __c) {
    return (unsigned char)__c;
  }

  static int compare(const char* __s1, const char* __s2, size_t __n)
    { return memcmp(__s1, __s2, __n); }

  static size_t length(const char* __s) { return strlen(__s); }

  static void assign(char& __c1, const char& __c2) { __c1 = __c2; }

  static char* assign(char* __s, size_t __n, char __c)
    { memset(__s, __c, __n); return __s; }
};



template<> class char_traits<wchar_t>
  : public __char_traits_base<wchar_t, wint_t>
{};


}
# 23 "c:/marmalade/6.2/s3e/h/std/c++/stl/_iosfwd.h" 2


namespace _STL {

class ios_base;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_ios;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_streambuf;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_istream;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_ostream;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_iostream;

template <class _CharT, class _Traits = char_traits<_CharT>,
          class _Allocator = allocator<_CharT> >
class basic_stringbuf;

template <class _CharT, class _Traits = char_traits<_CharT>,
          class _Allocator = allocator<_CharT> >
class basic_istringstream;

template <class _CharT, class _Traits = char_traits<_CharT>,
          class _Allocator = allocator<_CharT> >
class basic_ostringstream;

template <class _CharT, class _Traits = char_traits<_CharT>,
          class _Allocator = allocator<_CharT> >
class basic_stringstream;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_filebuf;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_ifstream;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_ofstream;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_fstream;

template <class _CharT, class _Traits = char_traits<_CharT> >
class istreambuf_iterator;

template <class _CharT, class _Traits = char_traits<_CharT> >
class ostreambuf_iterator;

typedef basic_ios<char, char_traits<char> > ios;


typedef basic_ios<wchar_t, char_traits<wchar_t> > wios;



class locale;
# 95 "c:/marmalade/6.2/s3e/h/std/c++/stl/_iosfwd.h"
template <class _Facet> inline const _Facet& use_facet(const locale&);


template <class _CharT> class ctype;
template <class _CharT> class ctype_byname;
template <class _CharT> class collate;
template <class _CharT> class collate_byname;

template<> class ctype<char>;
template<> class ctype_byname<char>;
template<> class collate<char>;
template<> class collate_byname<char>;


template<> class ctype<wchar_t>;
template<> class ctype_byname<wchar_t>;
template<> class collate<wchar_t>;
template<> class collate_byname<wchar_t>;







typedef basic_istream<char, char_traits<char> > istream;
typedef basic_ostream<char, char_traits<char> > ostream;
typedef basic_iostream<char, char_traits<char> > iostream;
typedef basic_streambuf<char,char_traits<char> > streambuf;

typedef basic_stringbuf<char, char_traits<char>, allocator<char> > stringbuf;
typedef basic_istringstream<char, char_traits<char>, allocator<char> > istringstream;
typedef basic_ostringstream<char, char_traits<char>, allocator<char> > ostringstream;
typedef basic_stringstream<char, char_traits<char>, allocator<char> > stringstream;

typedef basic_filebuf<char, char_traits<char> > filebuf;
typedef basic_ifstream<char, char_traits<char> > ifstream;
typedef basic_ofstream<char, char_traits<char> > ofstream;
typedef basic_fstream<char, char_traits<char> > fstream;



typedef basic_streambuf<wchar_t, char_traits<wchar_t> > wstreambuf;
typedef basic_istream<wchar_t, char_traits<wchar_t> > wistream;
typedef basic_ostream<wchar_t, char_traits<wchar_t> > wostream;
typedef basic_iostream<wchar_t, char_traits<wchar_t> > wiostream;

typedef basic_stringbuf<wchar_t, char_traits<wchar_t>, allocator<wchar_t> > wstringbuf;
typedef basic_istringstream<wchar_t, char_traits<wchar_t>, allocator<wchar_t> > wistringstream;
typedef basic_ostringstream<wchar_t, char_traits<wchar_t>, allocator<wchar_t> > wostringstream;
typedef basic_stringstream<wchar_t, char_traits<wchar_t>, allocator<wchar_t> > wstringstream;

typedef basic_filebuf<wchar_t, char_traits<wchar_t> > wfilebuf;
typedef basic_ifstream<wchar_t, char_traits<wchar_t> > wifstream;
typedef basic_ofstream<wchar_t, char_traits<wchar_t> > wofstream;
typedef basic_fstream<wchar_t, char_traits<wchar_t> > wfstream;


}
# 34 "c:/marmalade/6.2/s3e/h/std/c++/iostream" 2
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istream.h" 1
# 27 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istream.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ios.h" 1
# 23 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ios.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ios_base.h" 1
# 22 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ios_base.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stdexcept" 1
# 29 "c:/marmalade/6.2/s3e/h/std/c++/stdexcept"
         







# 1 "c:/marmalade/6.2/s3e/h/std/c++/exception" 1
# 75 "c:/marmalade/6.2/s3e/h/std/c++/exception"
namespace _STL {


using __std_alias::exception;
using __std_alias::bad_exception;
# 106 "c:/marmalade/6.2/s3e/h/std/c++/exception"
}
# 38 "c:/marmalade/6.2/s3e/h/std/c++/stdexcept" 2







# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_alloc.h" 1
# 39 "c:/marmalade/6.2/s3e/h/std/c++/stl/_alloc.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/cstdlib" 1
# 27 "c:/marmalade/6.2/s3e/h/std/c++/cstdlib"
# 1 "c:/marmalade/6.2/s3e/h/ext/../std/stdlib.h" 1
# 28 "c:/marmalade/6.2/s3e/h/std/c++/cstdlib" 2
# 41 "c:/marmalade/6.2/s3e/h/std/c++/cstdlib"
namespace _STL {
using ::div_t;
using ::ldiv_t;
using ::size_t;


using ::abort;
using ::atexit;
using ::exit;
using ::getenv;
using ::calloc;
using ::free;
using ::malloc;
using ::realloc;
using ::atof;
using ::atoi;
using ::atol;
using ::mblen;
using ::mbstowcs;
using ::mbtowc;
using ::strtod;
using ::strtol;
using ::strtoul;
using ::system;


using ::wcstombs;
using ::wctomb;

using ::bsearch;
using ::qsort;




using ::div;
using ::labs;
using ::ldiv;
using ::rand;
using ::srand;

}


namespace _STL {



inline long abs(long __x) { return ::labs(__x); }


inline ldiv_t div(long __x, long __y) { return ::ldiv(__x, __y); }
# 103 "c:/marmalade/6.2/s3e/h/std/c++/cstdlib"
}
# 40 "c:/marmalade/6.2/s3e/h/std/c++/stl/_alloc.h" 2
# 48 "c:/marmalade/6.2/s3e/h/std/c++/stl/_alloc.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/cstdio" 1
# 35 "c:/marmalade/6.2/s3e/h/std/c++/cstdio"
# 1 "c:/marmalade/6.2/s3e/h/ext/../std/stdio.h" 1
# 36 "c:/marmalade/6.2/s3e/h/std/c++/cstdio" 2
# 58 "c:/marmalade/6.2/s3e/h/std/c++/cstdio"
namespace _STL {
using ::FILE;
using ::fpos_t;
using ::size_t;
# 72 "c:/marmalade/6.2/s3e/h/std/c++/cstdio"
using ::clearerr;
using ::fclose;
using ::feof;
using ::ferror;
using ::fflush;
using ::fgetc;
using ::fgetpos;
using ::fgets;
using ::fopen;
using ::fprintf;
using ::fputc;
using ::fputs;
using ::fread;
using ::freopen;
using ::fscanf;
using ::fseek;
using ::fsetpos;
using ::ftell;
using ::fwrite;


 using ::getc;
 using ::getchar;
 using ::putc;
 using ::putchar;


using ::gets;
using ::perror;
using ::printf;
using ::puts;
using ::remove;
using ::rename;
using ::rewind;
using ::scanf;
using ::setbuf;
using ::setvbuf;
using ::sprintf;
using ::sscanf;
using ::tmpfile;
using ::tmpnam;
using ::ungetc;
using ::vfprintf;
using ::vprintf;
using ::vsprintf;





}
# 49 "c:/marmalade/6.2/s3e/h/std/c++/stl/_alloc.h" 2
# 64 "c:/marmalade/6.2/s3e/h/std/c++/stl/_alloc.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_threads.h" 1
# 57 "c:/marmalade/6.2/s3e/h/std/c++/stl/_threads.h"
  typedef size_t __stl_atomic_t;
# 280 "c:/marmalade/6.2/s3e/h/std/c++/stl/_threads.h"
namespace _STL {




template <int __inst>
struct _STLP_mutex_spin {
  enum { __low_max = 30, __high_max = 1000 };

  static unsigned __max;
  static unsigned __last;
  static void _M_do_lock(volatile __stl_atomic_t* __lock);
  static void _S_nsec_sleep(int __log_nsec);
};
# 311 "c:/marmalade/6.2/s3e/h/std/c++/stl/_threads.h"
struct _STLP_mutex_base
{
# 441 "c:/marmalade/6.2/s3e/h/std/c++/stl/_threads.h"
  inline void _M_initialize() {}
  inline void _M_destroy() {}
  inline void _M_acquire_lock() {}
  inline void _M_release_lock() {}

};
# 458 "c:/marmalade/6.2/s3e/h/std/c++/stl/_threads.h"
typedef _STLP_mutex_base _STLP_mutex_nodemand;





class _STLP_mutex : public _STLP_mutex_nodemand {
  public:
    inline _STLP_mutex () { _M_initialize(); }
    inline ~_STLP_mutex () { _M_destroy(); }
  private:
    _STLP_mutex(const _STLP_mutex&);
    void operator=(const _STLP_mutex&);
};
# 569 "c:/marmalade/6.2/s3e/h/std/c++/stl/_threads.h"
struct _Refcount_Base
{

  volatile __stl_atomic_t _M_ref_count;


  _STLP_mutex _M_mutex;



  _Refcount_Base(__stl_atomic_t __n) : _M_ref_count(__n) {}
# 597 "c:/marmalade/6.2/s3e/h/std/c++/stl/_threads.h"
  void _M_incr() { ++_M_ref_count; }
  void _M_decr() { --_M_ref_count; }

};
# 632 "c:/marmalade/6.2/s3e/h/std/c++/stl/_threads.h"
static inline __stl_atomic_t
_Atomic_swap(volatile __stl_atomic_t * __p, __stl_atomic_t __q) {
  __stl_atomic_t __result = *__p;
  *__p = __q;
  return __result;
}






struct _STLP_auto_lock
{
  _STLP_mutex_base& _M_lock;

  _STLP_auto_lock(_STLP_mutex_base& __lock) : _M_lock(__lock)
    { _M_lock._M_acquire_lock(); }
  ~_STLP_auto_lock() { _M_lock._M_release_lock(); }

private:
  void operator=(const _STLP_auto_lock&);
  _STLP_auto_lock(const _STLP_auto_lock&);
};

typedef _STLP_auto_lock _STLP_mutex_lock;
# 710 "c:/marmalade/6.2/s3e/h/std/c++/stl/_threads.h"
}


# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_threads.c" 1
# 714 "c:/marmalade/6.2/s3e/h/std/c++/stl/_threads.h" 2
# 65 "c:/marmalade/6.2/s3e/h/std/c++/stl/_alloc.h" 2



# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_construct.h" 1
# 43 "c:/marmalade/6.2/s3e/h/std/c++/stl/_construct.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_iterator_base.h" 1
# 47 "c:/marmalade/6.2/s3e/h/std/c++/stl/_iterator_base.h"
namespace _STL {

struct input_iterator_tag {};
struct output_iterator_tag {};
struct forward_iterator_tag : public input_iterator_tag {};
struct bidirectional_iterator_tag : public forward_iterator_tag {};
struct random_access_iterator_tag : public bidirectional_iterator_tag {};


template <class _Category, class _Tp, class _Distance = ptrdiff_t,
          class _Pointer = _Tp*, class _Reference = _Tp& >
struct iterator {
  typedef _Category iterator_category;
  typedef _Tp value_type;
  typedef _Distance difference_type;
  typedef _Pointer pointer;
  typedef _Reference reference;
};
template<>
struct iterator<output_iterator_tag, void, void, void, void> {
  typedef output_iterator_tag iterator_category;

  typedef void value_type;
  typedef void difference_type;
  typedef void pointer;
  typedef void reference;

};
# 96 "c:/marmalade/6.2/s3e/h/std/c++/stl/_iterator_base.h"
template <class _Iterator>
struct iterator_traits {
  typedef typename _Iterator::iterator_category iterator_category;
  typedef typename _Iterator::value_type value_type;
  typedef typename _Iterator::difference_type difference_type;
  typedef typename _Iterator::pointer pointer;
  typedef typename _Iterator::reference reference;
};
# 115 "c:/marmalade/6.2/s3e/h/std/c++/stl/_iterator_base.h"
template <class _Tp>
struct iterator_traits<const _Tp*> {
  typedef random_access_iterator_tag iterator_category;
  typedef _Tp value_type;
  typedef ptrdiff_t difference_type;
  typedef const _Tp* pointer;
  typedef const _Tp& reference;
};

template <class _Tp>
struct iterator_traits<_Tp*> {
  typedef random_access_iterator_tag iterator_category;
  typedef _Tp value_type;
  typedef ptrdiff_t difference_type;
  typedef _Tp* pointer;
  typedef _Tp& reference;
};
# 164 "c:/marmalade/6.2/s3e/h/std/c++/stl/_iterator_base.h"
template <class _Iter>
inline typename iterator_traits<_Iter>::iterator_category __iterator_category(const _Iter&) {
  typedef typename iterator_traits<_Iter>::iterator_category _Category;
  return _Category();
}

template <class _Iter>
inline typename iterator_traits<_Iter>::difference_type* __distance_type(const _Iter&) {
  typedef typename iterator_traits<_Iter>::difference_type _diff_type;
  return static_cast<_diff_type*>(0);
}

template <class _Iter>
inline typename iterator_traits<_Iter>::value_type* __value_type(const _Iter&) {
  typedef typename iterator_traits<_Iter>::value_type _value_type;
  return static_cast<_value_type*>(0);
}
# 236 "c:/marmalade/6.2/s3e/h/std/c++/stl/_iterator_base.h"
template <class _Tp, class _Distance> struct input_iterator :
  public iterator <input_iterator_tag, _Tp, _Distance, _Tp*, _Tp&> {};
struct output_iterator : public iterator <output_iterator_tag, void, void, void, void> {};
template <class _Tp, class _Distance> struct forward_iterator :
  public iterator<forward_iterator_tag, _Tp, _Distance, _Tp*, _Tp&> {};
template <class _Tp, class _Distance> struct bidirectional_iterator :
  public iterator<bidirectional_iterator_tag, _Tp, _Distance, _Tp*, _Tp&> {};
template <class _Tp, class _Distance> struct random_access_iterator :
  public iterator<random_access_iterator_tag, _Tp, _Distance, _Tp*, _Tp&> {};
# 281 "c:/marmalade/6.2/s3e/h/std/c++/stl/_iterator_base.h"
template <class _InputIterator, class _Distance>
inline void __distance(const _InputIterator& __first, const _InputIterator& __last,
      _Distance& __n, const input_iterator_tag &) {
  _InputIterator __it(__first);
  while (__it != __last) { ++__it; ++__n; }
}
# 305 "c:/marmalade/6.2/s3e/h/std/c++/stl/_iterator_base.h"
template <class _RandomAccessIterator, class _Distance>
inline void __distance(const _RandomAccessIterator& __first,
      const _RandomAccessIterator& __last,
      _Distance& __n, const random_access_iterator_tag &) {
  __n += __last - __first;
}


template <class _InputIterator, class _Distance>
inline void distance(const _InputIterator& __first,
    const _InputIterator& __last, _Distance& __n) {
  __distance(__first, __last, __n, typename iterator_traits< _InputIterator >::iterator_category());
}


template <class _InputIterator>
inline typename iterator_traits<_InputIterator>::difference_type
__distance(const _InputIterator& __first, const _InputIterator& __last, const input_iterator_tag &) {
  typename iterator_traits<_InputIterator>::difference_type __n = 0;
  _InputIterator __it(__first);
  while (__it != __last) {
    ++__it; ++__n;
  }
  return __n;
}
# 359 "c:/marmalade/6.2/s3e/h/std/c++/stl/_iterator_base.h"
template <class _RandomAccessIterator>
inline typename iterator_traits<_RandomAccessIterator>::difference_type
__distance(const _RandomAccessIterator& __first, const _RandomAccessIterator& __last,
           const random_access_iterator_tag &) {
  return __last - __first;
}

template <class _InputIterator>
inline typename iterator_traits<_InputIterator>::difference_type
distance(const _InputIterator& __first, const _InputIterator& __last) {
  return __distance(__first, __last, typename iterator_traits< _InputIterator >::iterator_category());
}



template <class _Tp>
struct _Nonconst_traits;

template <class _Tp>
struct _Const_traits {
  typedef _Tp value_type;
  typedef const _Tp& reference;
  typedef const _Tp* pointer;
  typedef _Nonconst_traits<_Tp> _Non_const_traits;
};

template <class _Tp>
struct _Nonconst_traits {
  typedef _Tp value_type;
  typedef _Tp& reference;
  typedef _Tp* pointer;
  typedef _Nonconst_traits<_Tp> _Non_const_traits;
};
# 414 "c:/marmalade/6.2/s3e/h/std/c++/stl/_iterator_base.h"
template <class _InputIter, class _Distance>
inline void __advance(_InputIter& __i, _Distance __n, const input_iterator_tag &) {
  while (__n--) ++__i;
}


template <class _InputIter, class _Distance>
inline void __advance(_InputIter& __i, _Distance __n, const output_iterator_tag &) {
  while (__n--) ++__i;
}
# 432 "c:/marmalade/6.2/s3e/h/std/c++/stl/_iterator_base.h"
template <class _BidirectionalIterator, class _Distance>
inline void __advance(_BidirectionalIterator& __i, _Distance __n,
                      const bidirectional_iterator_tag &) {
  if (__n > 0)
    while (__n--) ++__i;
  else
    while (__n++) --__i;
}

template <class _RandomAccessIterator, class _Distance>
inline void __advance(_RandomAccessIterator& __i, _Distance __n,
                      const random_access_iterator_tag &) {
  __i += __n;
}

template <class _InputIterator, class _Distance>
inline void advance(_InputIterator& __i, _Distance __n) {
  __advance(__i, __n, typename iterator_traits< _InputIterator >::iterator_category());
}

}
# 44 "c:/marmalade/6.2/s3e/h/std/c++/stl/_construct.h" 2


namespace _STL {
# 55 "c:/marmalade/6.2/s3e/h/std/c++/stl/_construct.h"
template <class _Tp>
inline void _Destroy(_Tp* __pointer) {
# 67 "c:/marmalade/6.2/s3e/h/std/c++/stl/_construct.h"
    __pointer->~_Tp();





}
# 92 "c:/marmalade/6.2/s3e/h/std/c++/stl/_construct.h"
template <class _T1, class _T2>
inline void _Construct(_T1* __p, const _T2& __val) {



    new (__p) _T1(__val);
}

template <class _T1>
inline void _Construct(_T1* __p) {







  new (__p) _T1();

}
# 120 "c:/marmalade/6.2/s3e/h/std/c++/stl/_construct.h"
template <class _ForwardIterator>
inline void
__destroy_aux(_ForwardIterator __first, _ForwardIterator __last, const __false_type&) {
  for ( ; __first != __last; ++__first)
    _STL::_Destroy(&*__first);
}

template <class _ForwardIterator>
inline void __destroy_aux(_ForwardIterator, _ForwardIterator, const __true_type&) {}

template <class _ForwardIterator, class _Tp>
inline void
__destroy(_ForwardIterator __first, _ForwardIterator __last, _Tp*) {
  typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
  __destroy_aux(__first, __last, _Trivial_destructor());
}

template <class _ForwardIterator>
inline void _Destroy(_ForwardIterator __first, _ForwardIterator __last) {
  __destroy(__first, __last, (typename iterator_traits< _ForwardIterator >::value_type*)0);
}

inline void _Destroy(char*, char*) {}

inline void _Destroy(wchar_t*, wchar_t*) {}
inline void _Destroy(const wchar_t*, const wchar_t*) {}






template <class _T1, class _T2>
inline void construct(_T1* __p, const _T2& __val) {_Construct(__p, __val); }
template <class _T1>
inline void construct(_T1* __p) { _Construct(__p); }
template <class _Tp>
inline void destroy(_Tp* __pointer) { _STL::_Destroy(__pointer); }
template <class _ForwardIterator>
inline void destroy(_ForwardIterator __first, _ForwardIterator __last) { _STL::_Destroy(__first, __last); }

}
# 69 "c:/marmalade/6.2/s3e/h/std/c++/stl/_alloc.h" 2
# 85 "c:/marmalade/6.2/s3e/h/std/c++/stl/_alloc.h"
namespace _STL {
# 94 "c:/marmalade/6.2/s3e/h/std/c++/stl/_alloc.h"
typedef void (* __oom_handler_type)();

template <int __inst>
class __malloc_alloc {
private:
  static void* _S_oom_malloc(size_t);
  static __oom_handler_type __oom_handler;
public:

  typedef char value_type;





  static void* allocate(size_t __n) {
    void* __result = malloc(__n);
    if (0 == __result) __result = _S_oom_malloc(__n);
    return __result;
  }
  static void deallocate(void* __p, size_t ) { free((char*)__p); }
  static __oom_handler_type set_malloc_handler(__oom_handler_type __f) {
    __oom_handler_type __old = __oom_handler;
    __oom_handler = __f;
    return(__old);
  }
};




class __new_alloc {
public:

  typedef char value_type;





  static void* allocate(size_t __n) { return __stl_new(__n); }
  static void deallocate(void* __p, size_t) { __stl_delete(__p); }
};
# 146 "c:/marmalade/6.2/s3e/h/std/c++/stl/_alloc.h"
template <class _Alloc>
class __debug_alloc : public _Alloc {
public:
  typedef _Alloc __allocator_type;
  typedef typename _Alloc::value_type value_type;
private:
  struct __alloc_header {
    size_t __magic: 16;
    size_t __type_size:16;
    unsigned long _M_size;
  };

  enum { __pad=8, __magic=0xdeba, __deleted_magic = 0xdebd,
  __shred_byte= 0xA3
  };

  enum { __extra_before = 16, __extra_after = 8 };



  static size_t __extra_before_chunk() {
    return (long)__extra_before/sizeof(value_type)+
      (size_t)((long)__extra_before%sizeof(value_type)>0);
  }
  static size_t __extra_after_chunk() {
    return (long)__extra_after/sizeof(value_type)+
      (size_t)((long)__extra_after%sizeof(value_type)>0);
  }
public:





  __debug_alloc() {}
  ~__debug_alloc() {}
  static void * allocate(size_t);
  static void deallocate(void *, size_t);
};
# 214 "c:/marmalade/6.2/s3e/h/std/c++/stl/_alloc.h"
enum {_ALIGN = 8, _ALIGN_SHIFT=3, _MAX_BYTES = 128};



class _Node_alloc_obj {
public:
    _Node_alloc_obj * _M_free_list_link;
};

template <bool __threads, int __inst>
class __node_alloc {
  public:
  static inline size_t _S_round_up(size_t __bytes) { return (((__bytes) + (size_t)_ALIGN-1) & ~((size_t)_ALIGN - 1)); }
  typedef _Node_alloc_obj _Obj;
private:

  static void* _S_refill(size_t __n);


  static char* _S_chunk_alloc(size_t __p_size, int& __nobjs);

  static _Node_alloc_obj * _S_free_list[16];
  static char* _S_start_free;
  static char* _S_end_free;
  static size_t _S_heap_size;
  static void * _M_allocate(size_t __n);

  static void _M_deallocate(void *__p, size_t __n);
public:

  typedef char value_type;






  static void * allocate(size_t __n) { return (__n > (size_t)_MAX_BYTES) ? __stl_new(__n) : _M_allocate(__n); }

  static void deallocate(void *__p, size_t __n) { if (__n > (size_t)_MAX_BYTES) __stl_delete(__p); else _M_deallocate(__p, __n); }
};





typedef __node_alloc<false, 0> _Node_alloc;
# 301 "c:/marmalade/6.2/s3e/h/std/c++/stl/_alloc.h"
typedef __malloc_alloc<0> __sgi_alloc;


typedef __malloc_alloc<0> __single_client_alloc;
typedef __malloc_alloc<0> __multithreaded_alloc;
# 329 "c:/marmalade/6.2/s3e/h/std/c++/stl/_alloc.h"
template <class _Tp>
class allocator {
public:

  typedef _Tp value_type;
  typedef value_type * pointer;
  typedef const _Tp* const_pointer;
  typedef _Tp& reference;
  typedef const _Tp& const_reference;
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;

  template <class _Tp1> struct rebind {
    typedef allocator<_Tp1> other;
  };

  allocator() {}

  template <class _Tp1> allocator(const allocator<_Tp1>&) {}

  allocator(const allocator<_Tp>&) {}
  ~allocator() {}
  pointer address(reference __x) const { return &__x; }
  const_pointer address(const_reference __x) const { return &__x; }

  _Tp* allocate(size_type __n, const void* = 0) {
    return __n != 0 ? reinterpret_cast<value_type*>(__sgi_alloc::allocate(__n * sizeof(value_type))) : 0;
  }

  void deallocate(pointer __p, size_type __n) {
   
      if (__p != 0) __sgi_alloc::deallocate((void*)__p, __n * sizeof(value_type));
  }

  void deallocate(pointer __p) const { if (__p != 0) __sgi_alloc::deallocate((void*)__p, sizeof(value_type)); }
  size_type max_size() const { return size_t(-1) / sizeof(value_type); }
  void construct(pointer __p, const _Tp& __val) { _STL::_Construct(__p, __val); }
  void destroy(pointer __p) { _STL::_Destroy(__p); }




};

template<>
class allocator<void> {
public:
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;
  typedef void* pointer;
  typedef const void* const_pointer;

  typedef void value_type;


  template <class _Tp1> struct rebind {
    typedef allocator<_Tp1> other;
  };





};


template <class _T1, class _T2> inline bool operator==(const allocator<_T1>&, const allocator<_T2>&) { return true; }
template <class _T1, class _T2> inline bool operator!=(const allocator<_T1>&, const allocator<_T2>&) { return false; }
# 411 "c:/marmalade/6.2/s3e/h/std/c++/stl/_alloc.h"
template <class _Tp, class _Allocator>
struct _Alloc_traits
{
  typedef _Allocator _Orig;

  typedef typename _Allocator::template rebind<_Tp> _Rebind_type;
  typedef typename _Rebind_type::other allocator_type;
  static allocator_type create_allocator(const _Orig& __a) { return allocator_type(__a); }





};
# 457 "c:/marmalade/6.2/s3e/h/std/c++/stl/_alloc.h"
template <class _Tp, class _Alloc>
inline typename _Alloc_traits<_Tp, _Alloc>::allocator_type
__stl_alloc_create(const _Alloc& __a, const _Tp*) {
  typedef typename _Alloc::template rebind<_Tp>::other _Rebound_type;
  return _Rebound_type(__a);
}
# 480 "c:/marmalade/6.2/s3e/h/std/c++/stl/_alloc.h"
template <class _Value, class _Tp, class _MaybeReboundAlloc>
class _STLP_alloc_proxy : public _MaybeReboundAlloc {
private:
  typedef _MaybeReboundAlloc _Base;
  typedef _STLP_alloc_proxy<_Value, _Tp, _MaybeReboundAlloc> _Self;
public:
  _Value _M_data;
  inline _STLP_alloc_proxy(const _MaybeReboundAlloc& __a, _Value __p) : _MaybeReboundAlloc(__a), _M_data(__p) {}
# 509 "c:/marmalade/6.2/s3e/h/std/c++/stl/_alloc.h"
};
# 520 "c:/marmalade/6.2/s3e/h/std/c++/stl/_alloc.h"
}
# 46 "c:/marmalade/6.2/s3e/h/std/c++/stdexcept" 2



# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string_fwd.h" 1
# 23 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string_fwd.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/iosfwd" 1
# 28 "c:/marmalade/6.2/s3e/h/std/c++/iosfwd"
         
# 24 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string_fwd.h" 2


namespace _STL {


template <class _CharT,
          class _Traits = char_traits<_CharT>,
          class _Alloc = allocator<_CharT> >
class basic_string;







typedef basic_string<char, char_traits<char>, allocator<char> > string;


typedef basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> > wstring;



 const char*
__get_c_string(const string& __str);






}
# 50 "c:/marmalade/6.2/s3e/h/std/c++/stdexcept" 2




namespace _STL {



using __std_alias::exception;




class __Named_exception : public exception {
public:
  __Named_exception(const string& __str)

    ;
  const char* what() const throw();
  ~__Named_exception() throw();
# 78 "c:/marmalade/6.2/s3e/h/std/c++/stdexcept"
private:
  enum { _S_bufsize = 256 };
  char _M_name[_S_bufsize];
};

class logic_error : public __Named_exception {
public:
  logic_error(const string& __s) : __Named_exception(__s) {}

  ~logic_error() throw();

};

class runtime_error : public __Named_exception {
public:
  runtime_error(const string& __s) : __Named_exception(__s) {}

  ~runtime_error() throw();

};

class domain_error : public logic_error {
public:
  domain_error(const string& __arg) : logic_error(__arg) {}

  ~domain_error() throw();

};

class invalid_argument : public logic_error {
public:
  invalid_argument(const string& __arg) : logic_error(__arg) {}

  ~invalid_argument() throw();

};

class length_error : public logic_error {
public:
  length_error(const string& __arg) : logic_error(__arg) {}

  ~length_error() throw();

};

class out_of_range : public logic_error {
public:
  out_of_range(const string& __arg) : logic_error(__arg) {}

  ~out_of_range() throw();

};

class range_error : public runtime_error {
public:
  range_error(const string& __arg) : runtime_error(__arg) {}

  ~range_error() throw();

};

class overflow_error : public runtime_error {
public:
  overflow_error(const string& __arg) : runtime_error(__arg) {}

  ~overflow_error() throw();

};

class underflow_error : public runtime_error {
public:
  underflow_error(const string& __arg) : runtime_error(__arg) {}

  ~underflow_error() throw();

};

}
# 23 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ios_base.h" 2


# 1 "c:/marmalade/6.2/s3e/h/std/c++/utility" 1
# 32 "c:/marmalade/6.2/s3e/h/std/c++/utility"
         
# 44 "c:/marmalade/6.2/s3e/h/std/c++/utility"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_pair.h" 1
# 34 "c:/marmalade/6.2/s3e/h/std/c++/stl/_pair.h"
namespace _STL {

template <class _T1, class _T2>
struct pair {
  typedef _T1 first_type;
  typedef _T2 second_type;

  _T1 first;
  _T2 second;



  pair() : first(_T1()), second(_T2()) {}

  pair(const _T1& __a, const _T2& __b) : first(__a), second(__b) {}


  template <class _U1, class _U2>
  pair(const pair<_U1, _U2>& __p) : first(__p.first), second(__p.second) {}

  pair(const pair<_T1,_T2>& __o) : first(__o.first), second(__o.second) {}

 
};

template <class _T1, class _T2>
inline bool operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
{
  return __x.first == __y.first && __x.second == __y.second;
}

template <class _T1, class _T2>
inline bool operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
{
  return __x.first < __y.first ||
         (!(__y.first < __x.first) && __x.second < __y.second);
}



template <class _T1, class _T2>
inline bool operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {
  return !(__x == __y);
}

template <class _T1, class _T2>
inline bool operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {
  return __y < __x;
}

template <class _T1, class _T2>
inline bool operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {
  return !(__y < __x);
}

template <class _T1, class _T2>
inline bool operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {
  return !(__x < __y);
}





template <class _T1, class _T2, int _Sz>
inline pair<_T1, _T2 const*> make_pair(_T1 const& __x,
                                       _T2 const (&__y)[_Sz])
{
  return pair<_T1, _T2 const*>(__x, static_cast<_T2 const*>(__y));
}

template <class _T1, class _T2, int _Sz>
inline pair<_T1 const*, _T2> make_pair(_T1 const (&__x)[_Sz],
                                       _T2 const& __y)
{
  return pair<_T1 const*, _T2>(static_cast<_T1 const*>(__x), __y);
}

template <class _T1, class _T2, int _Sz1, int _Sz2>
inline pair<_T1 const*, _T2 const*> make_pair(_T1 const (&__x)[_Sz1],
                                              _T2 const (&__y)[_Sz2])
{
  return pair<_T1 const*, _T2 const*>(static_cast<_T1 const*>(__x),
                                      static_cast<_T2 const*>(__y));
}


template <class _T1, class _T2>
inline pair<_T1, _T2> make_pair(const _T1& __x, const _T2& __y)
{
  return pair<_T1, _T2>(__x, __y);
}


}


namespace _STL { namespace rel_ops {

template <class _Tp>
inline bool operator!=(const _Tp& __x, const _Tp& __y) {
  return !(__x == __y);
}

template <class _Tp>
inline bool operator>(const _Tp& __x, const _Tp& __y) {
  return __y < __x;
}

template <class _Tp>
inline bool operator<=(const _Tp& __x, const _Tp& __y) {
  return !(__y < __x);
}

template <class _Tp>
inline bool operator>=(const _Tp& __x, const _Tp& __y) {
  return !(__x < __y);
}

} }
# 45 "c:/marmalade/6.2/s3e/h/std/c++/utility" 2
# 26 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ios_base.h" 2


# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_locale.h" 1
# 46 "c:/marmalade/6.2/s3e/h/std/c++/stl/_locale.h"
namespace _STL {

class _Locale_impl;
class _Locale;
class locale;
class ios_base;


template <class _CharT>
bool
__locale_do_operator_call (const locale* __that,
                           const basic_string<_CharT, char_traits<_CharT>, allocator<_CharT> >& __x,
                           const basic_string<_CharT, char_traits<_CharT>, allocator<_CharT> >& __y);



class locale {
public:


  class facet : private _Refcount_Base {
  protected:
    explicit facet(size_t __no_del = 0) : _Refcount_Base(1), _M_delete(__no_del == 0) {}
    virtual ~facet();
    friend class locale;
    friend class _Locale_impl;
    friend class _Locale;

  private:
    facet(const facet& __f) : _Refcount_Base(1), _M_delete(__f._M_delete == 0) {};
    void operator=(const facet&);

  private:
    const bool _M_delete;
  };




  class

  id {
    friend class locale;
    friend class _Locale_impl;
  public:
    size_t _M_index;
    static size_t _S_max;
  };

  typedef int category;



  static const category

    none = 0x000,
    collate = 0x010,
    ctype = 0x020,
    monetary = 0x040,
    numeric = 0x100,
    time = 0x200,
    messages = 0x400,
    all = collate | ctype | monetary | numeric | time | messages



  ;


  locale();
  locale(const locale&) ;
  explicit locale(const char *);
  locale(const locale&, const char*, category);


  locale(_Locale_impl*);
  locale(_Locale_impl*, bool);

public:


  template <class _Facet>
  locale(const locale& __loc, _Facet* __f) : _M_impl(0)
    {

      new(this) locale(__loc._M_impl, __f != 0);
      if (__f != 0)
        this->_M_insert(__f, _Facet::id);
    }


  locale(const locale&, const locale&, category);
  ~locale() ;
  const locale& operator=(const locale&) ;


  template <class _Facet> locale combine(const locale& __loc) {
    locale __result(__loc._M_impl, true);
    if (facet* __f = __loc._M_get_facet(_Facet::id)) {
      __result._M_insert(__f, _Facet::id);
      __f->_M_incr();
    }
    else
      _M_throw_runtime_error();
    return __result;
  }


  string name() const;

  bool operator==(const locale&) const;
  bool operator!=(const locale&) const;







  template <class _CharT, class _Traits, class _Alloc>
  bool operator()(const basic_string<_CharT, _Traits, _Alloc>& __x,
                  const basic_string<_CharT, _Traits, _Alloc>& __y) const {
    return __locale_do_operator_call(this, __x, __y);
  }



  static locale global(const locale&);
  static const locale& classic();

public:
  facet* _M_get_facet(const id&) const;

  facet* _M_use_facet(const id&) const;
  static void _M_throw_runtime_error(const char* = 0);
  static void _S_initialize();
  static void _S_uninitialize();

private:

  void _M_insert(facet* __f, id& __id);


  friend class _Locale_impl;
  friend class _Locale;
  friend class ios_base;

private:
  _Locale_impl* _M_impl;
};
# 205 "c:/marmalade/6.2/s3e/h/std/c++/stl/_locale.h"
template <class _Facet> inline const _Facet& use_facet(const locale& __loc)

{
  return *static_cast<const _Facet*>(__loc._M_use_facet(_Facet::id));
}
# 219 "c:/marmalade/6.2/s3e/h/std/c++/stl/_locale.h"
template <class _Facet> inline bool has_facet(const locale& __loc)

{
  return (__loc._M_get_facet(_Facet::id) != 0);
}






}
# 29 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ios_base.h" 2


# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.h" 1
# 23 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/memory" 1
# 28 "c:/marmalade/6.2/s3e/h/std/c++/memory"
         







# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_tempbuf.h" 1
# 34 "c:/marmalade/6.2/s3e/h/std/c++/stl/_tempbuf.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/climits" 1
# 32 "c:/marmalade/6.2/s3e/h/std/c++/climits"
# 1 "c:/marmalade/6.2/s3e/h/std/limits.h" 1
# 33 "c:/marmalade/6.2/s3e/h/std/c++/climits" 2
# 35 "c:/marmalade/6.2/s3e/h/std/c++/stl/_tempbuf.h" 2





# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_uninitialized.h" 1
# 38 "c:/marmalade/6.2/s3e/h/std/c++/stl/_uninitialized.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_algobase.h" 1
# 58 "c:/marmalade/6.2/s3e/h/std/c++/stl/_algobase.h"
namespace _STL {

template <class _Tp>
inline void swap(_Tp& __a, _Tp& __b) {
  _Tp __tmp = __a;
  __a = __b;
  __b = __tmp;
}

template <class _ForwardIter1, class _ForwardIter2>
inline void iter_swap(_ForwardIter1 __i1, _ForwardIter2 __i2) {
  swap(*__i1, *__i2);
}





template <class _Tp>
inline const _Tp& (min)(const _Tp& __a, const _Tp& __b) { return __b < __a ? __b : __a; }
template <class _Tp>
inline const _Tp& (max)(const _Tp& __a, const _Tp& __b) { return __a < __b ? __b : __a; }







template <class _Tp, class _Compare>
inline const _Tp& (min)(const _Tp& __a, const _Tp& __b, _Compare __comp) {
  return __comp(__b, __a) ? __b : __a;
}

template <class _Tp, class _Compare>
inline const _Tp& (max)(const _Tp& __a, const _Tp& __b, _Compare __comp) {
  return __comp(__a, __b) ? __b : __a;
}
# 106 "c:/marmalade/6.2/s3e/h/std/c++/stl/_algobase.h"
template <class _InputIter, class _OutputIter, class _Distance>
inline _OutputIter __copy(_InputIter __first, _InputIter __last,
                          _OutputIter __result,
                          const input_iterator_tag &, _Distance*) {
  for ( ; __first != __last; ++__result, ++__first)
    *__result = *__first;
  return __result;
}
# 134 "c:/marmalade/6.2/s3e/h/std/c++/stl/_algobase.h"
template <class _RandomAccessIter, class _OutputIter, class _Distance>
inline _OutputIter
__copy(_RandomAccessIter __first, _RandomAccessIter __last,
       _OutputIter __result, const random_access_iterator_tag &, _Distance*) {
  for (_Distance __n = __last - __first; __n > 0; --__n) {
    *__result = *__first;
    ++__first;
    ++__result;
  }
  return __result;
}

inline void*
__copy_trivial(const void* __first, const void* __last, void* __result) {
  return (__last == __first) ? __result :
    ((char*)memmove(__result, __first, ((const char*)__last - (const char*)__first))) +
    ((const char*)__last - (const char*)__first);
}




template <class _BidirectionalIter1, class _BidirectionalIter2,
          class _Distance>
inline _BidirectionalIter2 __copy_backward(_BidirectionalIter1 __first,
                                           _BidirectionalIter1 __last,
                                           _BidirectionalIter2 __result,
                                           const bidirectional_iterator_tag &,
                                           _Distance*)
{
  while (__first != __last)
    *--__result = *--__last;
  return __result;
}

template <class _RandomAccessIter, class _BidirectionalIter, class _Distance>
inline _BidirectionalIter __copy_backward(_RandomAccessIter __first,
                                          _RandomAccessIter __last,
                                          _BidirectionalIter __result,
                                          const random_access_iterator_tag &,
                                          _Distance*)
{
  for (_Distance __n = __last - __first; __n > 0; --__n)
    *--__result = *--__last;
  return __result;
}

inline void*
__copy_trivial_backward(const void* __first, const void* __last, void* __result) {
  const ptrdiff_t _Num = (const char*)__last - (const char*)__first;
  return (_Num > 0) ? memmove((char*)__result - _Num, __first, _Num) : __result ;
}

template <class _InputIter, class _OutputIter>
inline _OutputIter __copy_ptrs(_InputIter __first, _InputIter __last, _OutputIter __result, const __false_type&) {
  return __copy(__first, __last, __result,
                typename iterator_traits< _InputIter >::iterator_category(),
                (typename iterator_traits< _InputIter >::difference_type*)0);
}
template <class _InputIter, class _OutputIter>
inline _OutputIter __copy_ptrs(_InputIter __first, _InputIter __last, _OutputIter __result, const __true_type&) {


  return (_OutputIter)__copy_trivial(__first, __last, __result);
}

template <class _InputIter, class _OutputIter>
inline _OutputIter __copy_aux(_InputIter __first, _InputIter __last, _OutputIter __result, const __true_type&) {
  return __copy_ptrs(__first, __last, __result,
                     _IsOKToMemCpy((typename iterator_traits< _InputIter >::value_type*)0,
                                   (typename iterator_traits< _OutputIter >::value_type*)0)._Ret());
}

template <class _InputIter, class _OutputIter>
inline _OutputIter __copy_aux(_InputIter __first, _InputIter __last, _OutputIter __result, const __false_type&) {
  return __copy(__first, __last, __result,
  typename iterator_traits< _InputIter >::iterator_category(), (typename iterator_traits< _InputIter >::difference_type*)0);
}

template <class _InputIter, class _OutputIter>
inline _OutputIter copy(_InputIter __first, _InputIter __last, _OutputIter __result) {
 
    return __copy_aux(__first, __last, __result, _BothPtrType< _InputIter, _OutputIter> :: _Ret());
}

template <class _InputIter, class _OutputIter>
inline _OutputIter __copy_backward_ptrs(_InputIter __first, _InputIter __last, _OutputIter __result, const __false_type&) {
  return __copy_backward(__first, __last, __result, typename iterator_traits< _InputIter >::iterator_category(), (typename iterator_traits< _InputIter >::difference_type*)0);
}
template <class _InputIter, class _OutputIter>
inline _OutputIter __copy_backward_ptrs(_InputIter __first, _InputIter __last, _OutputIter __result, const __true_type&) {
  return (_OutputIter)__copy_trivial_backward(__first, __last, __result);
}

template <class _InputIter, class _OutputIter>
inline _OutputIter __copy_backward_aux(_InputIter __first, _InputIter __last, _OutputIter __result, const __false_type&) {
  return __copy_backward(__first, __last, __result, typename iterator_traits< _InputIter >::iterator_category(), (typename iterator_traits< _InputIter >::difference_type*)0);
}

template <class _InputIter, class _OutputIter>
inline _OutputIter __copy_backward_aux(_InputIter __first, _InputIter __last, _OutputIter __result, const __true_type&) {
  return __copy_backward_ptrs(__first, __last, __result,
                              _IsOKToMemCpy((typename iterator_traits< _InputIter >::value_type*)0,
                                            (typename iterator_traits< _OutputIter >::value_type*)0)._Ret());
}

template <class _InputIter, class _OutputIter>
inline _OutputIter copy_backward(_InputIter __first, _InputIter __last, _OutputIter __result) {
 
    return __copy_backward_aux(__first, __last, __result, _BothPtrType< _InputIter, _OutputIter> :: _Ret() );
}
# 282 "c:/marmalade/6.2/s3e/h/std/c++/stl/_algobase.h"
template <class _InputIter, class _Size, class _OutputIter>
inline
pair<_InputIter, _OutputIter> __copy_n(_InputIter __first, _Size __count,
                                       _OutputIter __result,
                                       const input_iterator_tag &) {
  for ( ; __count > 0; --__count) {
    *__result = *__first;
    ++__first;
    ++__result;
  }
  return pair<_InputIter, _OutputIter>(__first, __result);
}

template <class _RAIter, class _Size, class _OutputIter>
inline pair<_RAIter, _OutputIter>
__copy_n(_RAIter __first, _Size __count,
         _OutputIter __result,
         const random_access_iterator_tag &) {
  _RAIter __last = __first + __count;
  return pair<_RAIter, _OutputIter>(__last, copy(__first, __last, __result));
}

template <class _InputIter, class _Size, class _OutputIter>
inline pair<_InputIter, _OutputIter>
__copy_n(_InputIter __first, _Size __count, _OutputIter __result) {
 
  return __copy_n(__first, __count, __result, typename iterator_traits< _InputIter >::iterator_category());
}

template <class _InputIter, class _Size, class _OutputIter>
inline pair<_InputIter, _OutputIter>
copy_n(_InputIter __first, _Size __count, _OutputIter __result) {
 
  return __copy_n(__first, __count, __result, typename iterator_traits< _InputIter >::iterator_category());
}





template <class _ForwardIter, class _Tp>
inline
void fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __val) {
 
  for ( ; __first != __last; ++__first)
    *__first = __val;
}

template <class _OutputIter, class _Size, class _Tp>
inline
_OutputIter fill_n(_OutputIter __first, _Size __n, const _Tp& __val) {
 
  for ( ; __n > 0; --__n, ++__first)
    *__first = __val;
  return __first;
}




inline void fill(unsigned char* __first, unsigned char* __last,
                 const unsigned char& __val) {
  unsigned char __tmp = __val;
  memset(__first, __tmp, __last - __first);
}

inline void fill(signed char* __first, signed char* __last,
                 const signed char& __val) {
  signed char __tmp = __val;
  memset(__first, static_cast<unsigned char>(__tmp), __last - __first);
}

inline void fill(char* __first, char* __last, const char& __val) {
  char __tmp = __val;
  memset(__first, static_cast<unsigned char>(__tmp), __last - __first);
}



template <class _Size>
inline unsigned char* fill_n(unsigned char* __first, _Size __n,
                             const unsigned char& __val) {
  fill(__first, __first + __n, __val);
  return __first + __n;
}

template <class _Size>
inline signed char* fill_n(char* __first, _Size __n,
                           const signed char& __val) {
  fill(__first, __first + __n, __val);
  return __first + __n;
}

template <class _Size>
inline char* fill_n(char* __first, _Size __n, const char& __val) {
  fill(__first, __first + __n, __val);
  return __first + __n;
}







template <class _InputIter1, class _InputIter2>
inline
pair<_InputIter1, _InputIter2> mismatch(_InputIter1 __first1,
                                        _InputIter1 __last1,
                                        _InputIter2 __first2) {
 
 
  while (__first1 != __last1 && *__first1 == *__first2) {
    ++__first1;
    ++__first2;
  }
  return pair<_InputIter1, _InputIter2>(__first1, __first2);
}

template <class _InputIter1, class _InputIter2, class _BinaryPredicate>
inline
pair<_InputIter1, _InputIter2> mismatch(_InputIter1 __first1,
                                        _InputIter1 __last1,
                                        _InputIter2 __first2,
                                        _BinaryPredicate __binary_pred) {
 
 
  while (__first1 != __last1 && __binary_pred(*__first1, *__first2)) {
    ++__first1;
    ++__first2;
  }
  return pair<_InputIter1, _InputIter2>(__first1, __first2);
}

template <class _InputIter1, class _InputIter2>
inline
bool equal(_InputIter1 __first1, _InputIter1 __last1,
                  _InputIter2 __first2) {
 
 
  for ( ; __first1 != __last1; ++__first1, ++__first2)
    if (!(*__first1 == *__first2))
      return false;
  return true;
}

template <class _InputIter1, class _InputIter2, class _BinaryPredicate>
inline
bool equal(_InputIter1 __first1, _InputIter1 __last1,
                  _InputIter2 __first2, _BinaryPredicate __binary_pred) {
 
 
  for ( ; __first1 != __last1; ++__first1, ++__first2)
    if (!__binary_pred(*__first1, *__first2))
      return false;
  return true;
}





template <class _InputIter1, class _InputIter2>
bool lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,
                             _InputIter2 __first2, _InputIter2 __last2);

template <class _InputIter1, class _InputIter2, class _Compare>
bool lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,
                             _InputIter2 __first2, _InputIter2 __last2,
                             _Compare __comp);

inline bool
lexicographical_compare(const unsigned char* __first1,
                        const unsigned char* __last1,
                        const unsigned char* __first2,
                        const unsigned char* __last2)
{
  const size_t __len1 = __last1 - __first1;
  const size_t __len2 = __last2 - __first2;
 
 

  const int __result = memcmp(__first1, __first2, (min) (__len1, __len2));
  return __result != 0 ? (__result < 0) : (__len1 < __len2);
}



inline bool lexicographical_compare(const char* __first1, const char* __last1,
                                    const char* __first2, const char* __last2)
{
 
 

  return lexicographical_compare((const unsigned char*) __first1,
                                 (const unsigned char*) __last1,
                                 (const unsigned char*) __first2,
                                 (const unsigned char*) __last2);
}


template <class _InputIter1, class _InputIter2>
int __lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,
                                   _InputIter2 __first2, _InputIter2 __last2);

inline int
__lexicographical_compare_3way(const unsigned char* __first1,
                               const unsigned char* __last1,
                               const unsigned char* __first2,
                               const unsigned char* __last2)
{
  const ptrdiff_t __len1 = __last1 - __first1;
  const ptrdiff_t __len2 = __last2 - __first2;
  const int __result = memcmp(__first1, __first2, (min) (__len1, __len2));
  return __result != 0 ? __result
                       : (__len1 == __len2 ? 0 : (__len1 < __len2 ? -1 : 1));
}



inline int
__lexicographical_compare_3way(const char* __first1, const char* __last1,
                               const char* __first2, const char* __last2)
{
  return __lexicographical_compare_3way((const unsigned char*) __first1,
                                        (const unsigned char*) __last1,
                                        (const unsigned char*) __first2,
                                        (const unsigned char*) __last2);
}




template <class _InputIter1, class _InputIter2>
int lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,
                                 _InputIter2 __first2, _InputIter2 __last2);




template <class _InputIter, class _Tp>
inline typename iterator_traits<_InputIter>::difference_type
count(_InputIter __first, _InputIter __last, const _Tp& __val) {
 
  typename iterator_traits<_InputIter>::difference_type __n = 0;
  for ( ; __first != __last; ++__first)
    if (*__first == __val)
      ++__n;
  return __n;
}


template <class _InputIter, class _Tp>
_InputIter find(_InputIter __first, _InputIter __last, const _Tp& __val);
template <class _InputIter, class _Predicate>
_InputIter find_if(_InputIter __first, _InputIter __last, _Predicate __pred);


template <class _ForwardIter1, class _ForwardIter2, class _BinaryPred>
_ForwardIter1 search(_ForwardIter1 __first1, _ForwardIter1 __last1,
                     _ForwardIter2 __first2, _ForwardIter2 __last2, _BinaryPred __predicate);


template <class _InputIter, class _ForwardIter, class _BinaryPredicate>
_InputIter __find_first_of(_InputIter __first1, _InputIter __last1,
                           _ForwardIter __first2, _ForwardIter __last2,
                           _BinaryPredicate __comp);

template <class _ForwardIter1, class _ForwardIter2,
          class _BinaryPredicate>
_ForwardIter1
find_end(_ForwardIter1 __first1, _ForwardIter1 __last1,
         _ForwardIter2 __first2, _ForwardIter2 __last2,
         _BinaryPredicate __comp);


template <class _ForwardIter, class _Tp>
inline void
replace(_ForwardIter __first, _ForwardIter __last,
        const _Tp& __old_value, const _Tp& __new_value) {
 
  for ( ; __first != __last; ++__first)
    if (*__first == __old_value)
      *__first = __new_value;
}

template <class _ForwardIter, class _Tp, class _Compare, class _Distance>
_ForwardIter __lower_bound(_ForwardIter __first, _ForwardIter __last,
                              const _Tp& __val, const _Compare& __comp, _Distance*);

}


# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_algobase.c" 1
# 32 "c:/marmalade/6.2/s3e/h/std/c++/stl/_algobase.c"
namespace _STL {

template <class _InputIter1, class _InputIter2>
bool lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,
                             _InputIter2 __first2, _InputIter2 __last2) {
 
   
    for ( ; __first1 != __last1 && __first2 != __last2
     ; ++__first1, ++__first2) {
      if (*__first1 < *__first2)
 return true;
      if (*__first2 < *__first1)
 return false;
    }
  return __first1 == __last1 && __first2 != __last2;
}

template <class _InputIter1, class _InputIter2, class _Compare>
bool lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,
                             _InputIter2 __first2, _InputIter2 __last2,
                             _Compare __comp) {
 
   
    for ( ; __first1 != __last1 && __first2 != __last2
     ; ++__first1, ++__first2) {
      if (__comp(*__first1, *__first2))
 return true;
      if (__comp(*__first2, *__first1))
 return false;
    }
  return __first1 == __last1 && __first2 != __last2;
}



template <class _InputIter1, class _InputIter2>
int __lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,
                                   _InputIter2 __first2, _InputIter2 __last2)
{
  while (__first1 != __last1 && __first2 != __last2) {
    if (*__first1 < *__first2)
      return -1;
    if (*__first2 < *__first1)
      return 1;
    ++__first1;
    ++__first2;
  }
  if (__first2 == __last2) {
    return !(__first1 == __last1);
  }
  else {
    return -1;
  }
}


template <class _InputIter1, class _InputIter2>
int lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,
                                 _InputIter2 __first2, _InputIter2 __last2)
{
 
   
    return __lexicographical_compare_3way(__first1, __last1, __first2, __last2);
}


template <class _RandomAccessIter, class _Tp>
inline _RandomAccessIter __find(_RandomAccessIter __first, _RandomAccessIter __last,
                                           const _Tp& __val,
                                           const random_access_iterator_tag &)
{
  typename iterator_traits<_RandomAccessIter>::difference_type __trip_count = (__last - __first) >> 2;

  for ( ; __trip_count > 0 ; --__trip_count) {
    if (*__first == __val) return __first;
    ++__first;

    if (*__first == __val) return __first;
    ++__first;

    if (*__first == __val) return __first;
    ++__first;

    if (*__first == __val) return __first;
    ++__first;
  }

  switch(__last - __first) {
  case 3:
    if (*__first == __val) return __first;
    ++__first;
  case 2:
    if (*__first == __val) return __first;
    ++__first;
  case 1:
    if (*__first == __val) return __first;
    ++__first;
  case 0:
  default:
    return __last;
  }
}

template <class _RandomAccessIter, class _Predicate>
inline _RandomAccessIter __find_if(_RandomAccessIter __first, _RandomAccessIter __last,
                                              _Predicate __pred,
                                              const random_access_iterator_tag &)
{
  typename iterator_traits<_RandomAccessIter>::difference_type __trip_count = (__last - __first) >> 2;

  for ( ; __trip_count > 0 ; --__trip_count) {
    if (__pred(*__first)) return __first;
    ++__first;

    if (__pred(*__first)) return __first;
    ++__first;

    if (__pred(*__first)) return __first;
    ++__first;

    if (__pred(*__first)) return __first;
    ++__first;
  }

  switch(__last - __first) {
  case 3:
    if (__pred(*__first)) return __first;
    ++__first;
  case 2:
    if (__pred(*__first)) return __first;
    ++__first;
  case 1:
    if (__pred(*__first)) return __first;

  case 0:
  default:
    return __last;
  }
}

template <class _InputIter, class _Tp>
inline _InputIter __find(_InputIter __first, _InputIter __last,
    const _Tp& __val,
    const input_iterator_tag &)
{
  while (__first != __last && !(*__first == __val))
    ++__first;
  return __first;
}

template <class _InputIter, class _Predicate>
inline _InputIter __find_if(_InputIter __first, _InputIter __last,
                            _Predicate __pred,
                            const input_iterator_tag &)
{
  while (__first != __last && !__pred(*__first))
    ++__first;
  return __first;
}

template <class _InputIter, class _Predicate>
_InputIter find_if(_InputIter __first, _InputIter __last,
                   _Predicate __pred) {
 
    return __find_if(__first, __last, __pred, typename iterator_traits< _InputIter >::iterator_category());
}

template <class _InputIter, class _Tp>
_InputIter find(_InputIter __first, _InputIter __last, const _Tp& __val)
{
 
    return __find(__first, __last, __val, typename iterator_traits< _InputIter >::iterator_category());
}

template <class _ForwardIter1, class _ForwardIter2, class _BinaryPred>
_ForwardIter1 search(_ForwardIter1 __first1, _ForwardIter1 __last1,
                     _ForwardIter2 __first2, _ForwardIter2 __last2,
                     _BinaryPred __predicate)
{
 
   

    if (__first1 == __last1 || __first2 == __last2)
      return __first1;


  _ForwardIter2 __tmp(__first2);
  ++__tmp;
  if (__tmp == __last2) {
    while (__first1 != __last1 && !__predicate(*__first1, *__first2))
      ++__first1;
    return __first1;
  }



  _ForwardIter2 __p1, __p;

  __p1 = __first2; ++__p1;



  while (__first1 != __last1) {
    while (__first1 != __last1) {
      if (__predicate(*__first1, *__first2))
        break;
      ++__first1;
    }
    while (__first1 != __last1 && !__predicate(*__first1, *__first2))
      ++__first1;
    if (__first1 == __last1)
      return __last1;

    __p = __p1;
    _ForwardIter1 __current = __first1;
    if (++__current == __last1) return __last1;

    while (__predicate(*__current, *__p)) {
      if (++__p == __last2)
        return __first1;
      if (++__current == __last1)
        return __last1;
    }

    ++__first1;
  }
  return __first1;
}



template <class _InputIter, class _ForwardIter, class _BinaryPredicate>
_InputIter __find_first_of(_InputIter __first1, _InputIter __last1,
                           _ForwardIter __first2, _ForwardIter __last2,
                           _BinaryPredicate __comp) {
  for ( ; __first1 != __last1; ++__first1)
    for (_ForwardIter __iter = __first2; __iter != __last2; ++__iter)
      if (__comp(*__first1, *__iter))
        return __first1;
  return __last1;
}
# 282 "c:/marmalade/6.2/s3e/h/std/c++/stl/_algobase.c"
template <class _ForwardIter1, class _ForwardIter2,
  class _BinaryPredicate>
_ForwardIter1 __find_end(_ForwardIter1 __first1, _ForwardIter1 __last1,
                         _ForwardIter2 __first2, _ForwardIter2 __last2,
                         const forward_iterator_tag &, const forward_iterator_tag &,
                         _BinaryPredicate __comp)
{
  if (__first2 == __last2)
    return __last1;
  else {
    _ForwardIter1 __result = __last1;
    while (1) {
      _ForwardIter1 __new_result
        = search(__first1, __last1, __first2, __last2, __comp);
      if (__new_result == __last1)
        return __result;
      else {
        __result = __new_result;
        __first1 = __new_result;
        ++__first1;
      }
    }
  }
}





}
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_iterator.h" 1
# 37 "c:/marmalade/6.2/s3e/h/std/c++/stl/_iterator.h"
namespace _STL {
# 46 "c:/marmalade/6.2/s3e/h/std/c++/stl/_iterator.h"
template <class _Iterator>
class reverse_iterator :
  public iterator<typename iterator_traits<_Iterator>::iterator_category,
                  typename iterator_traits<_Iterator>::value_type,
                  typename iterator_traits<_Iterator>::difference_type,
                  typename iterator_traits<_Iterator>::pointer,
                  typename iterator_traits<_Iterator>::reference>
{
protected:
  _Iterator current;
  typedef reverse_iterator<_Iterator> _Self;
public:
  typedef typename iterator_traits<_Iterator>::iterator_category iterator_category;
  typedef typename iterator_traits<_Iterator>::value_type value_type;
  typedef typename iterator_traits<_Iterator>::difference_type difference_type;
  typedef typename iterator_traits<_Iterator>::pointer pointer;
  typedef typename iterator_traits<_Iterator>::reference reference;
  typedef _Iterator iterator_type;
public:
  reverse_iterator() {}
  explicit reverse_iterator(iterator_type __x) : current(__x) {}
  reverse_iterator(const _Self& __x) : current(__x.current) {}
  _Self& operator = (const _Self& __x) { current = __x.base(); return *this; }

  template <class _Iter>
  reverse_iterator(const reverse_iterator<_Iter>& __x) : current(__x.base()) {}
  template <class _Iter>
  _Self& operator = (const reverse_iterator<_Iter>& __x) { current = __x.base(); return *this; }


  iterator_type base() const { return current; }
  reference operator*() const {
    _Iterator __tmp = current;
    return *--__tmp;
  }
  pointer operator->() const { return &(operator*()); }
  _Self& operator++() {
    --current;
    return *this;
  }
  _Self operator++(int) {
    _Self __tmp = *this;
    --current;
    return __tmp;
  }
  _Self& operator--() {
    ++current;
    return *this;
  }
  _Self operator--(int) {
    _Self __tmp = *this;
    ++current;
    return __tmp;
  }

  _Self operator+(difference_type __n) const {
    return _Self(current - __n);
  }
  _Self& operator+=(difference_type __n) {
    current -= __n;
    return *this;
  }
  _Self operator-(difference_type __n) const {
    return _Self(current + __n);
  }
  _Self& operator-=(difference_type __n) {
    current += __n;
    return *this;
  }
  reference operator[](difference_type __n) const { return *(*this + __n); }
};

template <class _Iterator>
inline bool operator==(const reverse_iterator<_Iterator>& __x,
                       const reverse_iterator<_Iterator>& __y) {
  return __x.base() == __y.base();
}

template <class _Iterator>
inline bool operator<(const reverse_iterator<_Iterator>& __x,
                      const reverse_iterator<_Iterator>& __y) {
  return __y.base() < __x.base();
}



template <class _Iterator>
inline bool operator!=(const reverse_iterator<_Iterator>& __x,
                       const reverse_iterator<_Iterator>& __y) {
  return !(__x == __y);
}

template <class _Iterator>
inline bool operator>(const reverse_iterator<_Iterator>& __x,
                      const reverse_iterator<_Iterator>& __y) {
  return __y < __x;
}

template <class _Iterator>
inline bool operator<=(const reverse_iterator<_Iterator>& __x,
                       const reverse_iterator<_Iterator>& __y) {
  return !(__y < __x);
}

template <class _Iterator>
inline bool operator>=(const reverse_iterator<_Iterator>& __x,
                      const reverse_iterator<_Iterator>& __y) {
  return !(__x < __y);
}



template <class _Iterator>



inline typename reverse_iterator<_Iterator>::difference_type

operator-(const reverse_iterator<_Iterator>& __x,
          const reverse_iterator<_Iterator>& __y) {
  return __y.base() - __x.base();
}

template <class _Iterator, class _DifferenceType>
inline reverse_iterator<_Iterator>
operator+(_DifferenceType n,const reverse_iterator<_Iterator>& x) {
  return x.operator+(n);
}



template <class _Container>
class back_insert_iterator
  : public iterator<output_iterator_tag,void,void,void,void>
{
protected:
  _Container* container;
public:
  typedef _Container container_type;
  typedef output_iterator_tag iterator_category;

  explicit back_insert_iterator(_Container& __x) : container(&__x) {}
  back_insert_iterator<_Container>&
  operator=(const typename _Container::value_type& __val) {
    container->push_back(__val);
    return *this;
  }
  back_insert_iterator<_Container>& operator*() { return *this; }
  back_insert_iterator<_Container>& operator++() { return *this; }
  back_insert_iterator<_Container> operator++(int) { return *this; }
};

template <class _Container>
inline back_insert_iterator<_Container> back_inserter(_Container& __x) {
  return back_insert_iterator<_Container>(__x);
}

template <class _Container>
class front_insert_iterator
  : public iterator<output_iterator_tag,void,void,void,void>
{
protected:
  _Container* container;
public:
  typedef _Container container_type;
  typedef output_iterator_tag iterator_category;
  explicit front_insert_iterator(_Container& __x) : container(&__x) {}
  front_insert_iterator<_Container>&
  operator=(const typename _Container::value_type& __val) {
    container->push_front(__val);
    return *this;
  }
  front_insert_iterator<_Container>& operator*() { return *this; }
  front_insert_iterator<_Container>& operator++() { return *this; }
  front_insert_iterator<_Container>& operator++(int) { return *this; }
};

template <class _Container>
inline front_insert_iterator<_Container> front_inserter(_Container& __x) {
  return front_insert_iterator<_Container>(__x);
}

template <class _Container>
class insert_iterator
  : public iterator<output_iterator_tag,void,void,void,void>
{
protected:
  _Container* container;
  typename _Container::iterator iter;
public:
  typedef _Container container_type;
  typedef output_iterator_tag iterator_category;
  insert_iterator(_Container& __x, typename _Container::iterator __i)
    : container(&__x), iter(__i) {}
  insert_iterator<_Container>&
  operator=(const typename _Container::value_type& __val) {
    iter = container->insert(iter, __val);
    ++iter;
    return *this;
  }
  insert_iterator<_Container>& operator*() { return *this; }
  insert_iterator<_Container>& operator++() { return *this; }
  insert_iterator<_Container>& operator++(int) { return *this; }
};

template <class _Container, class _Iterator>
inline insert_iterator<_Container>
inserter(_Container& __x, _Iterator __i)
{
  typedef typename _Container::iterator __iter;
  return insert_iterator<_Container>(__x, __iter(__i));
}

}
# 313 "c:/marmalade/6.2/s3e/h/std/c++/stl/_algobase.c" 2
namespace _STL {


template <class _BidirectionalIter1, class _BidirectionalIter2,
  class _BinaryPredicate>
_BidirectionalIter1
__find_end(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1,
           _BidirectionalIter2 __first2, _BidirectionalIter2 __last2,
           const bidirectional_iterator_tag &, const bidirectional_iterator_tag &,
           _BinaryPredicate __comp)
{
  typedef reverse_iterator<_BidirectionalIter1> _RevIter1;
  typedef reverse_iterator<_BidirectionalIter2> _RevIter2;

  _RevIter1 __rlast1(__first1);
  _RevIter2 __rlast2(__first2);
  _RevIter1 __rresult = search(_RevIter1(__last1), __rlast1,
                               _RevIter2(__last2), __rlast2,
                               __comp);

  if (__rresult == __rlast1)
    return __last1;
  else {
    _BidirectionalIter1 __result = __rresult.base();
    advance(__result, -distance(__first2, __last2));
    return __result;
  }
}


template <class _ForwardIter1, class _ForwardIter2,
  class _BinaryPredicate>
_ForwardIter1
find_end(_ForwardIter1 __first1, _ForwardIter1 __last1,
         _ForwardIter2 __first2, _ForwardIter2 __last2,
         _BinaryPredicate __comp)
{
 
   
    return __find_end(__first1, __last1, __first2, __last2,

        typename iterator_traits< _ForwardIter1 >::iterator_category(),
        typename iterator_traits< _ForwardIter2 >::iterator_category(),




        __comp);
}

template <class _ForwardIter, class _Tp, class _Compare, class _Distance>
_ForwardIter __lower_bound(_ForwardIter __first, _ForwardIter __last,
      const _Tp& __val, const _Compare& __comp, _Distance*)
{
  _Distance __len = distance(__first, __last);
  _Distance __half;
  _ForwardIter __middle;

  while (__len > 0) {
    __half = __len >> 1;
    __middle = __first;
    advance(__middle, __half);
    if (__comp(*__middle, __val)) {
      __first = __middle;
      ++__first;
      __len = __len - __half - 1;
    }
    else
      __len = __half;
  }
  return __first;
}

}
# 576 "c:/marmalade/6.2/s3e/h/std/c++/stl/_algobase.h" 2
# 39 "c:/marmalade/6.2/s3e/h/std/c++/stl/_uninitialized.h" 2






namespace _STL {





template <class _InputIter, class _ForwardIter>
inline _ForwardIter
__uninitialized_copy(_InputIter __first, _InputIter __last, _ForwardIter __result,
                     const __true_type&) {
  return __copy_aux(__first, __last, __result, _BothPtrType< _InputIter, _ForwardIter> :: _Ret());
}

template <class _InputIter, class _ForwardIter>
inline
_ForwardIter
__uninitialized_copy(_InputIter __first, _InputIter __last, _ForwardIter __result,
                     const __false_type&)
{
  _ForwardIter __cur = __result;
  {
    for ( ; __first != __last; ++__first, ++__cur)
      _Construct(&*__cur, *__first);
    return __cur;
  }
  ;



}

template <class _InputIter, class _ForwardIter>
inline _ForwardIter
uninitialized_copy(_InputIter __first, _InputIter __last, _ForwardIter __result) {
  return __uninitialized_copy(__first, __last, __result, typename __type_traits< typename iterator_traits< _ForwardIter >::value_type >::is_POD_type());
}

inline char*
uninitialized_copy(const char* __first, const char* __last, char* __result) {
  return (char*)__copy_trivial (__first, __last, __result);
}


inline wchar_t*
uninitialized_copy(const wchar_t* __first, const wchar_t* __last, wchar_t* __result) {
  return (wchar_t*)__copy_trivial (__first, __last, __result);
}





template <class _InputIter, class _Size, class _ForwardIter>
inline
pair<_InputIter, _ForwardIter>
__uninitialized_copy_n(_InputIter __first, _Size __count,
                       _ForwardIter __result,
                       const input_iterator_tag &)
{
  _ForwardIter __cur = __result;
  {
    for ( ; __count > 0 ; --__count, ++__first, ++__cur)
      _Construct(&*__cur, *__first);
    return pair<_InputIter, _ForwardIter>(__first, __cur);
  }
  ;



}
# 135 "c:/marmalade/6.2/s3e/h/std/c++/stl/_uninitialized.h"
template <class _RandomAccessIter, class _Size, class _ForwardIter>
inline pair<_RandomAccessIter, _ForwardIter>
__uninitialized_copy_n(_RandomAccessIter __first, _Size __count, _ForwardIter __result, const random_access_iterator_tag &) {
  _RandomAccessIter __last = __first + __count;
  return pair<_RandomAccessIter, _ForwardIter>( __last, __uninitialized_copy(__first, __last, __result,
                                                                             typename __type_traits< typename iterator_traits< _ForwardIter >::value_type >::is_POD_type()));
}


template <class _InputIter, class _Size, class _ForwardIter>
inline pair<_InputIter, _ForwardIter>
uninitialized_copy_n(_InputIter __first, _Size __count,
                     _ForwardIter __result) {
  return __uninitialized_copy_n(__first, __count, __result, typename iterator_traits< _InputIter >::iterator_category());
}




template <class _ForwardIter, class _Tp>
inline void
__uninitialized_fill(_ForwardIter __first, _ForwardIter __last,
                     const _Tp& __x, const __true_type&) {
  _STL::fill(__first, __last, __x);
}

template <class _ForwardIter, class _Tp>
inline void
__uninitialized_fill(_ForwardIter __first, _ForwardIter __last,
                     const _Tp& __x, const __false_type&)
{
  _ForwardIter __cur = __first;
  {
    for ( ; __cur != __last; ++__cur)
      _Construct(&*__cur, __x);
  }
  ;
}

template <class _ForwardIter, class _Tp>
inline void uninitialized_fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __x) {
  __uninitialized_fill(__first, __last, __x, typename __type_traits< typename iterator_traits< _ForwardIter >::value_type >::is_POD_type());
}



template <class _ForwardIter, class _Size, class _Tp>
inline _ForwardIter
__uninitialized_fill_n(_ForwardIter __first, _Size __n,
                       const _Tp& __x, const __true_type&) {
  return _STL::fill_n(__first, __n, __x);
}

template <class _ForwardIter, class _Size, class _Tp>
inline _ForwardIter
__uninitialized_fill_n(_ForwardIter __first, _Size __n,
                       const _Tp& __x, const __false_type&)
{
  _ForwardIter __cur = __first;
  {
    for ( ; __n > 0; --__n, ++__cur)
      _Construct(&*__cur, __x);
    return __cur;
  }
  ;



}

template <class _ForwardIter, class _Size, class _Tp>
inline _ForwardIter
uninitialized_fill_n(_ForwardIter __first, _Size __n, const _Tp& __x) {
  return __uninitialized_fill_n(__first, __n, __x, typename __type_traits< typename iterator_traits< _ForwardIter >::value_type >::is_POD_type());
}
# 219 "c:/marmalade/6.2/s3e/h/std/c++/stl/_uninitialized.h"
template <class _InputIter1, class _InputIter2, class _ForwardIter>
inline _ForwardIter
__uninitialized_copy_copy(_InputIter1 __first1, _InputIter1 __last1,
                          _InputIter2 __first2, _InputIter2 __last2,
                          _ForwardIter __result, __true_type)
{
  return __uninitialized_copy(__first2, __last2,
                              __uninitialized_copy(__first1, __last1, __result, __true_type()), __true_type());
}

template <class _InputIter1, class _InputIter2, class _ForwardIter>
inline _ForwardIter
__uninitialized_copy_copy(_InputIter1 __first1, _InputIter1 __last1,
                          _InputIter2 __first2, _InputIter2 __last2,
                          _ForwardIter __result, __false_type)
{
  _ForwardIter __mid = __uninitialized_copy(__first1, __last1, __result, typename __type_traits< typename iterator_traits< _ForwardIter >::value_type >::is_POD_type());
  {
    return __uninitialized_copy(__first2, __last2, __mid , typename __type_traits< typename iterator_traits< _ForwardIter >::value_type >::is_POD_type());
  }
  ;



}




template <class _ForwardIter, class _Tp, class _InputIter>
inline _ForwardIter
__uninitialized_fill_copy(_ForwardIter __result, _ForwardIter __mid, const _Tp& __x,
                          _InputIter __first, _InputIter __last)
{
  typedef typename __type_traits<_Tp>::is_POD_type _I_POD;
  __uninitialized_fill(__result, __mid, __x, _I_POD());
  {
    return __uninitialized_copy(__first, __last, __mid, _I_POD());
  }
  ;



}




template <class _InputIter, class _ForwardIter, class _Tp>
inline void
__uninitialized_copy_fill(_InputIter __first1, _InputIter __last1,
                          _ForwardIter __first2, _ForwardIter __last2,
                          const _Tp& __x)
{
  typedef typename __type_traits<_Tp>::is_POD_type _I_POD;
  _ForwardIter __mid2 = __uninitialized_copy(__first1, __last1, __first2, _I_POD());
  {
    __uninitialized_fill(__mid2, __last2, __x, _I_POD());
  }
  ;
}

}
# 41 "c:/marmalade/6.2/s3e/h/std/c++/stl/_tempbuf.h" 2


namespace _STL {

template <class _Tp>
pair<_Tp*, ptrdiff_t>
__get_temporary_buffer(ptrdiff_t __len, _Tp*);



template <class _Tp>
inline pair<_Tp*, ptrdiff_t> get_temporary_buffer(ptrdiff_t __len) {
  return __get_temporary_buffer(__len, (_Tp*) 0);
}







template <class _Tp>
inline pair<_Tp*, ptrdiff_t>
get_temporary_buffer(ptrdiff_t __len, _Tp*) {
  return __get_temporary_buffer(__len, (_Tp*) 0);
}



template <class _Tp>
inline void return_temporary_buffer(_Tp* __p) {

  free((char*)__p);
}

template <class _ForwardIterator, class _Tp>
class _Temporary_buffer {
private:
  ptrdiff_t _M_original_len;
  ptrdiff_t _M_len;
  _Tp* _M_buffer;

  void _M_allocate_buffer() {
    _M_original_len = _M_len;
    _M_buffer = 0;

    if (_M_len > (ptrdiff_t)(0x7fffffffL / sizeof(_Tp)))
      _M_len = 0x7fffffffL / sizeof(_Tp);

    while (_M_len > 0) {
      _M_buffer = (_Tp*) malloc(_M_len * sizeof(_Tp));
      if (_M_buffer)
        break;
      _M_len /= 2;
    }
  }

  void _M_initialize_buffer(const _Tp&, const __true_type&) {}
  void _M_initialize_buffer(const _Tp& val, const __false_type&) {
    uninitialized_fill_n(_M_buffer, _M_len, val);
  }

public:
  ptrdiff_t size() const { return _M_len; }
  ptrdiff_t requested_size() const { return _M_original_len; }
  _Tp* begin() { return _M_buffer; }
  _Tp* end() { return _M_buffer + _M_len; }

  _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last) {




     typedef typename __type_traits<_Tp>::has_trivial_default_constructor _Trivial;

    {
      _M_len = distance(__first, __last);
      _M_allocate_buffer();
      if (_M_len > 0)
        _M_initialize_buffer(*__first, _Trivial());
    }
    ;
  }

  ~_Temporary_buffer() {
    _STL::_Destroy(_M_buffer, _M_buffer + _M_len);
    free(_M_buffer);
  }

private:

  _Temporary_buffer(const _Temporary_buffer<_ForwardIterator, _Tp>&) {}
  void operator=(const _Temporary_buffer<_ForwardIterator, _Tp>&) {}
};





template <class _ForwardIterator,
          class _Tp

                    = typename iterator_traits<_ForwardIterator>::value_type

         >
struct temporary_buffer : public _Temporary_buffer<_ForwardIterator, _Tp>
{
  temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)
    : _Temporary_buffer<_ForwardIterator, _Tp>(__first, __last) {}
  ~temporary_buffer() {}
};



}


# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_tempbuf.c" 1
# 33 "c:/marmalade/6.2/s3e/h/std/c++/stl/_tempbuf.c"
namespace _STL {

template <class _Tp>
pair<_Tp*, ptrdiff_t>
__get_temporary_buffer(ptrdiff_t __len, _Tp*)
{
  if (__len > ptrdiff_t(0x7fffffffL / sizeof(_Tp)))
    __len = 0x7fffffffL / sizeof(_Tp);

  while (__len > 0) {
    _Tp* __tmp = (_Tp*) malloc((size_t)__len * sizeof(_Tp));
    if (__tmp != 0)
      return pair<_Tp*, ptrdiff_t>(__tmp, __len);
    __len /= 2;
  }

  return pair<_Tp*, ptrdiff_t>((_Tp*)0, 0);
}
}
# 159 "c:/marmalade/6.2/s3e/h/std/c++/stl/_tempbuf.h" 2
# 37 "c:/marmalade/6.2/s3e/h/std/c++/memory" 2



# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_raw_storage_iter.h" 1
# 37 "c:/marmalade/6.2/s3e/h/std/c++/stl/_raw_storage_iter.h"
namespace _STL {

template <class _ForwardIterator, class _Tp>
class raw_storage_iterator



{
protected:
  _ForwardIterator _M_iter;
public:
  typedef output_iterator_tag iterator_category;

  typedef void value_type;
  typedef void difference_type;
  typedef void pointer;
  typedef void reference;

  explicit raw_storage_iterator(_ForwardIterator __x) : _M_iter(__x) {}
  raw_storage_iterator<_ForwardIterator, _Tp>& operator*() { return *this; }
  raw_storage_iterator<_ForwardIterator, _Tp>& operator=(const _Tp& __element) {
    _Construct(&*_M_iter, __element);
    return *this;
  }
  raw_storage_iterator<_ForwardIterator, _Tp>& operator++() {
    ++_M_iter;
    return *this;
  }
  raw_storage_iterator<_ForwardIterator, _Tp> operator++(int) {
    raw_storage_iterator<_ForwardIterator, _Tp> __tmp = *this;
    ++_M_iter;
    return __tmp;
  }
};





}
# 41 "c:/marmalade/6.2/s3e/h/std/c++/memory" 2


# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_auto_ptr.h" 1
# 22 "c:/marmalade/6.2/s3e/h/std/c++/stl/_auto_ptr.h"
namespace _STL {

class __ptr_base {
public:
  void* _M_p;
  void __set(const void* p) { _M_p = const_cast<void*>(p); }
  void __set(void* p) { _M_p = p; }
};

template <class _Tp> class auto_ptr_ref {
public:
  __ptr_base& _M_r;
  _Tp* const _M_p;

  auto_ptr_ref(__ptr_base& __r, _Tp* __p) : _M_r(__r), _M_p(__p) { }

  _Tp* release() const { _M_r.__set((void*)0); return _M_p; }

};

template<class _Tp> class auto_ptr : public __ptr_base {
public:
  typedef _Tp element_type;
  typedef auto_ptr<_Tp> _Self;

  _Tp* release() {
    _Tp* __px = this->get();
    this->_M_p = 0;
    return __px;
  }

  void reset(_Tp* __px=0) {
    _Tp* __pt = this->get();
    if (__px != __pt)
      delete __pt;
    this->__set(__px);
  }

  _Tp* get() const { return reinterpret_cast<_Tp*>(const_cast<void*>(_M_p)); }


  _Tp* operator->() const {
   
    return get();
  }

  _Tp& operator*() const {
   
    return *get();
  }

  auto_ptr() { this->_M_p = 0; }

  explicit auto_ptr(_Tp* __px) { this->__set(__px); }



  template<class _Tp1> auto_ptr(auto_ptr<_Tp1>& __r) {
    _Tp* __conversionCheck = __r.release();
    this->__set(__conversionCheck);
  }

  template<class _Tp1> auto_ptr<_Tp>& operator=(auto_ptr<_Tp1>& __r) {
    _Tp* __conversionCheck = __r.release();
    reset(__conversionCheck);
    return *this;
  }


  auto_ptr(_Self& __r) { this->__set(__r.release()); }

  _Self& operator=(_Self& __r) {
    reset(__r.release());
    return *this;
  }

  ~auto_ptr() { delete this->get(); }

  auto_ptr(auto_ptr_ref<_Tp> __r) {
    this->__set(__r.release());
  }

  _Self& operator=(auto_ptr_ref<_Tp> __r) {
    reset(__r.release());
    return *this;
  }


  template<class _Tp1> operator auto_ptr_ref<_Tp1>() {
    return auto_ptr_ref<_Tp1>(*this, this->get());
  }
  template<class _Tp1> operator auto_ptr<_Tp1>() {
    return auto_ptr<_Tp1>(release());
  }





};
}
# 44 "c:/marmalade/6.2/s3e/h/std/c++/memory" 2
# 24 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.h" 2



# 1 "c:/marmalade/6.2/s3e/h/std/c++/cctype" 1
# 30 "c:/marmalade/6.2/s3e/h/std/c++/cctype"
# 1 "c:/marmalade/6.2/s3e/h/std/ctype.h" 1
# 17 "c:/marmalade/6.2/s3e/h/std/ctype.h"
extern "C" {
# 31 "c:/marmalade/6.2/s3e/h/std/ctype.h"
int toupper(int c);
int tolower(int c);
int isalnum(int c);
int isalpha(int c);

int isblank(int c);
int iscntrl(int c);
int isdigit(int c);
int isgraph(int c);
int islower(int c);
int isprint(int c);
int ispunct(int c);
int isspace(int c);
int isupper(int c);
int isxdigit(int c);

}
# 31 "c:/marmalade/6.2/s3e/h/std/c++/cctype" 2
# 51 "c:/marmalade/6.2/s3e/h/std/c++/cctype"
namespace _STL {
using ::isalnum;
using ::isalpha;
using ::iscntrl;
using ::isdigit;
using ::isgraph;
using ::islower;
using ::isprint;
using ::ispunct;
using ::isspace;
using ::isupper;
using ::isxdigit;
using ::tolower;
using ::toupper;
}
# 28 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.h" 2







# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_function.h" 1
# 34 "c:/marmalade/6.2/s3e/h/std/c++/stl/_function.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_function_base.h" 1
# 37 "c:/marmalade/6.2/s3e/h/std/c++/stl/_function_base.h"
namespace _STL {

template <class _Arg, class _Result>
struct unary_function {
  typedef _Arg argument_type;
  typedef _Result result_type;
};

template <class _Arg1, class _Arg2, class _Result>
struct binary_function {
  typedef _Arg1 first_argument_type;
  typedef _Arg2 second_argument_type;
  typedef _Result result_type;
};

template <class _Tp>
struct equal_to : public binary_function<_Tp,_Tp,bool>
{
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x == __y; }
};

template <class _Tp>
struct not_equal_to : public binary_function<_Tp,_Tp,bool>
{
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x != __y; }
};

template <class _Tp>
struct greater : public binary_function<_Tp,_Tp,bool>
{
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x > __y; }
};

template <class _Tp>
struct less : public binary_function<_Tp,_Tp,bool>
{
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x < __y; }
};

template <class _Tp>
struct greater_equal : public binary_function<_Tp,_Tp,bool>
{
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x >= __y; }
};

template <class _Tp>
struct less_equal : public binary_function<_Tp,_Tp,bool>
{
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x <= __y; }
};

template <class _Tp>
less<_Tp> __less(_Tp* ) { return less<_Tp>(); }

template <class _Tp>
equal_to<_Tp> __equal_to(_Tp* ) { return equal_to<_Tp>(); }

template <class _Tp>
struct plus : public binary_function<_Tp,_Tp,_Tp> {
  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x + __y; }
};

template <class _Tp>
struct minus : public binary_function<_Tp,_Tp,_Tp> {
  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x - __y; }
};

template <class _Tp>
plus<_Tp> __plus(_Tp* ) { return plus<_Tp>(); }

template <class _Tp>
minus<_Tp> __minus(_Tp* ) { return minus<_Tp>(); }

template <class _Tp>
struct multiplies : public binary_function<_Tp,_Tp,_Tp> {
  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x * __y; }
};

template <class _Tp>
struct divides : public binary_function<_Tp,_Tp,_Tp> {
  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x / __y; }
};

template <class _Tp>
struct modulus : public binary_function<_Tp,_Tp,_Tp>
{
  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x % __y; }
};

template <class _Tp>
struct negate : public unary_function<_Tp,_Tp>
{
  _Tp operator()(const _Tp& __x) const { return -__x; }
};

template <class _Tp>
struct logical_and : public binary_function<_Tp,_Tp,bool>
{
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x && __y; }
};

template <class _Tp>
struct logical_or : public binary_function<_Tp,_Tp,bool>
{
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x || __y; }
};

template <class _Tp>
struct logical_not : public unary_function<_Tp,bool>
{
  bool operator()(const _Tp& __x) const { return !__x; }
};

template <class _Pair>
struct _Select1st : public unary_function<_Pair, typename _Pair::first_type> {
  const typename _Pair::first_type& operator()(const _Pair& __x) const {
    return __x.first;
  }
};

template <class _Pair>
struct _Select2nd : public unary_function<_Pair, typename _Pair::second_type>
{
  const typename _Pair::second_type& operator()(const _Pair& __x) const {
    return __x.second;
  }
};


template <class _Arg1, class _Arg2>
struct _Project1st : public binary_function<_Arg1, _Arg2, _Arg1> {
  _Arg1 operator()(const _Arg1& __x, const _Arg2&) const { return __x; }
};

template <class _Arg1, class _Arg2>
struct _Project2nd : public binary_function<_Arg1, _Arg2, _Arg2> {
  _Arg2 operator()(const _Arg1&, const _Arg2& __y) const { return __y; }
};
# 188 "c:/marmalade/6.2/s3e/h/std/c++/stl/_function_base.h"
template <class _Tp>
struct _Identity : public unary_function<_Tp,_Tp> {
  const _Tp& operator()(const _Tp& __x) const { return __x; }
};

template <class _Result, class _Argument>
struct _Constant_unary_fun {
  typedef _Argument argument_type;
  typedef _Result result_type;
  result_type _M_val;

  _Constant_unary_fun(const result_type& __v) : _M_val(__v) {}
  const result_type& operator()(const _Argument&) const { return _M_val; }
};

template <class _Result, class _Arg1, class _Arg2>
struct _Constant_binary_fun {
  typedef _Arg1 first_argument_type;
  typedef _Arg2 second_argument_type;
  typedef _Result result_type;
  _Result _M_val;

  _Constant_binary_fun(const _Result& __v) : _M_val(__v) {}
  const result_type& operator()(const _Arg1&, const _Arg2&) const {
    return _M_val;
  }
};


template <class _Tp> inline _Tp __identity_element(plus<_Tp>) { return _Tp(0); }
template <class _Tp> inline _Tp __identity_element(multiplies<_Tp>) { return _Tp(1); }

}
# 35 "c:/marmalade/6.2/s3e/h/std/c++/stl/_function.h" 2


namespace _STL {



template <class _Tp> inline _Tp identity_element(plus<_Tp>) { return _Tp(0); }
template <class _Tp> inline _Tp identity_element(multiplies<_Tp>) { return _Tp(1); }
# 84 "c:/marmalade/6.2/s3e/h/std/c++/stl/_function.h"
template <class _Predicate>
class unary_negate :
    public unary_function<typename _Predicate::argument_type, bool> {
protected:
  _Predicate _M_pred;
public:
  explicit unary_negate(const _Predicate& __x) : _M_pred(__x) {}
  bool operator()(const typename _Predicate::argument_type& __x) const {
    return !_M_pred(__x);
  }
};

template <class _Predicate>
inline unary_negate<_Predicate>
not1(const _Predicate& __pred)
{
  return unary_negate<_Predicate>(__pred);
}

template <class _Predicate>
class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type,
                             bool> {
protected:
  _Predicate _M_pred;
public:
  explicit binary_negate(const _Predicate& __x) : _M_pred(__x) {}
  bool operator()(const typename _Predicate::first_argument_type& __x,
                  const typename _Predicate::second_argument_type& __y) const
  {
    return !_M_pred(__x, __y);
  }
};

template <class _Predicate>
inline binary_negate<_Predicate>
not2(const _Predicate& __pred)
{
  return binary_negate<_Predicate>(__pred);
}

template <class _Operation>
class binder1st :
    public unary_function<typename _Operation::second_argument_type,
                          typename _Operation::result_type > {
protected:
  _Operation _M_op;
  typename _Operation::first_argument_type _M_value;
public:
  binder1st(const _Operation& __x,
            const typename _Operation::first_argument_type& __y)
      : _M_op(__x), _M_value(__y) {}

  typename _Operation::result_type
  operator()(const typename _Operation::second_argument_type& __x) const {
    return _M_op(_M_value, __x);
  }

  typename _Operation::result_type
  operator()(typename _Operation::second_argument_type& __x) const {
    return _M_op(_M_value, __x);
  }
};

template <class _Operation, class _Tp>
inline binder1st<_Operation>
bind1st(const _Operation& __fn, const _Tp& __x)
{
  typedef typename _Operation::first_argument_type _Arg1_type;
  return binder1st<_Operation>(__fn, _Arg1_type(__x));
}

template <class _Operation>
class binder2nd
  : public unary_function<typename _Operation::first_argument_type,
                          typename _Operation::result_type> {
protected:
  _Operation _M_op;
  typename _Operation::second_argument_type value;
public:
  binder2nd(const _Operation& __x,
            const typename _Operation::second_argument_type& __y)
      : _M_op(__x), value(__y) {}

  typename _Operation::result_type
  operator()(const typename _Operation::first_argument_type& __x) const {
    return _M_op(__x, value);
  }

  typename _Operation::result_type
  operator()(typename _Operation::first_argument_type& __x) const {
    return _M_op(__x, value);
  }
};

template <class _Operation, class _Tp>
inline binder2nd<_Operation>
bind2nd(const _Operation& __fn, const _Tp& __x)
{
  typedef typename _Operation::second_argument_type _Arg2_type;
  return binder2nd<_Operation>(__fn, _Arg2_type(__x));
}




template <class _Operation1, class _Operation2>
class unary_compose :
  public unary_function<typename _Operation2::argument_type,
                        typename _Operation1::result_type> {
protected:
  _Operation1 _M_fn1;
  _Operation2 _M_fn2;
public:
  unary_compose(const _Operation1& __x, const _Operation2& __y)
    : _M_fn1(__x), _M_fn2(__y) {}

  typename _Operation1::result_type
  operator()(const typename _Operation2::argument_type& __x) const {
    return _M_fn1(_M_fn2(__x));
  }

  typename _Operation1::result_type
  operator()(typename _Operation2::argument_type& __x) const {
    return _M_fn1(_M_fn2(__x));
  }
};

template <class _Operation1, class _Operation2>
inline unary_compose<_Operation1,_Operation2>
compose1(const _Operation1& __fn1, const _Operation2& __fn2)
{
  return unary_compose<_Operation1,_Operation2>(__fn1, __fn2);
}

template <class _Operation1, class _Operation2, class _Operation3>
class binary_compose :
    public unary_function<typename _Operation2::argument_type,
                          typename _Operation1::result_type> {
protected:
  _Operation1 _M_fn1;
  _Operation2 _M_fn2;
  _Operation3 _M_fn3;
public:
  binary_compose(const _Operation1& __x, const _Operation2& __y,
                 const _Operation3& __z)
    : _M_fn1(__x), _M_fn2(__y), _M_fn3(__z) { }

  typename _Operation1::result_type
  operator()(const typename _Operation2::argument_type& __x) const {
    return _M_fn1(_M_fn2(__x), _M_fn3(__x));
  }

  typename _Operation1::result_type
  operator()(typename _Operation2::argument_type& __x) const {
    return _M_fn1(_M_fn2(__x), _M_fn3(__x));
  }
};

template <class _Operation1, class _Operation2, class _Operation3>
inline binary_compose<_Operation1, _Operation2, _Operation3>
compose2(const _Operation1& __fn1, const _Operation2& __fn2,
         const _Operation3& __fn3)
{
  return binary_compose<_Operation1,_Operation2,_Operation3>
    (__fn1, __fn2, __fn3);
}






template <class _Tp> struct identity : public _Identity<_Tp> {};

template <class _Pair> struct select1st : public _Select1st<_Pair> {};
template <class _Pair> struct select2nd : public _Select2nd<_Pair> {};

template <class _Arg1, class _Arg2>
struct project1st : public _Project1st<_Arg1, _Arg2> {};

template <class _Arg1, class _Arg2>
struct project2nd : public _Project2nd<_Arg1, _Arg2> {};






template <class _Result>
struct _Constant_void_fun {
  typedef _Result result_type;
  result_type _M_val;

  _Constant_void_fun(const result_type& __v) : _M_val(__v) {}
  const result_type& operator()() const { return _M_val; }
};


template <class _Result>
struct constant_void_fun : public _Constant_void_fun<_Result> {
  constant_void_fun(const _Result& __v) : _Constant_void_fun<_Result>(__v) {}
};

template <class _Result, class _Argument = _Result >
struct constant_unary_fun : public _Constant_unary_fun<_Result, _Argument>
{
  constant_unary_fun(const _Result& __v)
    : _Constant_unary_fun<_Result, _Argument>(__v) {}
};

template <class _Result, class _Arg1 = _Result, class _Arg2 = _Arg1 >
struct constant_binary_fun
  : public _Constant_binary_fun<_Result, _Arg1, _Arg2>
{
  constant_binary_fun(const _Result& __v)
    : _Constant_binary_fun<_Result, _Arg1, _Arg2>(__v) {}
};

template <class _Result>
inline constant_void_fun<_Result> constant0(const _Result& __val)
{
  return constant_void_fun<_Result>(__val);
}

template <class _Result>
inline constant_unary_fun<_Result,_Result> constant1(const _Result& __val)
{
  return constant_unary_fun<_Result,_Result>(__val);
}

template <class _Result>
inline constant_binary_fun<_Result,_Result,_Result>
constant2(const _Result& __val)
{
  return constant_binary_fun<_Result,_Result,_Result>(__val);
}



class subtractive_rng : public unary_function<unsigned long, unsigned long> {
private:
  unsigned long _M_table[55];
  unsigned long _M_index1;
  unsigned long _M_index2;
public:
  unsigned long operator()(unsigned long __limit) {
    _M_index1 = (_M_index1 + 1) % 55;
    _M_index2 = (_M_index2 + 1) % 55;
    _M_table[_M_index1] = _M_table[_M_index1] - _M_table[_M_index2];
    return _M_table[_M_index1] % __limit;
  }

  void _M_initialize(unsigned long __seed)
  {
    unsigned long __k = 1;
    _M_table[54] = __seed;
    unsigned long __i;
    for (__i = 0; __i < 54; __i++) {
        unsigned long __ii = (21 * (__i + 1) % 55) - 1;
        _M_table[__ii] = __k;
        __k = __seed - __k;
        __seed = _M_table[__ii];
    }
    for (int __loop = 0; __loop < 4; __loop++) {
        for (__i = 0; __i < 55; __i++)
            _M_table[__i] = _M_table[__i] - _M_table[(1 + __i + 30) % 55];
    }
    _M_index1 = 0;
    _M_index2 = 31;
  }

  subtractive_rng(unsigned int __seed) { _M_initialize(__seed); }
  subtractive_rng() { _M_initialize(161803398ul); }
};



}

# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_function_adaptors.h" 1
# 58 "c:/marmalade/6.2/s3e/h/std/c++/stl/_function_adaptors.h"
namespace _STL {
# 411 "c:/marmalade/6.2/s3e/h/std/c++/stl/_function_adaptors.h"
template <class _Ret, class _Tp>
class mem_fun_t : public unary_function<_Tp*,_Ret> {
  typedef _Ret (_Tp::*__fun_type)(void);
public:
  explicit mem_fun_t(__fun_type __pf) : _M_f(__pf) {}
  _Ret operator()(_Tp* __p) const { return (__p->*_M_f)(); }
private:
  __fun_type _M_f;
};

template <class _Ret, class _Tp>
class const_mem_fun_t : public unary_function<const _Tp*,_Ret> {
  typedef _Ret (_Tp::*__fun_type)(void) const;
public:
  explicit const_mem_fun_t(__fun_type __pf) : _M_f(__pf) {}
  _Ret operator()(const _Tp* __p) const { return (__p->*_M_f)(); }
private:
  __fun_type _M_f;
};


template <class _Ret, class _Tp>
class mem_fun_ref_t : public unary_function<_Tp,_Ret> {
  typedef _Ret (_Tp::*__fun_type)(void);
public:
  explicit mem_fun_ref_t(__fun_type __pf) : _M_f(__pf) {}
  _Ret operator()(_Tp& __r) const { return (__r.*_M_f)(); }
private:
  __fun_type _M_f;
};

template <class _Ret, class _Tp>
class const_mem_fun_ref_t : public unary_function<_Tp,_Ret> {
  typedef _Ret (_Tp::*__fun_type)(void) const;
public:
  explicit const_mem_fun_ref_t(__fun_type __pf) : _M_f(__pf) {}
  _Ret operator()(const _Tp& __r) const { return (__r.*_M_f)(); }
private:
  __fun_type _M_f;
};

template <class _Ret, class _Tp, class _Arg>
class mem_fun1_t : public binary_function<_Tp*,_Arg,_Ret> {
  typedef _Ret (_Tp::*__fun_type)(_Arg);
public:
  explicit mem_fun1_t(__fun_type __pf) : _M_f(__pf) {}
  _Ret operator()(_Tp* __p, _Arg __x) const { return (__p->*_M_f)(__x); }
private:
  __fun_type _M_f;
};

template <class _Ret, class _Tp, class _Arg>
class const_mem_fun1_t : public binary_function<const _Tp*,_Arg,_Ret> {
  typedef _Ret (_Tp::*__fun_type)(_Arg) const;
public:
  explicit const_mem_fun1_t(__fun_type __pf) : _M_f(__pf) {}
  _Ret operator()(const _Tp* __p, _Arg __x) const
    { return (__p->*_M_f)(__x); }
private:
  __fun_type _M_f;
};

template <class _Ret, class _Tp, class _Arg>
class mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {
  typedef _Ret (_Tp::*__fun_type)(_Arg);
public:
  explicit mem_fun1_ref_t(__fun_type __pf) : _M_f(__pf) {}
  _Ret operator()(_Tp& __r, _Arg __x) const { return (__r.*_M_f)(__x); }
private:
  __fun_type _M_f;
};

template <class _Ret, class _Tp, class _Arg>
class const_mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {
  typedef _Ret (_Tp::*__fun_type)(_Arg) const;
public:
  explicit const_mem_fun1_ref_t(__fun_type __pf) : _M_f(__pf) {}
  _Ret operator()(const _Tp& __r, _Arg __x) const { return (__r.*_M_f)(__x); }
private:
  __fun_type _M_f;
};

template <class _Arg, class _Result>
class pointer_to_unary_function : public unary_function<_Arg, _Result> {
protected:
  _Result (*_M_ptr)(_Arg);
public:
  pointer_to_unary_function() {}
  explicit pointer_to_unary_function(_Result (*__x)(_Arg)) : _M_ptr(__x) {}
  _Result operator()(_Arg __x) const { return _M_ptr(__x); }
};

template <class _Arg1, class _Arg2, class _Result>
class pointer_to_binary_function :
  public binary_function<_Arg1,_Arg2,_Result> {
protected:
    _Result (*_M_ptr)(_Arg1, _Arg2);
public:
    pointer_to_binary_function() {}
    explicit pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) {}
    _Result operator()(_Arg1 __x, _Arg2 __y) const {
      return _M_ptr(__x, __y);
    }
};
# 737 "c:/marmalade/6.2/s3e/h/std/c++/stl/_function_adaptors.h"
template <class _Result, class _Tp>
inline mem_fun_t<_Result,_Tp>
mem_fun(_Result (_Tp::*__f)()) { return mem_fun_t<_Result,_Tp>(__f); }

template <class _Result, class _Tp>
inline const_mem_fun_t<_Result,_Tp>
mem_fun(_Result (_Tp::*__f)() const) { return const_mem_fun_t<_Result,_Tp>(__f); }

template <class _Result, class _Tp>
inline mem_fun_ref_t<_Result,_Tp>
mem_fun_ref(_Result (_Tp::*__f)()) { return mem_fun_ref_t<_Result,_Tp>(__f); }

template <class _Result, class _Tp>
inline const_mem_fun_ref_t<_Result,_Tp>
mem_fun_ref(_Result (_Tp::*__f)() const) { return const_mem_fun_ref_t<_Result,_Tp>(__f); }

template <class _Result, class _Tp, class _Arg>
inline mem_fun1_t<_Result,_Tp,_Arg>
mem_fun(_Result (_Tp::*__f)(_Arg)) { return mem_fun1_t<_Result,_Tp,_Arg>(__f); }

template <class _Result, class _Tp, class _Arg>
inline const_mem_fun1_t<_Result,_Tp,_Arg>
mem_fun(_Result (_Tp::*__f)(_Arg) const) { return const_mem_fun1_t<_Result,_Tp,_Arg>(__f); }

template <class _Result, class _Tp, class _Arg>
inline mem_fun1_ref_t<_Result,_Tp,_Arg>
mem_fun_ref(_Result (_Tp::*__f)(_Arg)) { return mem_fun1_ref_t<_Result,_Tp,_Arg>(__f); }

template <class _Result, class _Tp, class _Arg>
inline const_mem_fun1_ref_t<_Result,_Tp,_Arg>
mem_fun_ref(_Result (_Tp::*__f)(_Arg) const) { return const_mem_fun1_ref_t<_Result,_Tp,_Arg>(__f); }




template <class _Result, class _Tp, class _Arg>
inline mem_fun1_t<_Result,_Tp,_Arg>
mem_fun1(_Result (_Tp::*__f)(_Arg)) { return mem_fun1_t<_Result,_Tp,_Arg>(__f); }

template <class _Result, class _Tp, class _Arg>
inline const_mem_fun1_t<_Result,_Tp,_Arg>
mem_fun1(_Result (_Tp::*__f)(_Arg) const) { return const_mem_fun1_t<_Result,_Tp,_Arg>(__f); }

template <class _Result, class _Tp, class _Arg>
inline mem_fun1_ref_t<_Result,_Tp,_Arg>
mem_fun1_ref(_Result (_Tp::*__f)(_Arg)) { return mem_fun1_ref_t<_Result,_Tp,_Arg>(__f); }

template <class _Result, class _Tp, class _Arg>
inline const_mem_fun1_ref_t<_Result,_Tp,_Arg>
mem_fun1_ref(_Result (_Tp::*__f)(_Arg) const) { return const_mem_fun1_ref_t<_Result,_Tp,_Arg>(__f); }





template <class _Arg, class _Result>
inline pointer_to_unary_function<_Arg, _Result>
ptr_fun(_Result (*__f)(_Arg))
{ return pointer_to_unary_function<_Arg, _Result>(__f); }

template <class _Arg1, class _Arg2, class _Result>
inline pointer_to_binary_function<_Arg1,_Arg2,_Result>
ptr_fun(_Result (*__f)(_Arg1, _Arg2))
{ return pointer_to_binary_function<_Arg1,_Arg2,_Result>(__f); }

}
# 366 "c:/marmalade/6.2/s3e/h/std/c++/stl/_function.h" 2
# 36 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.h" 2


# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ctraits_fns.h" 1
# 28 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ctraits_fns.h"
namespace _STL {

template <class _Traits>
struct _Eq_traits
  : public binary_function<typename _Traits::char_type,
                           typename _Traits::char_type,
                           bool>
{
  bool operator()(const typename _Traits::char_type& __x,
                  const typename _Traits::char_type& __y) const
    { return _Traits::eq(__x, __y); }
};

template <class _Traits>
struct _Eq_char_bound
  : public unary_function<typename _Traits::char_type, bool>
{
  typename _Traits::char_type __val;
  _Eq_char_bound(typename _Traits::char_type __c) : __val(__c) {}
  bool operator()(const typename _Traits::char_type& __x) const
    { return _Traits::eq(__x, __val); }
};

template <class _Traits>
struct _Neq_char_bound
  : public unary_function<typename _Traits::char_type, bool>
{
  typename _Traits::char_type __val;
  _Neq_char_bound(typename _Traits::char_type __c) : __val(__c) {}
  bool operator()(const typename _Traits::char_type& __x) const
    { return !_Traits::eq(__x, __val); }
};

template <class _Traits>
struct _Eq_int_bound
  : public unary_function<typename _Traits::char_type, bool>
{
  typename _Traits::int_type __val;

  _Eq_int_bound(typename _Traits::int_type __c) : __val(__c) {}
  bool operator()(const typename _Traits::char_type& __x) const
    { return _Traits::eq_int_type(_Traits::to_int_type(__x), __val); }
};
# 85 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ctraits_fns.h"
}
# 39 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.h" 2
# 79 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.h"
namespace _STL {







template <class _Traits> struct _Not_within_traits
  : public unary_function<typename _Traits::char_type, bool> {
  typedef typename _Traits::char_type _CharT;
  const _CharT* _M_first;
  const _CharT* _M_last;

  _Not_within_traits(const typename _Traits::char_type* __f,
       const typename _Traits::char_type* __l)
    : _M_first(__f), _M_last(__l) {}

  bool operator()(const typename _Traits::char_type& __x) const {
    return find_if(_M_first, _M_last,
                   _Eq_char_bound<_Traits>(__x)) == _M_last;
  }
};
# 114 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.h"
template <class _Tp, class _Alloc> class _String_base {
public:
 
  typedef typename _Alloc_traits<_Tp, _Alloc>::allocator_type allocator_type;
  _Tp* _M_start;
  _Tp* _M_finish;
  _STLP_alloc_proxy<_Tp*, _Tp, allocator_type> _M_end_of_storage;

  void _M_allocate_block(size_t);
  void _M_deallocate_block()
    { _M_end_of_storage.deallocate(_M_start, _M_end_of_storage._M_data - _M_start); }

  size_t max_size() const { return (size_t(-1) / sizeof(_Tp)) - 1; }

  _String_base(const allocator_type& __a)
    : _M_start(0), _M_finish(0), _M_end_of_storage(__a, (_Tp*)0) {}

  _String_base(const allocator_type& __a, size_t __n)
    : _M_start(0), _M_finish(0), _M_end_of_storage(__a, (_Tp*)0)
    { _M_allocate_block(__n); }

  ~_String_base() { _M_deallocate_block(); }

  void _M_throw_length_error() const;
  void _M_throw_out_of_range() const;
};
# 164 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.h"
struct _String_reserve_t {};

template <class _CharT, class _Traits, class _Alloc> class basic_string : protected _String_base<_CharT,_Alloc> {
private:
  typedef _String_base<_CharT,_Alloc> _Base;
  typedef basic_string<_CharT, _Traits, _Alloc> _Self;


  typedef typename _Is_integer<_CharT>::_Integral _Char_Is_Integral;
public:
  typedef _CharT value_type;
  typedef _Traits traits_type;

  typedef value_type* pointer;
  typedef const value_type* const_pointer;
  typedef value_type& reference;
  typedef const value_type& const_reference;
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;
  typedef random_access_iterator_tag _Iterator_category;

  typedef const value_type* const_iterator;
  typedef value_type* iterator;

  typedef _STL::reverse_iterator<const_iterator> const_reverse_iterator; typedef _STL::reverse_iterator<iterator> reverse_iterator;







  static const size_t npos = ~(size_t)0;


  typedef _String_reserve_t _Reserve_t;
# 212 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.h"
public:
  typedef typename _String_base<_CharT,_Alloc>::allocator_type allocator_type;

  allocator_type get_allocator() const {
    return (const allocator_type&)this->_M_end_of_storage;
  }

  basic_string();

  explicit basic_string(const allocator_type& __a)
    : _String_base<_CharT,_Alloc>(__a, 8) {
    _M_terminate_string();
  }

  basic_string(_Reserve_t, size_t __n,
               const allocator_type& __a = allocator_type())
    : _String_base<_CharT,_Alloc>(__a, __n + 1) {
    _M_terminate_string();
  }

  basic_string(const basic_string<_CharT, _Traits, _Alloc>&);

  basic_string(const _Self& __s, size_type __pos, size_type __n = npos,
               const allocator_type& __a = allocator_type())
    : _String_base<_CharT,_Alloc>(__a) {
    if (__pos > __s.size())
      this->_M_throw_out_of_range();
    else
      _M_range_initialize(__s._M_start + __pos,
                          __s._M_start + __pos + (min) (__n, __s.size() - __pos));
  }

  basic_string(const _CharT* __s, size_type __n,
               const allocator_type& __a = allocator_type())
    : _String_base<_CharT,_Alloc>(__a)
    {
     
      _M_range_initialize(__s, __s + __n);
    }

  basic_string(const _CharT* __s,
               const allocator_type& __a = allocator_type());

  basic_string(size_type __n, _CharT __c,
               const allocator_type& __a = allocator_type())
    : _String_base<_CharT,_Alloc>(__a, __n + 1)
  {
    this->_M_finish = uninitialized_fill_n(this->_M_start, __n, __c);
    _M_terminate_string();
  }
# 274 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.h"
  template <class _InputIterator> basic_string(_InputIterator __f, _InputIterator __l,
               const allocator_type & __a = allocator_type())
    : _String_base<_CharT,_Alloc>(__a)
  {
    typedef typename _Is_integer<_InputIterator>::_Integral _Integral;
    _M_initialize_dispatch(__f, __l, _Integral());
  }
# 305 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.h"
  ~basic_string() { _STL::_Destroy(this->_M_start, this->_M_finish + 1); }

  _Self& operator=(const _Self& __s) {
    if (&__s != this)
      assign(__s._M_start, __s._M_finish);
    return *this;
  }

  _Self& operator=(const _CharT* __s) {
   
    return assign(__s, __s + traits_type::length(__s));
  }

  _Self& operator=(_CharT __c)
    { return assign(static_cast<size_type>(1), __c); }

  static _CharT _M_null() {
    return _CharT();
  }

private:


  void _M_construct_null_aux(_CharT* __p, const __false_type&) {
    _Construct(__p);
  }
  void _M_construct_null_aux(_CharT* __p, const __true_type&) {
    *__p = 0;
  }

  void _M_construct_null(_CharT* __p) {
    _M_construct_null_aux(__p, _Char_Is_Integral());
  }

private:



  void _M_terminate_string_aux(const __false_type&) {
    {
      _M_construct_null(this->_M_finish);
    }
    ;
  }

  void _M_terminate_string_aux(const __true_type&) {
    *(this->_M_finish)=0;
  }

  void _M_terminate_string() {
    _M_terminate_string_aux(_Char_Is_Integral());
  }






  template <class _InputIter>
  bool _M_inside(_InputIter __i) const {
    const _CharT* __s = static_cast<const _CharT*>(&(*__i));
    return (__s >= this->_M_start) && (__s < this->_M_finish);
  }




  template <class _InputIter> void _M_range_initialize(_InputIter __f, _InputIter __l,
                           const input_iterator_tag &) {
    this->_M_allocate_block(8);
    _M_construct_null(this->_M_finish);
    {
      append(__f, __l);
    }
    ;
  }

  template <class _ForwardIter> void _M_range_initialize(_ForwardIter __f, _ForwardIter __l,
                           const forward_iterator_tag &) {
    difference_type __n = distance(__f, __l);
    this->_M_allocate_block(__n + 1);
    this->_M_finish = uninitialized_copy(__f, __l, this->_M_start);
    _M_terminate_string();
  }

  template <class _InputIter> void _M_range_initialize(_InputIter __f, _InputIter __l) {
    _M_range_initialize(__f, __l, typename iterator_traits< _InputIter >::iterator_category());
  }

  template <class _Integer> void _M_initialize_dispatch(_Integer __n, _Integer __x, const __true_type&) {
    this->_M_allocate_block(__n + 1);
    this->_M_finish = uninitialized_fill_n(this->_M_start, __n, __x);
    _M_terminate_string();
  }

  template <class _InputIter> void _M_initialize_dispatch(_InputIter __f, _InputIter __l, const __false_type&) {
     _M_range_initialize(__f, __l);
  }
# 415 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.h"
public:
  iterator begin() { return this->_M_start; }
  iterator end() { return this->_M_finish; }
  const_iterator begin() const { return this->_M_start; }
  const_iterator end() const { return this->_M_finish; }

  reverse_iterator rbegin()
    { return reverse_iterator(this->_M_finish); }
  reverse_iterator rend()
    { return reverse_iterator(this->_M_start); }
  const_reverse_iterator rbegin() const
    { return const_reverse_iterator(this->_M_finish); }
  const_reverse_iterator rend() const
    { return const_reverse_iterator(this->_M_start); }

public:
  size_type size() const { return this->_M_finish - this->_M_start; }
  size_type length() const { return size(); }

  size_t max_size() const { return _Base::max_size(); }


  void resize(size_type __n, _CharT __c) {
    if (__n <= size())
      erase(begin() + __n, end());
    else
      append(__n - size(), __c);
  }
  void resize(size_type __n) { resize(__n, _M_null()); }

  void reserve(size_type = 0);

  size_type capacity() const { return (this->_M_end_of_storage._M_data - this->_M_start) - 1; }

  void clear() {
    if (!empty()) {
      _Traits::assign(*(this->_M_start), _M_null());
      _STL::_Destroy(this->_M_start+1, this->_M_finish+1);
      this->_M_finish = this->_M_start;
    }
  }

  bool empty() const { return this->_M_start == this->_M_finish; }

public:

  const_reference operator[](size_type __n) const
    { return *(this->_M_start + __n); }
  reference operator[](size_type __n)
    { return *(this->_M_start + __n); }

  const_reference at(size_type __n) const {
    if (__n >= size())
      this->_M_throw_out_of_range();
    return *(this->_M_start + __n);
  }

  reference at(size_type __n) {
    if (__n >= size())
      this->_M_throw_out_of_range();
    return *(this->_M_start + __n);
  }

public:

  _Self& operator+=(const _Self& __s) { return append(__s); }
  _Self& operator+=(const _CharT* __s) { return append(__s); }
  _Self& operator+=(_CharT __c) { push_back(__c); return *this; }

  _Self& append(const _Self& __s)
    { return append(__s._M_start, __s._M_finish); }

  _Self& append(const _Self& __s,
                       size_type __pos, size_type __n)
  {
    if (__pos > __s.size())
      this->_M_throw_out_of_range();
    return append(__s._M_start + __pos,
                  __s._M_start + __pos + (min) (__n, __s.size() - __pos));
  }

  _Self& append(const _CharT* __s, size_type __n)
    { return append(__s, __s+__n); }
  _Self& append(const _CharT* __s)
    { return append(__s, __s + traits_type::length(__s)); }
  _Self& append(size_type __n, _CharT __c);





  template <class _InputIter> _Self& append(_InputIter __first, _InputIter __last) {
    typedef typename _Is_integer<_InputIter>::_Integral _Integral;
    return _M_append_dispatch(__first, __last, _Integral());
  }







  void push_back(_CharT __c) {
    if (this->_M_finish + 1 == this->_M_end_of_storage._M_data)
      reserve(size() + (max)(size(), static_cast<size_type>(1)));
    _M_construct_null(this->_M_finish + 1);
    _Traits::assign(*(this->_M_finish), __c);
    ++this->_M_finish;
  }

  void pop_back() {
    _Traits::assign(*(this->_M_finish - 1), _M_null());
    _STL::_Destroy(this->_M_finish);
    --this->_M_finish;
  }

private:



  template <class _InputIter> _Self& append(_InputIter __first, _InputIter __last, const input_iterator_tag &)
  {
   for ( ; __first != __last ; ++__first)
     push_back(*__first);
   return *this;
 }

  template <class _ForwardIter> _Self& append(_ForwardIter __first, _ForwardIter __last,
                       const forward_iterator_tag &) {
    if (__first != __last) {
     const size_type __old_size = size();
     difference_type __n = distance(__first, __last);
     if (static_cast<size_type>(__n) > max_size() || __old_size > max_size() - static_cast<size_type>(__n))
       this->_M_throw_length_error();
     if (__old_size + __n > capacity()) {
       const size_type __len = __old_size +
                             (max)(__old_size, static_cast<size_type>(__n)) + 1;
       pointer __new_start = this->_M_end_of_storage.allocate(__len);
       pointer __new_finish = __new_start;
       {
         __new_finish = uninitialized_copy(this->_M_start, this->_M_finish, __new_start);
         __new_finish = uninitialized_copy(__first, __last, __new_finish);
         _M_construct_null(__new_finish);
       }
       ;

       _STL::_Destroy(this->_M_start, this->_M_finish + 1);
       this->_M_deallocate_block();
       this->_M_start = __new_start;
       this->_M_finish = __new_finish;
       this->_M_end_of_storage._M_data = __new_start + __len;
     }
     else {
       _ForwardIter __f1 = __first;
       ++__f1;
       uninitialized_copy(__f1, __last, this->_M_finish + 1);
       {
         _M_construct_null(this->_M_finish + __n);
       }
       ;
       _Traits::assign(*end(), *__first);
       this->_M_finish += __n;
     }
   }
   return *this;
 }

  template <class _Integer> _Self& _M_append_dispatch(_Integer __n, _Integer __x, const __true_type&) {
    return append((size_type) __n, (_CharT) __x);
  }

  template <class _InputIter> _Self& _M_append_dispatch(_InputIter __f, _InputIter __l,
                                   const __false_type&) {
    return append(__f, __l, typename iterator_traits< _InputIter >::iterator_category());
  }



public:

  _Self& assign(const _Self& __s)
    { return assign(__s._M_start, __s._M_finish); }

  _Self& assign(const _Self& __s,
                       size_type __pos, size_type __n) {
    if (__pos > __s.size())
      this->_M_throw_out_of_range();
    return assign(__s._M_start + __pos,
                  __s._M_start + __pos + (min) (__n, __s.size() - __pos));
  }

  _Self& assign(const _CharT* __s, size_type __n)
    { return assign(__s, __s + __n); }

  _Self& assign(const _CharT* __s)
    { return assign(__s, __s + _Traits::length(__s)); }

  _Self& assign(size_type __n, _CharT __c);



private:

  template <class _Integer>
  _Self& _M_assign_dispatch(_Integer __n, _Integer __x, const __true_type&) {
    return assign((size_type) __n, (_CharT) __x);
  }

  template <class _InputIter>
  _Self& _M_assign_dispatch(_InputIter __f, _InputIter __l,
       const __false_type&) {
    pointer __cur = this->_M_start;
    while (__f != __l && __cur != this->_M_finish) {
      _Traits::assign(*__cur, *__f);
      ++__f;
      ++__cur;
    }
    if (__f == __l)
      erase(__cur, end());
    else
      append(__f, __l);
    return *this;
  }

public:


  template <class _InputIter> _Self& assign(_InputIter __first, _InputIter __last) {
    typedef typename _Is_integer<_InputIter>::_Integral _Integral;
    return _M_assign_dispatch(__first, __last, _Integral());
  }



  _Self& assign(const _CharT* __f, const _CharT* __l)
  {
    ptrdiff_t __n = __l - __f;
    if (static_cast<size_type>(__n) <= size()) {
      _Traits::copy(this->_M_start, __f, __n);
      erase(begin() + __n, end());
    }
    else {
      _Traits::copy(this->_M_start, __f, size());
      append(__f + size(), __l);
    }
    return *this;
  }

public:

  _Self& insert(size_type __pos, const _Self& __s) {
    if (__pos > size())
      this->_M_throw_out_of_range();
    if (size() > max_size() - __s.size())
      this->_M_throw_length_error();
    insert(begin() + __pos, __s._M_start, __s._M_finish);
    return *this;
  }

  _Self& insert(size_type __pos, const _Self& __s,
                       size_type __beg, size_type __n) {
    if (__pos > size() || __beg > __s.size())
      this->_M_throw_out_of_range();
    size_type __len = (min) (__n, __s.size() - __beg);
    if (size() > max_size() - __len)
      this->_M_throw_length_error();
    insert(begin() + __pos,
           __s._M_start + __beg, __s._M_start + __beg + __len);
    return *this;
  }

  _Self& insert(size_type __pos, const _CharT* __s, size_type __n) {
   
    if (__pos > size())
      this->_M_throw_out_of_range();
    if (size() > max_size() - __n)
      this->_M_throw_length_error();
    insert(begin() + __pos, __s, __s + __n);
    return *this;
  }

  _Self& insert(size_type __pos, const _CharT* __s) {
   
    if (__pos > size())
      this->_M_throw_out_of_range();
    size_type __len = _Traits::length(__s);
    if (size() > max_size() - __len)
      this->_M_throw_length_error();
    insert(this->_M_start + __pos, __s, __s + __len);
    return *this;
  }

  _Self& insert(size_type __pos, size_type __n, _CharT __c) {
    if (__pos > size())
      this->_M_throw_out_of_range();
    if (size() > max_size() - __n)
      this->_M_throw_length_error();
    insert(begin() + __pos, __n, __c);
    return *this;
  }

  iterator insert(iterator __p, _CharT __c) {
   
    if (__p == end()) {
      push_back(__c);
      return this->_M_finish - 1;
    }
    else
      return _M_insert_aux(__p, __c);
  }

  void insert(iterator __p, size_t __n, _CharT __c);





  template <class _InputIter> void insert(iterator __p, _InputIter __first, _InputIter __last) {
    typedef typename _Is_integer<_InputIter>::_Integral _Integral;
    _M_insert_dispatch(__p, __first, __last, _Integral());
  }







private:



  template <class _InputIter> void insert(iterator __p, _InputIter __first, _InputIter __last,
       const input_iterator_tag &)
  {
   for ( ; __first != __last; ++__first) {
     __p = insert(__p, *__first);
     ++__p;
   }
 }

  template <class _ForwardIter>
  void insert(iterator __position, _ForwardIter __first, _ForwardIter __last,
       const forward_iterator_tag &) {
    if (__first != __last) {
      difference_type __n = distance(__first, __last);
      if (this->_M_end_of_storage._M_data - this->_M_finish >= __n + 1) {
 const difference_type __elems_after = this->_M_finish - __position;
 pointer __old_finish = this->_M_finish;
 if (__elems_after >= __n) {
   uninitialized_copy((this->_M_finish - __n) + 1, this->_M_finish + 1,
        this->_M_finish + 1);
   this->_M_finish += __n;
   _Traits::move(__position + __n,
   __position, (__elems_after - __n) + 1);
   _M_move(__first, __last, __position);
       }
 else {
   _ForwardIter __mid = __first;
   advance(__mid, __elems_after + 1);
   uninitialized_copy(__mid, __last, this->_M_finish + 1);
   this->_M_finish += __n - __elems_after;
         {
           uninitialized_copy(__position, __old_finish + 1, this->_M_finish);
           this->_M_finish += __elems_after;
         }
         ;

         _M_move(__first, __mid, __position);
 }
      }
      else {
 const size_type __old_size = size();
 const size_type __len
   = __old_size + (max)(__old_size, static_cast<size_type>(__n)) + 1;
       pointer __new_start = this->_M_end_of_storage.allocate(__len);
       pointer __new_finish = __new_start;
       {
         __new_finish = uninitialized_copy(this->_M_start, __position, __new_start);
         __new_finish = uninitialized_copy(__first, __last, __new_finish);
         __new_finish
           = uninitialized_copy(__position, this->_M_finish, __new_finish);
         _M_construct_null(__new_finish);
       }
       ;

       _STL::_Destroy(this->_M_start, this->_M_finish + 1);
       this->_M_deallocate_block();
       this->_M_start = __new_start;
       this->_M_finish = __new_finish;
       this->_M_end_of_storage._M_data = __new_start + __len;
     }
    }
  }

  template <class _Integer> void _M_insert_dispatch(iterator __p, _Integer __n, _Integer __x,
                          const __true_type&) {
    insert(__p, (size_type) __n, (_CharT) __x);
  }

  template <class _InputIter> void _M_insert_dispatch(iterator __p, _InputIter __first, _InputIter __last,
                          const __false_type&) {
    insert(__p, __first, __last, typename iterator_traits< _InputIter >::iterator_category());
  }

  template <class _InputIterator> void
  _M_copy(_InputIterator __first, _InputIterator __last, pointer __result) {
    for ( ; __first != __last; ++__first, ++__result)
      _Traits::assign(*__result, *__first);
  }

  template <class _InputIterator>
  void _M_move(_InputIterator __first, _InputIterator __last, pointer __result) {

    for ( ; __first != __last; ++__first, ++__result)
      _Traits::assign(*__result, *__first);
  }



  pointer _M_insert_aux(pointer, _CharT);

  void
  _M_copy(const _CharT* __first, const _CharT* __last, _CharT* __result) {
    _Traits::copy(__result, __first, __last - __first);
  }
  void _M_move(const _CharT* __first, const _CharT* __last, _CharT* __result) {
    _Traits::move(__result, __first, __last - __first);
  }

public:

  _Self& erase(size_type __pos = 0, size_type __n = npos) {
    if (__pos > size())
      this->_M_throw_out_of_range();
    erase(begin() + __pos, begin() + __pos + (min) (__n, size() - __pos));
    return *this;
  }

  iterator erase(iterator __position) {

    _Traits::move(__position, __position + 1, this->_M_finish - __position);
    _STL::_Destroy(this->_M_finish);
    --this->_M_finish;
    return __position;
  }

  iterator erase(iterator __first, iterator __last) {
    if (__first != __last) {

      traits_type::move(__first, __last, (this->_M_finish - __last) + 1);
      pointer __new_finish = this->_M_finish - (__last - __first);
      _STL::_Destroy(__new_finish + 1, this->_M_finish + 1);
      this->_M_finish = __new_finish;
    }
    return __first;
  }

public:

  _Self& replace(size_type __pos, size_type __n,
                        const _Self& __s) {
    if (__pos > size())
      this->_M_throw_out_of_range();
    const size_type __len = (min) (__n, size() - __pos);
    if (size() - __len >= max_size() - __s.size())
      this->_M_throw_length_error();
    return replace(begin() + __pos, begin() + __pos + __len,
                   __s._M_start, __s._M_finish);
  }

  _Self& replace(size_type __pos1, size_type __n1,
                        const _Self& __s,
                        size_type __pos2, size_type __n2) {
    if (__pos1 > size() || __pos2 > __s.size())
      this->_M_throw_out_of_range();
    const size_type __len1 = (min) (__n1, size() - __pos1);
    const size_type __len2 = (min) (__n2, __s.size() - __pos2);
    if (size() - __len1 >= max_size() - __len2)
      this->_M_throw_length_error();
    return replace(begin() + __pos1, begin() + __pos1 + __len1,
                   __s._M_start + __pos2, __s._M_start + __pos2 + __len2);
  }

  _Self& replace(size_type __pos, size_type __n1,
                        const _CharT* __s, size_type __n2) {
   
    if (__pos > size())
      this->_M_throw_out_of_range();
    const size_type __len = (min) (__n1, size() - __pos);
    if (__n2 > max_size() || size() - __len >= max_size() - __n2)
      this->_M_throw_length_error();
    return replace(begin() + __pos, begin() + __pos + __len,
                   __s, __s + __n2);
  }

  _Self& replace(size_type __pos, size_type __n1,
                        const _CharT* __s) {
   
    if (__pos > size())
      this->_M_throw_out_of_range();
    const size_type __len = (min) (__n1, size() - __pos);
    const size_type __n2 = _Traits::length(__s);
    if (__n2 > max_size() || size() - __len >= max_size() - __n2)
      this->_M_throw_length_error();
    return replace(begin() + __pos, begin() + __pos + __len,
                   __s, __s + _Traits::length(__s));
  }

  _Self& replace(size_type __pos, size_type __n1,
                        size_type __n2, _CharT __c) {
    if (__pos > size())
      this->_M_throw_out_of_range();
    const size_type __len = (min) (__n1, size() - __pos);
    if (__n2 > max_size() || size() - __len >= max_size() - __n2)
      this->_M_throw_length_error();
    return replace(begin() + __pos, begin() + __pos + __len, __n2, __c);
  }

  _Self& replace(iterator __first, iterator __last,
                        const _Self& __s)
    { return replace(__first, __last, __s._M_start, __s._M_finish); }

  _Self& replace(iterator __first, iterator __last,
                        const _CharT* __s, size_type __n)
    { return replace(__first, __last, __s, __s + __n); }

  _Self& replace(iterator __first, iterator __last,
                        const _CharT* __s) {
   
    return replace(__first, __last, __s, __s + _Traits::length(__s));
  }

  _Self& replace(iterator __first, iterator __last,
                        size_type __n, _CharT __c);




  template <class _InputIter> _Self& replace(iterator __first, iterator __last,
                        _InputIter __f, _InputIter __l) {
    typedef typename _Is_integer<_InputIter>::_Integral _Integral;
    return _M_replace_dispatch(__first, __last, __f, __l, _Integral());
  }





private:



  template <class _Integer> _Self& _M_replace_dispatch(iterator __first, iterator __last,
                                    _Integer __n, _Integer __x,
                                    const __true_type&) {
    return replace(__first, __last, (size_type) __n, (_CharT) __x);
  }

  template <class _InputIter> _Self& _M_replace_dispatch(iterator __first, iterator __last,
                                    _InputIter __f, _InputIter __l,
                                    const __false_type&) {
    return replace(__first, __last, __f, __l, typename iterator_traits< _InputIter >::iterator_category());
  }

  template <class _InputIter> _Self& replace(iterator __first, iterator __last,
                        _InputIter __f, _InputIter __l, const input_iterator_tag &) {
   for ( ; __first != __last && __f != __l; ++__first, ++__f)
     _Traits::assign(*__first, *__f);

   if (__f == __l)
     erase(__first, __last);
   else
     insert(__last, __f, __l);
   return *this;
 }

  template <class _InputIter>
  _Self& replace(iterator __first, iterator __last,
                 _InputIter __f, _InputIter __l, const random_access_iterator_tag &) {

    if (_M_inside(__f)) {
      difference_type __n = __l - __f;
      const difference_type __len = __last - __first;
      if (__len >= __n) {
        _M_move(__f, __l, __first);
        erase(__first + __n, __last);
      }
      else {
        _InputIter __m = __f + __len;
        if ((__l <= __first) || (__f >= __last)) {

          _M_copy(__f, __m, __first);
          insert(__last, __m, __l);
        }
        else {

      const difference_type __off_dest = __first - this->begin();
      const difference_type __off_src = __f - this->begin();
      insert(__last, __m, __l);
      _Traits::move(begin() + __off_dest, begin() + __off_src, __n);
        }
      }
      return *this;
    }
   else {
    return replace(__first, __last, __f, __l, forward_iterator_tag());
   }
  }


  template <class _ForwardIter> _Self& replace(iterator __first, iterator __last,
                        _ForwardIter __f, _ForwardIter __l,
                        const forward_iterator_tag &) {
   difference_type __n = distance(__f, __l);
   const difference_type __len = __last - __first;
   if (__len >= __n) {
     _M_copy(__f, __l, __first);
     erase(__first + __n, __last);
   }
   else {
     _ForwardIter __m = __f;
     advance(__m, __len);
     _M_copy(__f, __m, __first);
     insert(__last, __m, __l);
   }
   return *this;
 }



public:

  size_type copy(_CharT* __s, size_type __n, size_type __pos = 0) const {
   
    if (__pos > size())
      this->_M_throw_out_of_range();
    const size_type __len = (min) (__n, size() - __pos);
    _Traits::copy(__s, this->_M_start + __pos, __len);
    return __len;
  }

  void swap(_Self& __s) {
    _STL::swap(this->_M_start, __s._M_start);
    _STL::swap(this->_M_finish, __s._M_finish);
    _STL::swap(this->_M_end_of_storage, __s._M_end_of_storage);
  }

public:

  const _CharT* c_str() const { return this->_M_start; }
  const _CharT* data() const { return this->_M_start; }

public:

  size_type find(const _Self& __s, size_type __pos = 0) const
    { return find(__s._M_start, __pos, __s.size()); }

  size_type find(const _CharT* __s, size_type __pos = 0) const
    { return find(__s, __pos, _Traits::length(__s)); }

  size_type find(const _CharT* __s, size_type __pos, size_type __n) const;


  size_type find(_CharT __c) const
    { return find(__c, 0) ; }
  size_type find(_CharT __c, size_type __pos ) const;

public:

  size_type rfind(const _Self& __s, size_type __pos = npos) const
    { return rfind(__s._M_start, __pos, __s.size()); }

  size_type rfind(const _CharT* __s, size_type __pos = npos) const
    { return rfind(__s, __pos, _Traits::length(__s)); }

  size_type rfind(const _CharT* __s, size_type __pos, size_type __n) const;
  size_type rfind(_CharT __c, size_type __pos = npos) const;

public:

  size_type find_first_of(const _Self& __s, size_type __pos = 0) const
    { return find_first_of(__s._M_start, __pos, __s.size()); }

  size_type find_first_of(const _CharT* __s, size_type __pos = 0) const
    { return find_first_of(__s, __pos, _Traits::length(__s)); }

  size_type find_first_of(const _CharT* __s, size_type __pos,
                          size_type __n) const;

  size_type find_first_of(_CharT __c, size_type __pos = 0) const
    { return find(__c, __pos); }

public:

  size_type find_last_of(const _Self& __s,
                         size_type __pos = npos) const
    { return find_last_of(__s._M_start, __pos, __s.size()); }

  size_type find_last_of(const _CharT* __s, size_type __pos = npos) const
    { return find_last_of(__s, __pos, _Traits::length(__s)); }

  size_type find_last_of(const _CharT* __s, size_type __pos,
                         size_type __n) const;

  size_type find_last_of(_CharT __c, size_type __pos = npos) const {
    return rfind(__c, __pos);
  }

public:

  size_type find_first_not_of(const _Self& __s,
                              size_type __pos = 0) const
    { return find_first_not_of(__s._M_start, __pos, __s.size()); }

  size_type find_first_not_of(const _CharT* __s, size_type __pos = 0) const
    { return find_first_not_of(__s, __pos, _Traits::length(__s)); }

  size_type find_first_not_of(const _CharT* __s, size_type __pos,
                              size_type __n) const;

  size_type find_first_not_of(_CharT __c, size_type __pos = 0) const;

public:

  size_type find_last_not_of(const _Self& __s,
                             size_type __pos = npos) const
    { return find_last_not_of(__s._M_start, __pos, __s.size()); }

  size_type find_last_not_of(const _CharT* __s, size_type __pos = npos) const
    { return find_last_not_of(__s, __pos, _Traits::length(__s)); }

  size_type find_last_not_of(const _CharT* __s, size_type __pos,
                             size_type __n) const;

  size_type find_last_not_of(_CharT __c, size_type __pos = npos) const;

public:

  _Self substr(size_type __pos = 0, size_type __n = npos) const {
    if (__pos > size())
      this->_M_throw_out_of_range();
    return _Self(this->_M_start + __pos,
                        this->_M_start + __pos + (min) (__n, size() - __pos));
  }

public:

  int compare(const _Self& __s) const
    { return _M_compare(this->_M_start, this->_M_finish, __s._M_start, __s._M_finish); }

  int compare(size_type __pos1, size_type __n1,
              const _Self& __s) const {
    if (__pos1 > size())
      this->_M_throw_out_of_range();
    return _M_compare(this->_M_start + __pos1,
                      this->_M_start + __pos1 + (min) (__n1, size() - __pos1),
                      __s._M_start, __s._M_finish);
  }

  int compare(size_type __pos1, size_type __n1,
              const _Self& __s,
              size_type __pos2, size_type __n2) const {
    if (__pos1 > size() || __pos2 > __s.size())
      this->_M_throw_out_of_range();
    return _M_compare(this->_M_start + __pos1,
                      this->_M_start + __pos1 + (min) (__n1, size() - __pos1),
                      __s._M_start + __pos2,
                      __s._M_start + __pos2 + (min) (__n2, __s.size() - __pos2));
  }

  int compare(const _CharT* __s) const {
   
      return _M_compare(this->_M_start, this->_M_finish, __s, __s + _Traits::length(__s));
  }

  int compare(size_type __pos1, size_type __n1, const _CharT* __s) const {
   
    if (__pos1 > size())
      this->_M_throw_out_of_range();
    return _M_compare(this->_M_start + __pos1,
                      this->_M_start + __pos1 + (min) (__n1, size() - __pos1),
                      __s, __s + _Traits::length(__s));
  }

  int compare(size_type __pos1, size_type __n1, const _CharT* __s,
              size_type __n2) const {
   
    if (__pos1 > size())
      this->_M_throw_out_of_range();
    return _M_compare(this->_M_start + __pos1,
                      this->_M_start + __pos1 + (min) (__n1, size() - __pos1),
                      __s, __s + __n2);
  }

public:

  static int _M_compare(const _CharT* __f1, const _CharT* __l1,
                        const _CharT* __f2, const _CharT* __l2) {
    const ptrdiff_t __n1 = __l1 - __f1;
    const ptrdiff_t __n2 = __l2 - __f2;
    const int cmp = _Traits::compare(__f1, __f2, (min) (__n1, __n2));
    return cmp != 0 ? cmp : (__n1 < __n2 ? -1 : (__n1 > __n2 ? 1 : 0));
  }
};
# 1237 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.h"
template <class _CharT, class _Traits, class _Alloc> inline basic_string<_CharT,_Traits,_Alloc>
operator+(const basic_string<_CharT,_Traits,_Alloc>& __s,
          const basic_string<_CharT,_Traits,_Alloc>& __y)
{
  typedef basic_string<_CharT,_Traits,_Alloc> _Str;
  typedef typename _Str::_Reserve_t _Reserve_t;


  _Str __result = _Str(_Reserve_t(),__s.size() + __y.size());



  __result.append(__s);
  __result.append(__y);
  return __result;
}





template <class _CharT, class _Traits, class _Alloc> inline basic_string<_CharT,_Traits,_Alloc>
operator+(const _CharT* __s,
          const basic_string<_CharT,_Traits,_Alloc>& __y) {
 
  typedef basic_string<_CharT,_Traits,_Alloc> _Str;
  typedef typename _Str::_Reserve_t _Reserve_t;
  const size_t __n = _Traits::length(__s);

  _Str __result = _Str(_Reserve_t(), __n + __y.size());



  __result.append(__s, __s + __n);
  __result.append(__y);
  return __result;
}

template <class _CharT, class _Traits, class _Alloc> inline basic_string<_CharT,_Traits,_Alloc>
operator+(_CharT __c,
          const basic_string<_CharT,_Traits,_Alloc>& __y) {
  typedef basic_string<_CharT,_Traits,_Alloc> _Str;
  typedef typename _Str::_Reserve_t _Reserve_t;

  _Str __result = _Str(_Reserve_t(), 1 + __y.size());



  __result.push_back(__c);
  __result.append(__y);
  return __result;
}

template <class _CharT, class _Traits, class _Alloc> inline basic_string<_CharT,_Traits,_Alloc>
operator+(const basic_string<_CharT,_Traits,_Alloc>& __x,
          const _CharT* __s) {
 
  typedef basic_string<_CharT,_Traits,_Alloc> _Str;
  typedef typename _Str::_Reserve_t _Reserve_t;
  const size_t __n = _Traits::length(__s);

  _Str __result = _Str(_Reserve_t(), __x.size() + __n, __x.get_allocator());



  __result.append(__x);
  __result.append(__s, __s + __n);
  return __result;
}

template <class _CharT, class _Traits, class _Alloc> inline basic_string<_CharT,_Traits,_Alloc>
operator+(const basic_string<_CharT,_Traits,_Alloc>& __x,
          const _CharT __c) {
  typedef basic_string<_CharT,_Traits,_Alloc> _Str;
  typedef typename _Str::_Reserve_t _Reserve_t;

  _Str __result = _Str(_Reserve_t(), __x.size() + 1, __x.get_allocator());



  __result.append(__x);
  __result.push_back(__c);
  return __result;
}





template <class _CharT, class _Traits, class _Alloc> inline bool
operator==(const basic_string<_CharT,_Traits,_Alloc>& __x,
           const basic_string<_CharT,_Traits,_Alloc>& __y) {
  return __x.size() == __y.size() && _Traits::compare(__x.data(), __y.data(), __x.size()) == 0;
}

template <class _CharT, class _Traits, class _Alloc> inline bool
operator==(const _CharT* __s,
           const basic_string<_CharT,_Traits,_Alloc>& __y) {
 
  size_t __n = _Traits::length(__s);
  return __n == __y.size() && _Traits::compare(__s, __y.data(), __n) == 0;
}

template <class _CharT, class _Traits, class _Alloc> inline bool
operator==(const basic_string<_CharT,_Traits,_Alloc>& __x,
           const _CharT* __s) {
 
  size_t __n = _Traits::length(__s);
  return __x.size() == __n && _Traits::compare(__x.data(), __s, __n) == 0;
}



template <class _CharT, class _Traits, class _Alloc> inline bool
operator<(const basic_string<_CharT,_Traits,_Alloc>& __x,
          const basic_string<_CharT,_Traits,_Alloc>& __y) {
  return basic_string<_CharT,_Traits,_Alloc> ::_M_compare(__x.begin(), __x.end(),
   __y.begin(), __y.end()) < 0;
}

template <class _CharT, class _Traits, class _Alloc> inline bool
operator<(const _CharT* __s,
          const basic_string<_CharT,_Traits,_Alloc>& __y) {
 
  size_t __n = _Traits::length(__s);
  return basic_string<_CharT,_Traits,_Alloc> ::_M_compare(__s, __s + __n, __y.begin(), __y.end()) < 0;
}

template <class _CharT, class _Traits, class _Alloc> inline bool
operator<(const basic_string<_CharT,_Traits,_Alloc>& __x,
          const _CharT* __s) {
 
  size_t __n = _Traits::length(__s);
  return basic_string<_CharT,_Traits,_Alloc> ::_M_compare(__x.begin(), __x.end(), __s, __s + __n) < 0;
}



template <class _CharT, class _Traits, class _Alloc> inline bool
operator!=(const basic_string<_CharT,_Traits,_Alloc>& __x,
           const basic_string<_CharT,_Traits,_Alloc>& __y) {
  return !(__x == __y);
}

template <class _CharT, class _Traits, class _Alloc> inline bool
operator>(const basic_string<_CharT,_Traits,_Alloc>& __x,
          const basic_string<_CharT,_Traits,_Alloc>& __y) {
  return __y < __x;
}

template <class _CharT, class _Traits, class _Alloc> inline bool
operator<=(const basic_string<_CharT,_Traits,_Alloc>& __x,
           const basic_string<_CharT,_Traits,_Alloc>& __y) {
  return !(__y < __x);
}

template <class _CharT, class _Traits, class _Alloc> inline bool
operator>=(const basic_string<_CharT,_Traits,_Alloc>& __x,
           const basic_string<_CharT,_Traits,_Alloc>& __y) {
  return !(__x < __y);
}



template <class _CharT, class _Traits, class _Alloc> inline bool
operator!=(const _CharT* __s,
           const basic_string<_CharT,_Traits,_Alloc>& __y) {
 
  return !(__s == __y);
}

template <class _CharT, class _Traits, class _Alloc> inline bool
operator!=(const basic_string<_CharT,_Traits,_Alloc>& __x,
           const _CharT* __s) {
 
  return !(__x == __s);
}

template <class _CharT, class _Traits, class _Alloc> inline bool
operator>(const _CharT* __s,
          const basic_string<_CharT,_Traits,_Alloc>& __y) {
 
  return __y < __s;
}

template <class _CharT, class _Traits, class _Alloc> inline bool
operator>(const basic_string<_CharT,_Traits,_Alloc>& __x,
          const _CharT* __s) {
 
  return __s < __x;
}

template <class _CharT, class _Traits, class _Alloc> inline bool
operator<=(const _CharT* __s,
           const basic_string<_CharT,_Traits,_Alloc>& __y) {
 
  return !(__y < __s);
}

template <class _CharT, class _Traits, class _Alloc> inline bool
operator<=(const basic_string<_CharT,_Traits,_Alloc>& __x,
           const _CharT* __s) {
 
  return !(__s < __x);
}

template <class _CharT, class _Traits, class _Alloc> inline bool
operator>=(const _CharT* __s,
           const basic_string<_CharT,_Traits,_Alloc>& __y) {
 
  return !(__s < __y);
}

template <class _CharT, class _Traits, class _Alloc> inline bool
operator>=(const basic_string<_CharT,_Traits,_Alloc>& __x,
           const _CharT* __s) {
 
  return !(__x < __s);
}






template <class _CharT, class _Traits, class _Alloc> inline void
swap(basic_string<_CharT,_Traits,_Alloc>& __x,
     basic_string<_CharT,_Traits,_Alloc>& __y) {
  __x.swap(__y);
}



template <class _CharT, class _Traits, class _Alloc> void _S_string_copy(const basic_string<_CharT,_Traits,_Alloc>& __s,
                    _CharT* __buf,
                    size_t __n);
# 1483 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.h"
}






# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.c" 1
# 47 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.c"
namespace _STL {
# 57 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.c"
template <class _CharT, class _Traits, class _Alloc> void basic_string<_CharT,_Traits,_Alloc>::reserve(size_type __res_arg) {

  if (__res_arg >= capacity())
    {
      if (__res_arg > max_size())
 this->_M_throw_length_error();

      size_type __n = __res_arg + 1;
      pointer __new_start = this->_M_end_of_storage.allocate(__n);
      pointer __new_finish = __new_start;

      {
 __new_finish = uninitialized_copy(this->_M_start, this->_M_finish, __new_start);
 _M_construct_null(__new_finish);
      }
      ;


      _STL::_Destroy(this->_M_start, this->_M_finish + 1);
      this->_M_deallocate_block();
      this->_M_start = __new_start;
      this->_M_finish = __new_finish;
      this->_M_end_of_storage._M_data = __new_start + __n;
    }
}

template <class _CharT, class _Traits, class _Alloc> basic_string<_CharT,_Traits,_Alloc>& basic_string<_CharT,_Traits,_Alloc>::append(size_type __n, _CharT __c) {
  if (__n > max_size() || size() > max_size() - __n)
    this->_M_throw_length_error();
  if (size() + __n > capacity())
    reserve(size() + (max)(size(), __n));
  if (__n > 0) {
    uninitialized_fill_n(this->_M_finish + 1, __n - 1, __c);
    {
      _M_construct_null(this->_M_finish + __n);
    }
    ;
    _Traits::assign(*end(), __c);
    this->_M_finish += __n;
  }
  return *this;
}
# 144 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.c"
template <class _CharT, class _Traits, class _Alloc>
basic_string<_CharT,_Traits,_Alloc>&
basic_string<_CharT,_Traits,_Alloc>::assign(size_type __n, _CharT __c) {
  if (__n <= size()) {
    _Traits::assign(this->_M_start, __n, __c);
    erase(begin() + __n, end());
  }
  else {
    _Traits::assign(this->_M_start, size(), __c);
    append(__n - size(), __c);
  }
  return *this;
}

template <class _CharT, class _Traits, class _Alloc> _CharT*
basic_string<_CharT,_Traits,_Alloc> ::_M_insert_aux(_CharT* __p,
                  _CharT __c)
{
  pointer __new_pos = __p;
  if (this->_M_finish + 1 < this->_M_end_of_storage._M_data) {
    _M_construct_null(this->_M_finish + 1);
    _Traits::move(__p + 1, __p, this->_M_finish - __p);
    _Traits::assign(*__p, __c);
    ++this->_M_finish;
  }
  else {
    const size_type __old_len = size();
    const size_type __len = __old_len +
                            (max)(__old_len, static_cast<size_type>(1)) + 1;
    pointer __new_start = this->_M_end_of_storage.allocate(__len);
    pointer __new_finish = __new_start;
    {
      __new_pos = uninitialized_copy(this->_M_start, __p, __new_start);
      _Construct(__new_pos, __c);
      __new_finish = __new_pos + 1;
      __new_finish = uninitialized_copy(__p, this->_M_finish, __new_finish);
      _M_construct_null(__new_finish);
    }
    ;

    _STL::_Destroy(this->_M_start, this->_M_finish + 1);
    this->_M_deallocate_block();
    this->_M_start = __new_start;
    this->_M_finish = __new_finish;
    this->_M_end_of_storage._M_data = __new_start + __len;
  }
  return __new_pos;
}

template <class _CharT, class _Traits, class _Alloc> void basic_string<_CharT,_Traits,_Alloc>::insert(iterator __position,
           size_t __n, _CharT __c)
{
  if (__n != 0) {
    if (size_type(this->_M_end_of_storage._M_data - this->_M_finish) >= __n + 1) {
      const size_type __elems_after = this->_M_finish - __position;
      pointer __old_finish = this->_M_finish;
      if (__elems_after >= __n) {
        uninitialized_copy((this->_M_finish - __n) + 1, this->_M_finish + 1,
                           this->_M_finish + 1);
        this->_M_finish += __n;
        _Traits::move(__position + __n,
                      __position, (__elems_after - __n) + 1);
        _Traits::assign(__position, __n, __c);
      }
      else {
        uninitialized_fill_n(this->_M_finish + 1, __n - __elems_after - 1, __c);
        this->_M_finish += __n - __elems_after;
        {
          uninitialized_copy(__position, __old_finish + 1, this->_M_finish);
          this->_M_finish += __elems_after;
        }
        ;

        _Traits::assign(__position, __elems_after + 1, __c);
      }
    }
    else {
      const size_type __old_size = size();
      const size_type __len = __old_size + (max)(__old_size, __n) + 1;
      pointer __new_start = this->_M_end_of_storage.allocate(__len);
      pointer __new_finish = __new_start;
      {
        __new_finish = uninitialized_copy(this->_M_start, __position, __new_start);
        __new_finish = uninitialized_fill_n(__new_finish, __n, __c);
        __new_finish = uninitialized_copy(__position, this->_M_finish,
                                          __new_finish);
        _M_construct_null(__new_finish);
      }
      ;

      _STL::_Destroy(this->_M_start, this->_M_finish + 1);
      this->_M_deallocate_block();
      this->_M_start = __new_start;
      this->_M_finish = __new_finish;
      this->_M_end_of_storage._M_data = __new_start + __len;
    }
  }
}
# 303 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.c"
template <class _CharT, class _Traits, class _Alloc> basic_string<_CharT,_Traits,_Alloc>& basic_string<_CharT,_Traits,_Alloc> ::replace(iterator __first, iterator __last, size_type __n, _CharT __c)
{
  size_type __len = (size_type)(__last - __first);

  if (__len >= __n) {
    _Traits::assign(__first, __n, __c);
    erase(__first + __n, __last);
  }
  else {
    _Traits::assign(__first, __len, __c);
    insert(__last, __n - __len, __c);
  }
  return *this;
}
# 340 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.c"
template <class _CharT, class _Traits, class _Alloc> typename basic_string<_CharT,_Traits,_Alloc>::size_type
basic_string<_CharT,_Traits,_Alloc> ::find(const _CharT* __s, size_type __pos, size_type __n) const
{
  if (__pos + __n > size())
    return npos;
  else {
    const const_pointer __result =
      _STL::search((const _CharT*)this->_M_start + __pos, (const _CharT*)this->_M_finish,
   __s, __s + __n, _Eq_traits<_Traits>());
    return __result != this->_M_finish ? __result - this->_M_start : npos;
  }
}

template <class _CharT, class _Traits, class _Alloc> typename basic_string<_CharT,_Traits,_Alloc>::size_type
basic_string<_CharT,_Traits,_Alloc> ::find(_CharT __c, size_type __pos) const
{
  if (__pos >= size())
    return npos;
  else {
    const const_pointer __result =
      _STL::find_if((const _CharT*)this->_M_start + __pos, (const _CharT*)this->_M_finish,
    _Eq_char_bound<_Traits>(__c));
    return __result != this->_M_finish ? __result - this->_M_start : npos;
  }
}

template <class _CharT, class _Traits, class _Alloc> typename basic_string<_CharT,_Traits,_Alloc>::size_type
basic_string<_CharT,_Traits,_Alloc> ::rfind(const _CharT* __s, size_type __pos, size_type __n) const
{
  const size_t __len = size();

  if (__n > __len)
    return npos;
  else if (__n == 0)
    return (min) (__len, __pos);
  else {
    const_pointer __last = this->_M_start + (min) (__len - __n, __pos) + __n;
    const_pointer __result = _STL::find_end((const_pointer)this->_M_start, __last,
       __s, __s + __n,
       _Eq_traits<_Traits>());
    return __result != __last ? __result - this->_M_start : npos;
  }
}

template <class _CharT, class _Traits, class _Alloc> typename basic_string<_CharT,_Traits,_Alloc>::size_type
basic_string<_CharT,_Traits,_Alloc> ::rfind(_CharT __c, size_type __pos) const
{
  const size_type __len = size();

  if (__len < 1)
    return npos;
  else {
    const const_iterator __last = begin() + (min) (__len - 1, __pos) + 1;
    const_reverse_iterator __rresult =
      _STL::find_if(const_reverse_iterator(__last), rend(),
              _Eq_char_bound<_Traits>(__c));
    return __rresult != rend() ? (__rresult.base() - 1) - begin() : npos;
  }
}

template <class _CharT, class _Traits, class _Alloc> typename basic_string<_CharT,_Traits,_Alloc>::size_type
basic_string<_CharT,_Traits,_Alloc> ::find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
{
  if (__pos >= size())
    return npos;
  else {
    const_iterator __result = __find_first_of(begin() + __pos, end(),
                                              __s, __s + __n,
                                              _Eq_traits<_Traits>());
    return __result != end() ? __result - begin() : npos;
  }
}


template <class _CharT, class _Traits, class _Alloc> typename basic_string<_CharT,_Traits,_Alloc>::size_type
basic_string<_CharT,_Traits,_Alloc> ::find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
{
  const size_type __len = size();

  if (__len < 1)
    return npos;
  else {
    const const_iterator __last = begin() + (min) (__len - 1, __pos) + 1;
    const const_reverse_iterator __rresult =
      __find_first_of(const_reverse_iterator(__last), rend(),
                      __s, __s + __n,
                      _Eq_traits<_Traits>());
    return __rresult != rend() ? (__rresult.base() - 1) - begin() : npos;
  }
}


template <class _CharT, class _Traits, class _Alloc> typename basic_string<_CharT,_Traits,_Alloc>::size_type
basic_string<_CharT,_Traits,_Alloc> ::find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
{
  typedef typename _Traits::char_type _CharType;
  if (__pos > size())
    return npos;
  else {
    const_pointer __result = _STL::find_if((const _CharT*)this->_M_start + __pos,
          (const _CharT*)this->_M_finish,
                                _Not_within_traits<_Traits>((const _CharType*)__s,
           (const _CharType*)__s + __n));
    return __result != this->_M_finish ? __result - this->_M_start : npos;
  }
}

template <class _CharT, class _Traits, class _Alloc> typename basic_string<_CharT,_Traits,_Alloc>::size_type
basic_string<_CharT,_Traits,_Alloc> ::find_first_not_of(_CharT __c, size_type __pos) const
{
  if (__pos > size())
    return npos;
  else {
    const_pointer __result = _STL::find_if((const _CharT*)this->_M_start + __pos, (const _CharT*)this->_M_finish,
      _Neq_char_bound<_Traits>(__c));
    return __result != this->_M_finish ? __result - this->_M_start : npos;
  }
}

template <class _CharT, class _Traits, class _Alloc> typename basic_string<_CharT,_Traits,_Alloc>::size_type
basic_string<_CharT,_Traits,_Alloc> ::find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
{
  typedef typename _Traits::char_type _CharType;
  const size_type __len = size();

  if (__len < 1)
    return npos;
  else {
    const_iterator __last = begin() + (min) (__len - 1, __pos) + 1;
    const_reverse_iterator __rlast = const_reverse_iterator(__last);
    const_reverse_iterator __rresult =
      _STL::find_if(__rlast, rend(),
    _Not_within_traits<_Traits>((const _CharType*)__s,
           (const _CharType*)__s + __n));
    return __rresult != rend() ? (__rresult.base() - 1) - begin() : npos;
  }
}

template <class _CharT, class _Traits, class _Alloc> typename basic_string<_CharT,_Traits,_Alloc>::size_type
basic_string<_CharT, _Traits, _Alloc> ::find_last_not_of(_CharT __c, size_type __pos) const
{
  const size_type __len = size();

  if (__len < 1)
    return npos;
  else {
    const_iterator __last = begin() + (min) (__len - 1, __pos) + 1;
    const_reverse_iterator __rlast = const_reverse_iterator(__last);
    const_reverse_iterator __rresult =
      _STL::find_if(__rlast, rend(),
    _Neq_char_bound<_Traits>(__c));
    return __rresult != rend() ? (__rresult.base() - 1) - begin() : npos;
  }
}

template <class _CharT, class _Traits, class _Alloc> void _S_string_copy(const basic_string<_CharT,_Traits,_Alloc>& __s,
                    _CharT* __buf,
                    size_t __n)
{
  if (__n > 0) {
    __n = (min) (__n - 1, __s.size());
    _STL::copy(__s.begin(), __s.begin() + __n, __buf);
    __buf[__n] = _CharT();
  }
}
}





# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string_fwd.c" 1
# 512 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.c" 2






# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_range_errors.h" 1
# 36 "c:/marmalade/6.2/s3e/h/std/c++/stl/_range_errors.h"
namespace _STL {
void __stl_throw_range_error(const char* __msg);
void __stl_throw_out_of_range(const char* __msg);
void __stl_throw_length_error(const char* __msg);
void __stl_throw_invalid_argument(const char* __msg);
void __stl_throw_overflow_error(const char* __msg);
}
# 519 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.c" 2
namespace _STL {


template <class _Tp, class _Alloc> void _String_base<_Tp,_Alloc>::_M_throw_length_error() const {
    __stl_throw_length_error("basic_string");
}

template <class _Tp, class _Alloc> void _String_base<_Tp, _Alloc>::_M_throw_out_of_range() const {
    __stl_throw_out_of_range("basic_string");
}

template <class _Tp, class _Alloc> void _String_base<_Tp, _Alloc>::_M_allocate_block(size_t __n) {
  if ((__n <= (max_size()+1)) && (__n>0)){
    _M_start = _M_end_of_storage.allocate(__n);
    _M_finish = _M_start;
    _M_end_of_storage._M_data = _M_start + __n;
  }
    else
      _M_throw_length_error();
}

template <class _CharT, class _Traits, class _Alloc> basic_string<_CharT, _Traits, _Alloc>::basic_string()
  : _String_base<_CharT,_Alloc>(allocator_type()) {
  this->_M_start = this->_M_end_of_storage.allocate(8);
  this->_M_finish = this->_M_start;
  this->_M_end_of_storage._M_data = this->_M_start + 8;
  _M_terminate_string();
}


template <class _CharT, class _Traits, class _Alloc> basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT* __s,
          const allocator_type& __a)
  : _String_base<_CharT,_Alloc>(__a)
{
 
    _M_range_initialize(__s, __s + traits_type::length(__s));
}


template <class _CharT, class _Traits, class _Alloc> basic_string<_CharT, _Traits, _Alloc>::basic_string(const basic_string<_CharT, _Traits, _Alloc> & __s)
  : _String_base<_CharT,_Alloc>(__s.get_allocator())
{
  _M_range_initialize(__s._M_start, __s._M_finish);
}





}
# 1491 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.h" 2


# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string_io.h" 1
# 24 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string_io.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/string" 1
# 28 "c:/marmalade/6.2/s3e/h/std/c++/string"
         
# 45 "c:/marmalade/6.2/s3e/h/std/c++/string"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.h" 1
# 46 "c:/marmalade/6.2/s3e/h/std/c++/string" 2
# 25 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string_io.h" 2
# 36 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string_io.h"
namespace _STL {



template <class _CharT, class _Traits, class _Alloc>
basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os,
           const basic_string<_CharT,_Traits,_Alloc>& __s);

template <class _CharT, class _Traits, class _Alloc>
basic_istream<_CharT, _Traits>&
operator>>(basic_istream<_CharT, _Traits>& __is,
           basic_string<_CharT,_Traits,_Alloc>& __s);

template <class _CharT, class _Traits, class _Alloc>
basic_istream<_CharT, _Traits>&
getline(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT,_Traits,_Alloc>& __s,
        _CharT __delim);



template <class _CharT, class _Traits, class _Alloc>
inline basic_istream<_CharT, _Traits>&
getline(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT,_Traits,_Alloc>& __s)
{
  return getline(__is, __s, __is.widen('\n'));
}


template <class _CharT, class _Traits>
bool
__stlp_string_fill(basic_ostream<_CharT, _Traits>& __os,
                  basic_streambuf<_CharT, _Traits>* __buf,
                  size_t __n);
# 114 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string_io.h"
}




# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string_io.c" 1
# 9 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string_io.c"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ctype.h" 1
# 26 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ctype.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/c_locale.h" 1
# 109 "c:/marmalade/6.2/s3e/h/std/c++/stl/c_locale.h"
struct _Locale_ctype;
struct _Locale_numeric;
struct _Locale_time;
struct _Locale_collate;
struct _Locale_monetary;
struct _Locale_messages;
# 27 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ctype.h" 2
# 35 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ctype.h"
namespace _STL {

class ctype_base {
public:
  enum mask {
    space = 0x8,
    print = ((0x0100|0x1|0x2) | 0x4 | 0x40 | 0x10),
    cntrl = 0x20,
    upper = 0x1,
    lower = 0x2,
    alpha = ( (0x0100|0x1|0x2) & ~ (0x1 | 0x2 )),
    digit = 0x4,
    punct = 0x10,
    xdigit = 0x80,
    alnum = alpha | digit,
    graph = alnum | punct
  };
};



template <class charT> class ctype {};
template <class charT> class ctype_byname {};



template<>
class ctype<char> : public locale::facet, public ctype_base
{






    friend class ctype<wchar_t>;


  friend class _Locale;
public:

  typedef char char_type;

  explicit ctype(const mask* __tab = 0, bool __del = false, size_t __refs = 0);
  bool is(mask __m, char __c) const
    { return ((*(_M_ctype_table+(unsigned char)__c)) & __m) != 0; }

  const char* is(const char* __low, const char* __high, mask* __vec) const {
    for (const char* __p = __low;__p != __high; ++__p, ++__vec) {
      *__vec = _M_ctype_table[(unsigned char)*__p];
    }
    return __high;
  }

  const char* scan_is(mask __m, const char* __low, const char* __high) const;
  const char* scan_not(mask __m, const char* __low, const char* __high) const;

  char (toupper)(char __c) const { return do_toupper(__c); }
  const char* (toupper)(char* __low, const char* __high) const {
    return do_toupper(__low, __high);
  }

  char (tolower)(char __c) const { return do_tolower(__c); }
  const char* (tolower)(char* __low, const char* __high) const {
    return do_tolower(__low, __high);
  }

  char widen(char __c) const { return do_widen(__c); }
  const char* widen(const char* __low, const char* __high, char* __to) const {
    return do_widen(__low, __high, __to);
  }

  char narrow(char __c, char __dfault) const {
    return do_narrow(__c, __dfault);
  }
  const char* narrow(const char* __low, const char* __high,
                     char __dfault, char* __to) const {
    return do_narrow(__low, __high, __dfault, __to);
  }

  static locale::id id;



  static const size_t table_size = 256;


protected:
  const mask* table() const {return _M_ctype_table;}
  static const mask* classic_table() { return & _S_classic_table [1]; }

  ~ctype();

  virtual char do_toupper(char __c) const;
  virtual char do_tolower(char __c) const;
  virtual const char* do_toupper(char* __low, const char* __high) const;
  virtual const char* do_tolower(char* __low, const char* __high) const;
  virtual char do_widen(char __c) const;
  virtual const char* do_widen(const char* __low, const char* __high,
                               char* __to) const;
  virtual char do_narrow(char __c, char ) const;
  virtual const char* do_narrow(const char* __low, const char* __high,
                                char , char* __to) const;
private:
  struct _Is_mask {
    mask __m;
    _Is_mask(mask __x): __m(__x) {}
   bool operator()(char __c) {return (__m & (unsigned char) __c) != 0;}
  };

  static const mask _S_classic_table[257 ];
  const mask* _M_ctype_table;
  bool _M_delete;

  static const unsigned char _S_upper[256 ];
  static const unsigned char _S_lower[256 ];
};

template<>
class ctype_byname<char>: public ctype<char> {
public:
  explicit ctype_byname(const char*, size_t = 0);
  ~ctype_byname();

  virtual char do_toupper(char __c) const;
  virtual char do_tolower(char __c) const;

  virtual const char* do_toupper(char*, const char*) const;
  virtual const char* do_tolower(char*, const char*) const;

private:
  mask _M_byname_table[table_size + 1];
  _Locale_ctype* _M_ctype;
};



template<>
class ctype<wchar_t> : public locale::facet, public ctype_base
{
  friend class _Locale;
public:
  typedef wchar_t char_type;

  explicit ctype(size_t __refs = 0) : locale::facet(__refs) {}

  bool is(mask __m, wchar_t __c) const
    { return do_is(__m, __c); }

  const wchar_t* is(const wchar_t* __low, const wchar_t* __high,
                    mask* __vec) const
    { return do_is(__low, __high, __vec); }

  const wchar_t* scan_is(mask __m,
                         const wchar_t* __low, const wchar_t* __high) const
    { return do_scan_is(__m, __low, __high); }

  const wchar_t* scan_not (mask __m,
                           const wchar_t* __low, const wchar_t* __high) const
    { return do_scan_not(__m, __low, __high); }

  wchar_t (toupper)(wchar_t __c) const { return do_toupper(__c); }
  const wchar_t* (toupper)(wchar_t* __low, const wchar_t* __high) const
    { return do_toupper(__low, __high); }

  wchar_t (tolower)(wchar_t __c) const { return do_tolower(__c); }
  const wchar_t* (tolower)(wchar_t* __low, const wchar_t* __high) const
    { return do_tolower(__low, __high); }

  wchar_t widen(char __c) const { return do_widen(__c); }
  const char* widen(const char* __low, const char* __high,
                    wchar_t* __to) const
    { return do_widen(__low, __high, __to); }

  char narrow(wchar_t __c, char __dfault) const
    { return do_narrow(__c, __dfault); }
  const wchar_t* narrow(const wchar_t* __low, const wchar_t* __high,
                        char __dfault, char* __to) const
    { return do_narrow(__low, __high, __dfault, __to); }

  static locale::id id;

protected:
  ~ctype();

  virtual bool do_is(mask __m, wchar_t __c) const;
  virtual const wchar_t* do_is(const wchar_t*, const wchar_t*, mask*) const;
  virtual const wchar_t* do_scan_is(mask,
                                    const wchar_t*, const wchar_t*) const;
  virtual const wchar_t* do_scan_not(mask,
                                     const wchar_t*, const wchar_t*) const;
  virtual wchar_t do_toupper(wchar_t __c) const;
  virtual const wchar_t* do_toupper(wchar_t*, const wchar_t*) const;
  virtual wchar_t do_tolower(wchar_t c) const;
  virtual const wchar_t* do_tolower(wchar_t*, const wchar_t*) const;
  virtual wchar_t do_widen(char c) const;
  virtual const char* do_widen(const char*, const char*, wchar_t*) const;
  virtual char do_narrow(wchar_t __c, char __dfault) const;
  virtual const wchar_t* do_narrow(const wchar_t*, const wchar_t*,
                                   char, char*) const;
};

template<>
class ctype_byname<wchar_t>: public ctype<wchar_t> {
public:
  explicit ctype_byname(const char* __name, size_t __refs = 0);

protected:
  ~ctype_byname();

  virtual bool do_is(mask __m, wchar_t __c) const;
  virtual const wchar_t* do_is(const wchar_t*, const wchar_t*, mask*) const;
  virtual const wchar_t* do_scan_is(mask,
                                    const wchar_t*, const wchar_t*) const;
  virtual const wchar_t* do_scan_not(mask,
                                     const wchar_t*, const wchar_t*) const;
  virtual wchar_t do_toupper(wchar_t __c) const;
  virtual const wchar_t* do_toupper(wchar_t*, const wchar_t*) const;
  virtual wchar_t do_tolower(wchar_t c) const;
  virtual const wchar_t* do_tolower(wchar_t*, const wchar_t*) const;

private:
  _Locale_ctype* _M_ctype;
};



}
# 10 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string_io.c" 2






namespace _STL {
# 26 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string_io.c"
template <class _CharT, class _Traits>
bool
__stlp_string_fill(basic_ostream<_CharT, _Traits>& __os,
                  basic_streambuf<_CharT, _Traits>* __buf,
                  size_t __n)
{
  _CharT __f = __os.fill();
  size_t __i;
  bool __ok = true;

  for (__i = 0; __i < __n; ++__i)
    __ok = __ok && !_Traits::eq_int_type(__buf->sputc(__f), _Traits::eof());
  return __ok;
}

template <class _CharT, class _Traits, class _Alloc>
basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os,
           const basic_string<_CharT,_Traits,_Alloc>& __s)
{

 
  typedef basic_ostream<_CharT, _Traits> __ostream;
  typename __ostream::sentry __sentry(__os);
  bool __ok = false;

  if (__sentry) {
    __ok = true;
    size_t __n = __s.size();
    size_t __pad_len = 0;
    const bool __left = (__os.flags() & __ostream::left) != 0;
    const size_t __w = __os.width(0);
    basic_streambuf<_CharT, _Traits>* __buf = __os.rdbuf();

    if (__n < __w) {
      __pad_len = __w - __n;
    }

    if (!__left)
      __ok = __stlp_string_fill(__os, __buf, __pad_len);

    __ok = __ok && (__buf->sputn(__s.data(), streamsize(__n)) == streamsize(__n));

    if (__left)
      __ok = __ok && __stlp_string_fill(__os, __buf, __pad_len);
  }

  if (!__ok)
    __os.setstate(__ostream::failbit);

  return __os;
}

template <class _CharT, class _Traits, class _Alloc>
basic_istream<_CharT, _Traits>&
operator>>(basic_istream<_CharT, _Traits>& __is,
           basic_string<_CharT,_Traits, _Alloc>& __s)
{
 
  typedef basic_istream<_CharT, _Traits> __istream;
  typename __istream::sentry __sentry(__is);

  if (__sentry) {
    basic_streambuf<_CharT, _Traits>* __buf = __is.rdbuf();
    typedef ctype<_CharT> _C_type;



    const _C_type& _Ctype = *(const _C_type*)__is._M_ctype_facet();
# 107 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string_io.c"
    __s.clear();
    size_t __n = __is.width(0);
    if (__n == 0)
      __n = static_cast<size_t>(-1);
    else
      __s.reserve(__n);


    while (__n-- > 0) {
      typename _Traits::int_type __c1 = __buf->sbumpc();
      if (_Traits::eq_int_type(__c1, _Traits::eof())) {
        __is.setstate(__istream::eofbit);
        break;
      }
      else {
        _CharT __c = _Traits::to_char_type(__c1);

        if (_Ctype.is(_C_type::space, __c)) {
          if (_Traits::eq_int_type(__buf->sputbackc(__c), _Traits::eof()))
            __is.setstate(__istream::failbit);
          break;
        }
        else
          __s.push_back(__c);
      }
    }


    if (__s.size() == 0)
      __is.setstate(__istream::failbit);
  }
  else
    __is.setstate(__istream::failbit);

  return __is;
}

template <class _CharT, class _Traits, class _Alloc>
basic_istream<_CharT, _Traits>&
getline(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT,_Traits,_Alloc>& __s,
        _CharT __delim)
{
 
  typedef basic_istream<_CharT, _Traits> __istream;
  size_t __nread = 0;
  typename basic_istream<_CharT, _Traits>::sentry __sentry(__is, true);
  if (__sentry) {
    basic_streambuf<_CharT, _Traits>* __buf = __is.rdbuf();
    __s.clear();

    while (__nread < __s.max_size()) {
      int __c1 = __buf->sbumpc();
      if (_Traits::eq_int_type(__c1, _Traits::eof())) {
        __is.setstate(__istream::eofbit);
        break;
      }
      else {
        ++__nread;
        _CharT __c = _Traits::to_char_type(__c1);
        if (!_Traits::eq(__c, __delim))
          __s.push_back(__c);
        else
          break;
      }
    }
  }
  if (__nread == 0 || __nread >= __s.max_size())
    __is.setstate(__istream::failbit);

  return __is;
}
# 329 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string_io.c"
}
# 120 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string_io.h" 2
# 1494 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.h" 2
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string_hash.h" 1
# 23 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string_hash.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_hash_fun.h" 1
# 38 "c:/marmalade/6.2/s3e/h/std/c++/stl/_hash_fun.h"
namespace _STL {

template <class _Key> struct hash { };

inline size_t __stl_hash_string(const char* __s)
{
 
  unsigned long __h = 0;
  for ( ; *__s; ++__s)
    __h = 5*__h + *__s;

  return size_t(__h);
}

template<> struct hash<char*>
{
  size_t operator()(const char* __s) const { return __stl_hash_string(__s); }
};

template<> struct hash<const char*>
{
  size_t operator()(const char* __s) const { return __stl_hash_string(__s); }
};

template<> struct hash<char> {
  size_t operator()(char __x) const { return __x; }
};
template<> struct hash<unsigned char> {
  size_t operator()(unsigned char __x) const { return __x; }
};

template<> struct hash<signed char> {
  size_t operator()(unsigned char __x) const { return __x; }
};

template<> struct hash<short> {
  size_t operator()(short __x) const { return __x; }
};
template<> struct hash<unsigned short> {
  size_t operator()(unsigned short __x) const { return __x; }
};
template<> struct hash<int> {
  size_t operator()(int __x) const { return __x; }
};
template<> struct hash<unsigned int> {
  size_t operator()(unsigned int __x) const { return __x; }
};
template<> struct hash<long> {
  size_t operator()(long __x) const { return __x; }
};
template<> struct hash<unsigned long> {
  size_t operator()(unsigned long __x) const { return __x; }
};


template<> struct hash<long long> {
  size_t operator()(long x) const { return x; }
};
template<> struct hash<unsigned long long> {
  size_t operator()(unsigned long x) const { return x; }
};


}
# 24 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string_hash.h" 2






namespace _STL {

template <class _CharT, class _Traits, class _Alloc>
inline size_t
__stl_string_hash(const basic_string<_CharT,_Traits,_Alloc>& __s) {
  unsigned long __h = 0;
  typedef typename basic_string<_CharT,_Traits,_Alloc>::const_pointer const_ptr;
  size_t __len = __s.size();
  const _CharT* __data = __s.data();
  for ( size_t __i = 0; __i < __len; ++__i)
    __h = 5*__h + __data[__i];
  return size_t(__h);
}



template <class _CharT, class _Traits, class _Alloc>
struct hash<basic_string<_CharT,_Traits,_Alloc> > {
  size_t operator()(const basic_string<_CharT,_Traits,_Alloc>& __s) const
    { return __stl_string_hash(__s); }
};
# 68 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string_hash.h"
}
# 1495 "c:/marmalade/6.2/s3e/h/std/c++/stl/_string.h" 2
# 32 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ios_base.h" 2


namespace _STL {
# 45 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ios_base.h"
class ios_base {
public:

  class failure : public __Named_exception {
  public:
    explicit failure(const string&);
    virtual ~failure() throw();
  };

  typedef int fmtflags;
  typedef int iostate;
  typedef int openmode;
  typedef int seekdir;


  typedef fmtflags fmt_flags;







  static const int

    left = 0x0001,
    right = 0x0002,
    internal = 0x0004,
    dec = 0x0008,
    hex = 0x0010,
    oct = 0x0020,
    fixed = 0x0040,
    scientific = 0x0080,
    boolalpha = 0x0100,
    showbase = 0x0200,
    showpoint = 0x0400,
    showpos = 0x0800,
    skipws = 0x1000,
    unitbuf = 0x2000,
    uppercase = 0x4000,
    adjustfield = left | right | internal,
    basefield = dec | hex | oct,
    floatfield = scientific | fixed,


    goodbit = 0x00,
    badbit = 0x01,
    eofbit = 0x02,
    failbit = 0x04,


    __default_mode = 0x0,
    app = 0x01,
    ate = 0x02,
    binary = 0x04,
    in = 0x08,
    out = 0x10,
    trunc = 0x20,



    beg = 0x01,
    cur = 0x02,
    end = 0x04



  ;

public:
  fmtflags flags() const { return _M_fmtflags; }
  fmtflags flags(fmtflags __flags) {
    fmtflags __tmp = _M_fmtflags;
    _M_fmtflags = __flags;
    return __tmp;
  }

  fmtflags setf(fmtflags __flag) {
    fmtflags __tmp = _M_fmtflags;
    _M_fmtflags |= __flag;
    return __tmp;
  }
  fmtflags setf(fmtflags __flag, fmtflags __mask) {
    fmtflags __tmp = _M_fmtflags;
    _M_fmtflags &= ~__mask;
    _M_fmtflags |= __flag & __mask;
    return __tmp;
  }
  void unsetf(fmtflags __mask) { _M_fmtflags &= ~__mask; }

  streamsize precision() const { return _M_precision; }
  streamsize precision(streamsize __newprecision) {
    streamsize __tmp = _M_precision;
    _M_precision = __newprecision;
    return __tmp;
  }

  streamsize width() const { return _M_width; }
  streamsize width(streamsize __newwidth) {
    streamsize __tmp = _M_width;
    _M_width = __newwidth;
    return __tmp;
  }

public:
  locale imbue(const locale&);
  locale getloc() const { return _M_locale; }

public:
  static int xalloc();
  long& iword(int __index);
  void*& pword(int __index);

public:
  virtual ~ios_base();

public:
  enum event { erase_event, imbue_event, copyfmt_event };
  typedef void (*event_callback)(event, ios_base&, int __index);
  void register_callback(event_callback __fn, int __index);

public:


  static bool sync_with_stdio(bool __sync = true);

public:



  operator void*() const { return !fail() ? (void*) const_cast<ios_base*>(this) : (void*) 0; }
  bool operator!() const { return fail(); }

  iostate rdstate() const { return _M_iostate; }

  bool good() const { return _M_iostate == 0; }
  bool eof() const { return (_M_iostate & eofbit) != 0; }
  bool fail() const { return (_M_iostate & (failbit | badbit)) != 0; }
  bool bad() const { return (_M_iostate & badbit) != 0; }

protected:





  void _M_copy_state(const ios_base& __x);

  void _M_setstate_nothrow(iostate __state) { _M_iostate |= __state; }
  void _M_clear_nothrow(iostate __state) { _M_iostate = __state; }
  iostate _M_get_exception_mask() const { return _M_exception_mask; }
  void _M_set_exception_mask(iostate __mask) { _M_exception_mask = __mask; }
  void _M_check_exception_mask() {
    if (_M_iostate & _M_exception_mask)
      _M_throw_failure();
  }

  void _M_invoke_callbacks(event);
  void _M_throw_failure();

  ios_base();

protected:
  static void _S_initialize();
  static void _S_uninitialize();
  static bool _S_was_synced;

private:

  ios_base(const ios_base&);
  void operator=(const ios_base&);

private:

  fmtflags _M_fmtflags;
  iostate _M_iostate;
  openmode _M_openmode;
  seekdir _M_seekdir;
  iostate _M_exception_mask;

  streamsize _M_precision;
  streamsize _M_width;

  locale _M_locale;

  pair<event_callback, int>* _M_callbacks;
  size_t _M_num_callbacks;
  size_t _M_callback_index;


  long* _M_iwords;
  size_t _M_num_iwords;

  void** _M_pwords;
  size_t _M_num_pwords;

  static int _S_index;

protected:

  locale::facet* _M_cached_ctype;
  locale::facet* _M_cached_numpunct;
  string _M_cached_grouping;
public:

  const locale::facet* _M_ctype_facet() const { return _M_cached_ctype; }
  const locale::facet* _M_numpunct_facet() const { return _M_cached_numpunct; }
  const string& _M_grouping() const { return _M_cached_grouping; }
public:







  class Init {
  public:
    Init();
    ~Init();
  private:
    static long _S_count;
    friend class ios_base;
  };


  class _Loc_init {
  public:
    _Loc_init();
    ~_Loc_init();
  private:
    static long _S_count;
    friend class locale;
    friend class ios_base;
  };

  friend class Init;

public:


  typedef iostate io_state;
  typedef openmode open_mode;
  typedef seekdir seek_dir;
  typedef _STL::streamoff streamoff;
  typedef _STL::streampos streampos;

};






inline ios_base& boolalpha(ios_base& __s)
  { __s.setf(ios_base::boolalpha); return __s;}

inline ios_base& noboolalpha(ios_base& __s)
  { __s.unsetf(ios_base::boolalpha); return __s;}

inline ios_base& showbase(ios_base& __s)
  { __s.setf(ios_base::showbase); return __s;}

inline ios_base& noshowbase(ios_base& __s)
  { __s.unsetf(ios_base::showbase); return __s;}

inline ios_base& showpoint(ios_base& __s)
  { __s.setf(ios_base::showpoint); return __s;}

inline ios_base& noshowpoint(ios_base& __s)
  { __s.unsetf(ios_base::showpoint); return __s;}

inline ios_base& showpos(ios_base& __s)
  { __s.setf(ios_base::showpos); return __s;}

inline ios_base& noshowpos(ios_base& __s)
  { __s.unsetf(ios_base::showpos); return __s;}

inline ios_base& skipws(ios_base& __s)
  { __s.setf(ios_base::skipws); return __s;}

inline ios_base& noskipws(ios_base& __s)
  { __s.unsetf(ios_base::skipws); return __s;}

inline ios_base& uppercase(ios_base& __s)
  { __s.setf(ios_base::uppercase); return __s;}

inline ios_base& nouppercase(ios_base& __s)
  { __s.unsetf(ios_base::uppercase); return __s;}

inline ios_base& unitbuf(ios_base& __s)
  { __s.setf(ios_base::unitbuf); return __s;}

inline ios_base& nounitbuf(ios_base& __s)
  { __s.unsetf(ios_base::unitbuf); return __s;}



inline ios_base& internal(ios_base& __s)
  { __s.setf(ios_base::internal, ios_base::adjustfield); return __s; }

inline ios_base& left(ios_base& __s)
  { __s.setf(ios_base::left, ios_base::adjustfield); return __s; }

inline ios_base& right(ios_base& __s)
  { __s.setf(ios_base::right, ios_base::adjustfield); return __s; }


inline ios_base& dec(ios_base& __s)
  { __s.setf(ios_base::dec, ios_base::basefield); return __s; }

inline ios_base& hex(ios_base& __s)
  { __s.setf(ios_base::hex, ios_base::basefield); return __s; }

inline ios_base& oct(ios_base& __s)
  { __s.setf(ios_base::oct, ios_base::basefield); return __s; }



inline ios_base& fixed(ios_base& __s)
  { __s.setf(ios_base::fixed, ios_base::floatfield); return __s; }

inline ios_base& scientific(ios_base& __s)
  { __s.setf(ios_base::scientific, ios_base::floatfield); return __s; }
# 396 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ios_base.h"
}
# 24 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ios.h" 2






# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_numpunct.h" 1
# 38 "c:/marmalade/6.2/s3e/h/std/c++/stl/_numpunct.h"
namespace _STL {




template <class _CharT> class numpunct {};
template <class _CharT> class numpunct_byname {};
template <class _Ch, class _InIt> class num_get;

template<>
class numpunct<char> : public locale::facet
{
  friend class _Locale;

  template <class _Ch, class _InIt> friend class num_get;

public:
  typedef char char_type;
  typedef string string_type;

  explicit numpunct(size_t __refs = 0) : locale::facet(__refs) {}

  char decimal_point() const { return do_decimal_point(); }
  char thousands_sep() const { return do_thousands_sep(); }
  string grouping() const { return do_grouping(); }
  string truename() const { return do_truename(); }
  string falsename() const { return do_falsename(); }

  static locale::id id;


protected:

  ~numpunct();

  static string _M_truename;
  static string _M_falsename;
  static string _M_grouping;

  virtual char do_decimal_point() const;
  virtual char do_thousands_sep() const;
  virtual string do_grouping() const;
  virtual string do_truename() const;
  virtual string do_falsename() const;
};



template<>
class numpunct<wchar_t> : public locale::facet
{
  friend class _Locale;
public:
  typedef wchar_t char_type;
  typedef wstring string_type;

  explicit numpunct(size_t __refs = 0) : locale::facet(__refs) {}

  wchar_t decimal_point() const { return do_decimal_point(); }
  wchar_t thousands_sep() const { return do_thousands_sep(); }
  string grouping() const { return do_grouping(); }
  wstring truename() const { return do_truename(); }
  wstring falsename() const { return do_falsename(); }

  static locale::id id;

protected:
  static wstring _M_truename;
  static wstring _M_falsename;
  static string _M_grouping;

  ~numpunct();

  virtual wchar_t do_decimal_point() const;
  virtual wchar_t do_thousands_sep() const;
  virtual string do_grouping() const;
  virtual wstring do_truename() const;
  virtual wstring do_falsename() const;
};



template<>
class numpunct_byname<char> : public numpunct<char> {
public:
  typedef char char_type;
  typedef string string_type;

  explicit numpunct_byname(const char* __name, size_t __refs = 0);

protected:

  ~numpunct_byname();

  virtual char do_decimal_point() const;
  virtual char do_thousands_sep() const;
  virtual string do_grouping() const;

private:
  _Locale_numeric* _M_numeric;
};


template<>
class numpunct_byname<wchar_t>: public numpunct<wchar_t> {
public:
  typedef wchar_t char_type;
  typedef wstring string_type;

  explicit numpunct_byname(const char* __name, size_t __refs = 0);

protected:

  ~numpunct_byname();

  virtual wchar_t do_decimal_point() const;
  virtual wchar_t do_thousands_sep() const;
  virtual string do_grouping() const;

private:
  _Locale_numeric* _M_numeric;
};



}
# 31 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ios.h" 2


namespace _STL {
# 46 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ios.h"
template <class _CharT, class _Traits>
class basic_ios : public ios_base {
  friend class ios_base;
public:
  typedef _CharT char_type;
  typedef typename _Traits::int_type int_type;
  typedef typename _Traits::pos_type pos_type;
  typedef typename _Traits::off_type off_type;
  typedef _Traits traits_type;

public:
  explicit basic_ios(basic_streambuf<_CharT, _Traits>* __streambuf);
  virtual ~basic_ios() {}

public:
  basic_ostream<_CharT, _Traits>* tie() const {
    return _M_tied_ostream;
  }
  basic_ostream<_CharT, _Traits>*
  tie(basic_ostream<char_type, traits_type>* __new_tied_ostream) {
    basic_ostream<char_type, traits_type>* __tmp = _M_tied_ostream;
    _M_tied_ostream = __new_tied_ostream;
    return __tmp;
  }

  basic_streambuf<_CharT, _Traits>* rdbuf() const
    { return _M_streambuf; }

  basic_streambuf<_CharT, _Traits>*
  rdbuf(basic_streambuf<char_type, traits_type>*);


  basic_ios<_CharT, _Traits>& copyfmt(const basic_ios<_CharT, _Traits>& __x);

  char_type fill() const { return _M_fill; }
  char_type fill(char_type __fill) {
    char_type __tmp(_M_fill);
    _M_fill = __fill;
    return __tmp;
  }

public:


  void clear(iostate __state = goodbit) {
    _M_clear_nothrow(this->rdbuf() ? __state : iostate(__state|ios_base::badbit));
    _M_check_exception_mask();
  }
  void setstate(iostate __state) { this->clear(rdstate() | __state); }

  iostate exceptions() const { return this->_M_get_exception_mask(); }
  void exceptions(iostate __mask) {
    this->_M_set_exception_mask(__mask);
    this->clear(this->rdstate());
  }

public:
  locale imbue(const locale&);

  inline char narrow(_CharT, char) const ;
  inline _CharT widen(char) const;


  static bool _S_eof(int_type __c) {
    const int_type __eof = _Traits::eof();
    return _Traits::eq_int_type(__c, __eof);
  }

protected:
  basic_ios();

  void init(basic_streambuf<_CharT, _Traits>* __streambuf);

public:



  void _M_handle_exception(ios_base::iostate __flag);

private:
  char_type _M_fill;

  basic_streambuf<_CharT, _Traits>* _M_streambuf;
  basic_ostream<_CharT, _Traits>* _M_tied_ostream;

};


template <class _CharT, class _Traits>
inline char
basic_ios<_CharT, _Traits>::narrow(_CharT __c, char __default) const
{ return ((const ctype<_CharT>*)this->_M_ctype_facet())->narrow(__c, __default); }

template <class _CharT, class _Traits>
inline _CharT
basic_ios<_CharT, _Traits>::widen(char __c) const
{
  return ((const ctype<_CharT>*)this->_M_ctype_facet())->widen(__c); }
# 169 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ios.h"
}


# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ios.c" 1
# 28 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ios.c"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_streambuf.h" 1
# 29 "c:/marmalade/6.2/s3e/h/std/c++/stl/_streambuf.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_stdio_file.h" 1
# 81 "c:/marmalade/6.2/s3e/h/std/c++/stl/_stdio_file.h"
namespace _STL {






extern char* buf;
inline int _FILE_fd(const FILE *__f) { return ((int*)__f)[0]; }
inline char* _FILE_I_begin(const FILE *__f) { return buf; }
inline char* _FILE_I_next(const FILE *__f) { return buf; }
inline char* _FILE_I_end(const FILE *__f) { return buf; }
inline ptrdiff_t _FILE_I_avail(const FILE *__f) { return 0; }
inline char& _FILE_I_preincr(FILE *__f) { return buf[0]; }
inline char& _FILE_I_postincr(FILE *__f){ return buf[0]; }
inline char& _FILE_I_predecr(FILE *__f) { return buf[0]; }
inline char& _FILE_I_postdecr(FILE *__f) { return buf[0]; }
inline void _FILE_I_bump(FILE *__f, int __n) { }
inline void _FILE_I_set(FILE *__f, char* __begin, char* __next, char* __end) {}
# 753 "c:/marmalade/6.2/s3e/h/std/c++/stl/_stdio_file.h"
inline char* _FILE_O_begin(const FILE *__f) { return _FILE_I_begin(__f); }
inline char* _FILE_O_next(const FILE *__f) { return _FILE_I_next(__f); }
inline char* _FILE_O_end(const FILE *__f) { return _FILE_I_end(__f); }

inline ptrdiff_t _FILE_O_avail(const FILE *__f) { return _FILE_I_avail(__f); }

inline char& _FILE_O_preincr(FILE *__f) { return _FILE_I_preincr(__f); }
inline char& _FILE_O_postincr(FILE *__f) { return _FILE_I_postincr(__f); }
inline char& _FILE_O_predecr(FILE *__f) { return _FILE_I_predecr(__f); }
inline char& _FILE_O_postdecr(FILE *__f) { return _FILE_I_postdecr(__f); }

inline void _FILE_O_bump(FILE *__f, int __n) { _FILE_I_bump(__f, __n); }
inline void _FILE_O_set(FILE *__f, char* __begin, char* __next, char* __end)
  { _FILE_I_set(__f, __begin, __next, __end); }






}
# 30 "c:/marmalade/6.2/s3e/h/std/c++/stl/_streambuf.h" 2



namespace _STL {
# 55 "c:/marmalade/6.2/s3e/h/std/c++/stl/_streambuf.h"
template <class _CharT, class _Traits>
class basic_streambuf
{
  friend class basic_istream<_CharT, _Traits>;
  friend class basic_ostream<_CharT, _Traits>;

public:
  typedef _CharT char_type;
  typedef typename _Traits::int_type int_type;
  typedef typename _Traits::pos_type pos_type;
  typedef typename _Traits::off_type off_type;
  typedef _Traits traits_type;

private:

  char_type* _M_gbegin;
  char_type* _M_gnext;
  char_type* _M_gend;

  char_type* _M_pbegin;
  char_type* _M_pnext;
  char_type* _M_pend;

  locale _M_locale;

public:
  _STLP_mutex _M_lock;

public:
  virtual ~basic_streambuf();

protected:
  basic_streambuf();

protected:
  char_type* eback() const { return _M_gbegin; }
  char_type* gptr() const { return _M_gnext; }
  char_type* egptr() const { return _M_gend; }

  void gbump(int __n) { _M_gnext += __n; }
  void setg(char_type* __gbegin, char_type* __gnext, char_type* __gend) {
    _M_gbegin = __gbegin;
    _M_gnext = __gnext;
    _M_gend = __gend;
  }

public:




  char_type* _M_eback() const { return eback(); }
  char_type* _M_gptr() const { return gptr(); }
  char_type* _M_egptr() const { return egptr(); }
  void _M_gbump(int __n) { gbump(__n); }
  void _M_setg(char_type* __gbegin, char_type* __gnext, char_type* __gend)
    { setg(__gbegin, __gnext, __gend); }

protected:

  char_type* pbase() const { return _M_pbegin; }
  char_type* pptr() const { return _M_pnext; }
  char_type* epptr() const { return _M_pend; }

  void pbump(int __n) { _M_pnext += __n; }
  void setp(char_type* __pbegin, char_type* __pend) {
    _M_pbegin = __pbegin;
    _M_pnext = __pbegin;
    _M_pend = __pend;
  }

protected:

  virtual basic_streambuf<_CharT, _Traits>* setbuf(char_type*, streamsize);



  virtual pos_type seekoff(off_type, ios_base::seekdir,
                           ios_base::openmode = ios_base::in | ios_base::out);



  virtual pos_type
  seekpos(pos_type, ios_base::openmode = ios_base::in | ios_base::out);



  virtual int sync();


public:
  basic_streambuf<_CharT, _Traits>* pubsetbuf(char_type* __s, streamsize __n)
    { return this->setbuf(__s, __n); }

  pos_type pubseekoff(off_type __offset, ios_base::seekdir __way,
                      ios_base::openmode __mod = ios_base::in | ios_base::out)
    { return this->seekoff(__offset, __way, __mod); }

  pos_type pubseekpos(pos_type __sp,
                      ios_base::openmode __mod = ios_base::in | ios_base::out)
    { return this->seekpos(__sp, __mod); }

  int pubsync() { return this->sync(); }

protected:





  virtual streamsize showmanyc();



  virtual streamsize xsgetn(char_type* __s, streamsize __n);




  virtual int_type underflow();



  virtual int_type uflow();




  virtual int_type pbackfail(int_type = traits_type::eof());

protected:




  virtual streamsize xsputn(const char_type* __s, streamsize __n);



  virtual streamsize _M_xsputnc(char_type __c, streamsize __n);



  virtual int_type overflow(int_type = traits_type::eof());

public:

  int_type sputc(char_type __c) {
    return ((_M_pnext < _M_pend) ? _Traits::to_int_type(*_M_pnext++ = __c)
      : this->overflow(_Traits::to_int_type(__c)));
  }


  streamsize sputn(const char_type* __s, streamsize __n)
    { return this->xsputn(__s, __n); }


  streamsize _M_sputnc(char_type __c, streamsize __n)
    { return this->_M_xsputnc(__c, __n); }

private:
  int_type _M_snextc_aux();


public:
  streamsize in_avail() {
    return (_M_gnext < _M_gend) ? (_M_gend - _M_gnext) : this->showmanyc();
  }


  int_type snextc() {
 return ( _M_gend - _M_gnext > 1 ?
             _Traits::to_int_type(*++_M_gnext) :
             this->_M_snextc_aux());
  }


  int_type sbumpc() {
    return _M_gnext < _M_gend ? _Traits::to_int_type(*_M_gnext++)
      : this->uflow();
  }


  int_type sgetc() {
    return _M_gnext < _M_gend ? _Traits::to_int_type(*_M_gnext)
      : this->underflow();
  }

  streamsize sgetn(char_type* __s, streamsize __n)
  { return this->xsgetn(__s, __n); }

  int_type sputbackc(char_type __c) {
    return ((_M_gbegin < _M_gnext) && _Traits::eq(__c, *(_M_gnext - 1)))
      ? _Traits::to_int_type(*--_M_gnext)
      : this->pbackfail(_Traits::to_int_type(__c));
  }

  int_type sungetc() {
    return (_M_gbegin < _M_gnext)
      ? _Traits::to_int_type(*--_M_gnext)
      : this->pbackfail();
  }

protected:





  virtual void imbue(const locale&);

public:
  locale pubimbue(const locale&);
  locale getloc() const { return _M_locale; }


  void stossc() { this->sbumpc(); }
# 284 "c:/marmalade/6.2/s3e/h/std/c++/stl/_streambuf.h"
};
# 523 "c:/marmalade/6.2/s3e/h/std/c++/stl/_streambuf.h"
}



# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_streambuf.c" 1
# 27 "c:/marmalade/6.2/s3e/h/std/c++/stl/_streambuf.c"
namespace _STL {



template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>::basic_streambuf()
  : _M_gbegin(0), _M_gnext(0), _M_gend(0),
    _M_pbegin(0), _M_pnext(0), _M_pend(0),
    _M_locale()
{

}

template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>::~basic_streambuf()
{}


template <class _CharT, class _Traits>
locale
basic_streambuf<_CharT, _Traits>::pubimbue(const locale& __loc) {
  this->imbue(__loc);
  locale __tmp = _M_locale;
  _M_locale = __loc;
  return __tmp;
}

template <class _CharT, class _Traits>
streamsize
basic_streambuf<_CharT, _Traits>::xsgetn(_CharT* __s, streamsize __n)
{
  streamsize __result = 0;
  const int_type __eof = _Traits::eof();

  while (__result < __n) {
    if (_M_gnext < _M_gend) {
      size_t __chunk = (min) (static_cast<size_t>(_M_gend - _M_gnext),
                           static_cast<size_t>(__n - __result));
      _Traits::copy(__s, _M_gnext, __chunk);
      __result += __chunk;
      __s += __chunk;
      _M_gnext += __chunk;
    }
    else {
      int_type __c = this->sbumpc();
      if (!_Traits::eq_int_type(__c, __eof)) {
        *__s = __c;
        ++__result;
 ++__s;
      }
      else
        break;
    }
  }

  return __result;
}

template <class _CharT, class _Traits>
streamsize
basic_streambuf<_CharT, _Traits>::xsputn(const _CharT* __s, streamsize __n)
{
  streamsize __result = 0;
  const int_type __eof = _Traits::eof();

  while (__result < __n) {
    if (_M_pnext < _M_pend) {
      size_t __chunk = (min) (static_cast<size_t>(_M_pend - _M_pnext),
                           static_cast<size_t>(__n - __result));
      _Traits::copy(_M_pnext, __s, __chunk);
      __result += __chunk;
      __s += __chunk;
      _M_pnext += __chunk;
    }

    else if (!_Traits::eq_int_type(this->overflow(_Traits::to_int_type(*__s)),
                                   __eof)) {
      ++__result;
      ++__s;
    }
    else
      break;
  }
  return __result;
}

template <class _CharT, class _Traits>
streamsize
basic_streambuf<_CharT, _Traits>::_M_xsputnc(_CharT __c, streamsize __n)
{
  streamsize __result = 0;
  const int_type __eof = _Traits::eof();

  while (__result < __n) {
    if (_M_pnext < _M_pend) {
      size_t __chunk = (min) (static_cast<size_t>(_M_pend - _M_pnext),
                           static_cast<size_t>(__n - __result));
      _Traits::assign(_M_pnext, __chunk, __c);
      __result += __chunk;
      _M_pnext += __chunk;
    }

    else if (!_Traits::eq_int_type(this->overflow(_Traits::to_int_type(__c)),
                                   __eof))
      ++__result;
    else
      break;
  }
  return __result;
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::int_type
basic_streambuf<_CharT, _Traits>::_M_snextc_aux()
{
  int_type __eof = _Traits::eof();
  if (_M_gend == _M_gnext)
    return _Traits::eq_int_type(this->uflow(), __eof) ? __eof : this->sgetc();
  else {
    _M_gnext = _M_gend;
    return this->underflow();
  }
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::int_type
basic_streambuf<_CharT, _Traits>::pbackfail(int_type) {
 return _Traits::eof();
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::int_type
basic_streambuf<_CharT, _Traits>::overflow(int_type) {
  return _Traits::eof();
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::int_type
basic_streambuf<_CharT, _Traits>::uflow() {
    return ( _Traits::eq_int_type(this->underflow(),_Traits::eof()) ?
             _Traits::eof() :
             _Traits::to_int_type(*_M_gnext++));
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::int_type
basic_streambuf<_CharT, _Traits>::underflow()
{ return _Traits::eof(); }

template <class _CharT, class _Traits>
streamsize
basic_streambuf<_CharT, _Traits>::showmanyc()
{ return 0; }

template <class _CharT, class _Traits>
void
basic_streambuf<_CharT, _Traits>::imbue(const locale&) {}

template <class _CharT, class _Traits>
int
basic_streambuf<_CharT, _Traits>::sync() { return 0; }

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::pos_type
basic_streambuf<_CharT, _Traits>::seekpos(pos_type, ios_base::openmode)
{ return pos_type(-1); }

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::pos_type
basic_streambuf<_CharT, _Traits>::seekoff(off_type, ios_base::seekdir,
       ios_base::openmode)
{ return pos_type(-1); }

template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>*
basic_streambuf<_CharT, _Traits>:: setbuf(char_type*, streamsize)
{ return this; }
# 212 "c:/marmalade/6.2/s3e/h/std/c++/stl/_streambuf.c"
}
# 528 "c:/marmalade/6.2/s3e/h/std/c++/stl/_streambuf.h" 2
# 29 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ios.c" 2






namespace _STL {




template <class _CharT, class _Traits>
basic_ios<_CharT, _Traits>
  ::basic_ios(basic_streambuf<_CharT, _Traits>* __streambuf)
    : ios_base(),
      _M_fill(_CharT()), _M_streambuf(0), _M_tied_ostream(0)
{
  init(__streambuf);
}

template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>*
basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __buf)
{
  basic_streambuf<_CharT, _Traits>* __tmp = _M_streambuf;
  _M_streambuf = __buf;
  this->clear();
  return __tmp;
}

template <class _CharT, class _Traits>
basic_ios<_CharT, _Traits>&
basic_ios<_CharT, _Traits>::copyfmt(const basic_ios<_CharT, _Traits>& __x)
{
  _M_invoke_callbacks(erase_event);
  _M_copy_state(__x);
  _M_fill = __x._M_fill;
  _M_tied_ostream = __x._M_tied_ostream;
  _M_invoke_callbacks(copyfmt_event);
  this->_M_set_exception_mask(__x.exceptions());
  return *this;
}

template <class _CharT, class _Traits>
locale basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
{
  locale __tmp = ios_base::imbue(__loc);

  if (_M_streambuf)
    _M_streambuf->pubimbue(__loc);


  this->_M_cached_ctype = __loc._M_get_facet(ctype<char_type>::id) ;
  this->_M_cached_numpunct = __loc._M_get_facet(numpunct<char_type>::id) ;
  this->_M_cached_grouping = ((numpunct<char_type>*)_M_cached_numpunct)->grouping() ;
  return __tmp;
}





template <class _CharT, class _Traits>
basic_ios<_CharT, _Traits>::basic_ios()
  : ios_base(),
    _M_fill(_CharT()), _M_streambuf(0), _M_tied_ostream(0)
{}

template <class _CharT, class _Traits>
void
basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
{
  this->rdbuf(__sb);
  this->imbue(locale());
  this->tie(0);
  this->_M_set_exception_mask(ios_base::goodbit);
  this->_M_clear_nothrow(__sb != 0 ? ios_base::goodbit : ios_base::badbit);
  ios_base::flags(ios_base::skipws | ios_base::dec);
  ios_base::width(0);
  ios_base::precision(6);
  this->fill(widen(' '));


}


template <class _CharT, class _Traits>
void basic_ios<_CharT, _Traits>::_M_handle_exception(ios_base::iostate __flag)
{
  this->_M_setstate_nothrow(__flag);
  if (this->_M_get_exception_mask() & __flag)
    {};
}

}
# 173 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ios.h" 2
# 28 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istream.h" 2



# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ostream.h" 1
# 30 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ostream.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ostreambuf_iterator.h" 1
# 30 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ostreambuf_iterator.h"
namespace _STL {

template <class _CharT, class _Traits>
extern basic_streambuf<_CharT, _Traits>* _M_get_ostreambuf(basic_ostream<_CharT, _Traits>& ) ;


template<class _CharT, class _Traits>
class ostreambuf_iterator
{
public:
  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef typename _Traits::int_type int_type;
  typedef basic_streambuf<_CharT, _Traits> streambuf_type;
  typedef basic_ostream<_CharT, _Traits> ostream_type;

  typedef output_iterator_tag iterator_category;
  typedef void value_type;
  typedef void difference_type;
  typedef void pointer;
  typedef void reference;

public:
  ostreambuf_iterator(streambuf_type* __buf) : _M_buf(__buf), _M_ok(__buf!=0) {}

  inline ostreambuf_iterator(ostream_type& __o) ;

  ostreambuf_iterator<_CharT, _Traits>& operator=(char_type __c) {
    _M_ok = _M_ok && !traits_type::eq_int_type(_M_buf->sputc(__c),
                                               traits_type::eof());
    return *this;
  }

  ostreambuf_iterator<_CharT, _Traits>& operator*() { return *this; }
  ostreambuf_iterator<_CharT, _Traits>& operator++() { return *this; }
  ostreambuf_iterator<_CharT, _Traits>& operator++(int) { return *this; }

  bool failed() const { return !_M_ok; }

private:
  streambuf_type* _M_buf;
  bool _M_ok;
};

template <class _CharT, class _Traits>
inline ostreambuf_iterator<_CharT, _Traits>::ostreambuf_iterator(basic_ostream<_CharT, _Traits>& __o) : _M_buf(_M_get_ostreambuf(__o)), _M_ok(_M_buf != 0) {}
# 90 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ostreambuf_iterator.h"
}
# 31 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ostream.h" 2


namespace _STL {

template <class _CharT, class _Traits, class _Number>
basic_ostream<_CharT, _Traits>&
_M_put_num(basic_ostream<_CharT, _Traits>& __os, _Number __x);






template <class _CharT, class _Traits>
bool
_M_init(basic_ostream<_CharT, _Traits>& __str);




template <class _CharT, class _Traits>
class basic_ostream : virtual public basic_ios<_CharT, _Traits>
{
  typedef basic_ostream<_CharT, _Traits> _Self;

public:
  typedef _CharT char_type;
  typedef typename _Traits::int_type int_type;
  typedef typename _Traits::pos_type pos_type;
  typedef typename _Traits::off_type off_type;
  typedef _Traits traits_type;
  typedef basic_ios<_CharT, _Traits> _Basic_ios;

public:


  explicit basic_ostream(basic_streambuf<_CharT, _Traits>* __buf) {this->init(__buf);}
  ~basic_ostream() {};





public:
  typedef basic_ios<_CharT, _Traits>& ( *__ios_fn)(basic_ios<_CharT, _Traits>&);
  typedef ios_base& ( *__ios_base_fn)(ios_base&);
  typedef _Self& ( *__ostream_fn)(_Self&);
  _Self& operator<< (__ostream_fn __f) { return __f(*this); }
  _Self & operator<< (__ios_base_fn __f) { __f(*this); return *this; }
  _Self& operator<< (__ios_fn __ff) { __ff(*this); return *this; }

private:
  bool _M_copy_buffered(basic_streambuf<_CharT, _Traits>* __from,
                        basic_streambuf<_CharT, _Traits>* __to);
  bool _M_copy_unbuffered(basic_streambuf<_CharT, _Traits>* __from,
                          basic_streambuf<_CharT, _Traits>* __to);

public:
  void _M_put_char(_CharT __c);

  void _M_put_nowiden(const _CharT* __s);
  void _M_put_widen(const char* __s);
  bool _M_put_widen_aux(const char* __s, streamsize __n);

public:
  _Self& put(char_type __c);
  _Self& write(const char_type* __s, streamsize __n);

public:

  _Self& operator<<(basic_streambuf<_CharT, _Traits>* __buf);


  _Self& operator<<(unsigned char __x) { _M_put_char(__x); return *this; }

  _Self& operator<<(short __x) { return _M_put_num(*this, static_cast<long>(__x)); }
  _Self& operator<<(unsigned short __x) { return _M_put_num(*this, static_cast<unsigned long>(__x)); }
  _Self& operator<<(int __x) { return _M_put_num(*this, static_cast<long>(__x)); }
  _Self& operator<<(unsigned int __x) { return _M_put_num(*this, static_cast<unsigned long>(__x)); }
  _Self& operator<<(long __x) { return _M_put_num(*this, __x); }
  _Self& operator<<(unsigned long __x) { return _M_put_num(*this, __x); }

  _Self& operator<< (long long __x) { return _M_put_num(*this, __x); }
  _Self& operator<< (unsigned long long __x) { return _M_put_num(*this, __x); }

  _Self& operator<<(float __x)
    { return _M_put_num(*this, static_cast<double>(__x)); }
  _Self& operator<<(double __x) { return _M_put_num(*this, __x); }

  _Self& operator<<(long double __x) { return _M_put_num(*this, __x); }

  _Self& operator<<(const void* __x) { return _M_put_num(*this, __x); }

  _Self& operator<<(bool __x) { return _M_put_num(*this, __x); }


public:
  _Self& flush() {
    if (this->rdbuf())
      if (this->rdbuf()->pubsync() == -1)
        this->setstate(ios_base::badbit);
    return *this;
  }

  pos_type tellp() {
    return this->rdbuf() && !this->fail()
      ? this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out)
      : pos_type(-1);
  }

  _Self& seekp(pos_type __pos) {
    if (this->rdbuf() && !this->fail())
      this->rdbuf()->pubseekpos(__pos, ios_base::out);
    return *this;
  }

  _Self& seekp(off_type __off, ios_base::seekdir __dir) {
    if (this->rdbuf() && !this->fail())
      this->rdbuf()->pubseekoff(__off, __dir, ios_base::out);
    return *this;
  }
# 163 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ostream.h"
    class sentry {
      typedef sentry _Self;

    private:
      basic_ostream<_CharT, _Traits>& _M_str;

      bool _M_ok;
    public:
      explicit sentry(basic_ostream<_CharT, _Traits>& __str)
        : _M_str(__str), _M_ok(_M_init(__str))
      {
      }

      ~sentry() {
        if (_M_str.flags() & ios_base::unitbuf)



            _M_str.flush();
      }

      operator bool() const { return _M_ok; }
    private:
      sentry(const _Self& __s) : _M_str (__s._M_str) {};
      void operator=(const _Self&) {};
    };




};
# 205 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ostream.h"
template <class _CharT, class _Traits>
inline basic_streambuf<_CharT, _Traits>*
_M_get_ostreambuf(basic_ostream<_CharT, _Traits>& __St)
{
  return __St.rdbuf();
}



template <class _CharT, class _Traits>
inline basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, _CharT __c) {
  __os._M_put_char(__c);
  return __os;
}

template <class _CharT, class _Traits>
inline basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, const _CharT* __s) {
  __os._M_put_nowiden(__s);
  return __os;
}
# 270 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ostream.h"
template <class _CharT, class _Traits>
inline basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, char __c) {
  __os._M_put_char(__os.widen(__c));
  return __os;
}

template <class _Traits>
inline basic_ostream<char, _Traits>&
operator<<(basic_ostream<char, _Traits>& __os, char __c) {
  __os._M_put_char(__c);
  return __os;
}

template <class _Traits>
inline basic_ostream<char, _Traits>&
operator<<(basic_ostream<char, _Traits>& __os, signed char __c) {
  __os._M_put_char(__c);
  return __os;
}

template <class _Traits>
inline basic_ostream<char, _Traits>&
operator<<(basic_ostream<char, _Traits>& __os, unsigned char __c) {
  __os._M_put_char(__c);
  return __os;
}

template <class _CharT, class _Traits>
inline basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, const char* __s) {
  __os._M_put_widen(__s);
  return __os;
}

template <class _Traits>
inline basic_ostream<char, _Traits>&
operator<<(basic_ostream<char, _Traits>& __os, const char* __s) {
  __os._M_put_nowiden(__s);
  return __os;
}

template <class _Traits>
inline basic_ostream<char, _Traits>&
operator<<(basic_ostream<char, _Traits>& __os, const signed char* __s) {
  __os._M_put_nowiden(reinterpret_cast<const char*>(__s));
  return __os;
}

template <class _Traits>
inline basic_ostream<char, _Traits>&
operator<<(basic_ostream<char, _Traits>& __os, const unsigned char* __s) {
  __os._M_put_nowiden(reinterpret_cast<const char*>(__s));
  return __os;
}





template <class _CharT, class _Traits>
inline basic_ostream<_CharT, _Traits>&
endl(basic_ostream<_CharT, _Traits>& __os) {
  __os.put(__os.widen('\n'));
  __os.flush();
  return __os;
}

template <class _CharT, class _Traits>
inline basic_ostream<_CharT, _Traits>&
ends(basic_ostream<_CharT, _Traits>& __os) {
  __os.put(_CharT());
  return __os;
}

template <class _CharT, class _Traits>
inline basic_ostream<_CharT, _Traits>&
flush(basic_ostream<_CharT, _Traits>& __os) {
  __os.flush();
  return __os;
}

}




# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ostream.c" 1
# 32 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ostream.c"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_num_put.h" 1
# 36 "c:/marmalade/6.2/s3e/h/std/c++/stl/_num_put.h"
namespace _STL {







template <class _CharT, class _OutputIter = ostreambuf_iterator<_CharT, char_traits<_CharT> > >

class num_put: public locale::facet
{
  friend class _Locale;
public:
  typedef _CharT char_type;
  typedef _OutputIter iter_type;

  explicit num_put(size_t __refs = 0) : locale::facet(__refs) {}


  iter_type put(iter_type __s, ios_base& __f, char_type __fill,
                bool __val) const {
    return do_put(__s, __f, __fill, __val);
  }

  iter_type put(iter_type __s, ios_base& __f, char_type __fill,
               long __val) const {
    return do_put(__s, __f, __fill, __val);
  }

  iter_type put(iter_type __s, ios_base& __f, char_type __fill,
                unsigned long __val) const {
    return do_put(__s, __f, __fill, __val);
  }


  iter_type put(iter_type __s, ios_base& __f, char_type __fill,
                long long __val) const {
    return do_put(__s, __f, __fill, __val);
  }

  iter_type put(iter_type __s, ios_base& __f, char_type __fill,
                unsigned long long __val) const {
    return do_put(__s, __f, __fill, __val);
  }


  iter_type put(iter_type __s, ios_base& __f, char_type __fill,
                double __val) const {
    return do_put(__s, __f, __fill, (double)__val);
  }


  iter_type put(iter_type __s, ios_base& __f, char_type __fill,
                long double __val) const {
    return do_put(__s, __f, __fill, __val);
  }


  iter_type put(iter_type __s, ios_base& __f, char_type __fill,
                const void * __val) const {
    return do_put(__s, __f, __fill, __val);
  }

  static locale::id id;

protected:
  ~num_put() {}

  virtual _OutputIter do_put(_OutputIter __s, ios_base& __f, _CharT __fill, bool __val) const;

  virtual _OutputIter do_put(_OutputIter __s, ios_base& __f, _CharT __fill, long __val) const;
  virtual _OutputIter do_put(_OutputIter __s, ios_base& __f, _CharT __fill, unsigned long __val) const;
  virtual _OutputIter do_put(_OutputIter __s, ios_base& __f, _CharT __fill, double __val) const;

  virtual _OutputIter do_put(_OutputIter __s, ios_base& __f, _CharT __fill, long double __val) const;



  virtual _OutputIter do_put(_OutputIter __s, ios_base& __f, _CharT __fill, long long __val) const;
  virtual _OutputIter do_put(_OutputIter __s, ios_base& __f, _CharT __fill,
                           unsigned long long __val) const ;

  virtual _OutputIter do_put(_OutputIter __s, ios_base& __f, _CharT __fill, const void* __val) const;
};
# 133 "c:/marmalade/6.2/s3e/h/std/c++/stl/_num_put.h"
template <class _Integer>
char*
__write_integer_backward(char* __buf, ios_base::fmtflags __flags, _Integer __x);

void __string_to_float(const string&, float&);
void __string_to_float(const string&, double&);
extern void __write_float(string&, ios_base::fmtflags, int, double);

void __string_to_float(const string&, long double&);
extern void __write_float(string&, ios_base::fmtflags, int, long double);



extern wchar_t* __convert_float_buffer(const char*, const char*, wchar_t*, const ctype<wchar_t>&, wchar_t);

extern void __adjust_float_buffer(char*, char*, char);

extern char*
__write_integer(char* buf, ios_base::fmtflags flags, long x);

extern ptrdiff_t __insert_grouping(char* first, char* last, const string&, char, char, char, int);

extern ptrdiff_t __insert_grouping(wchar_t*, wchar_t*, const string&, wchar_t, wchar_t, wchar_t, int);
# 175 "c:/marmalade/6.2/s3e/h/std/c++/stl/_num_put.h"
}


# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_num_put.c" 1
# 30 "c:/marmalade/6.2/s3e/h/std/c++/stl/_num_put.c"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_limits.h" 1
# 34 "c:/marmalade/6.2/s3e/h/std/c++/stl/_limits.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/cfloat" 1
# 29 "c:/marmalade/6.2/s3e/h/std/c++/cfloat"
# 1 "c:/marmalade/6.2/s3e/h/ext/../std/float.h" 1
# 30 "c:/marmalade/6.2/s3e/h/std/c++/cfloat" 2
# 35 "c:/marmalade/6.2/s3e/h/std/c++/stl/_limits.h" 2






namespace _STL {

enum float_round_style {
  round_indeterminate = -1,
  round_toward_zero = 0,
  round_to_nearest = 1,
  round_toward_infinity = 2,
  round_toward_neg_infinity = 3
};

enum float_denorm_style {
  denorm_indeterminate = -1,
  denorm_absent = 0,
  denorm_present = 1
};



template <class __number>
class _Numeric_limits_base {
public:

  static __number ( min)() { return __number(); }
  static __number ( max)() { return __number(); }




  static const int


  digits = 0,
  digits10 = 0,
  radix = 0,
  min_exponent = 0,
  min_exponent10 = 0,
  max_exponent = 0,
  max_exponent10 = 0






  ;
  static const float_denorm_style has_denorm = denorm_absent;
  static const float_round_style round_style = round_toward_zero;
  static const bool


    is_specialized = false,
    is_signed = false,
    is_integer = false,
    is_exact = false,
    has_infinity = false,
    has_quiet_NaN = false,
    has_signaling_NaN = false,
    has_denorm_loss = false,
    is_iec559 = false,
    is_bounded = false,
    is_modulo = false,
    traps = false,
    tinyness_before = false



  ;

  static __number epsilon() { return __number(); }
  static __number round_error() { return __number(); }

  static __number infinity() { return __number(); }
  static __number quiet_NaN() { return __number(); }
  static __number signaling_NaN() { return __number(); }
  static __number denorm_min() { return __number(); }


};
# 135 "c:/marmalade/6.2/s3e/h/std/c++/stl/_limits.h"
template <class _Int,
          _Int __imin,
          _Int __imax,
          int __idigits, bool __ismod>
class _Integer_limits : public _Numeric_limits_base<_Int>
{
public:

  static _Int ( min) () { return (_Int)__imin; }
  static _Int ( max) () { return (_Int)__imax; }




  static const int

  digits = (__idigits < 0) ?
  ((int)((sizeof(_Int) * (8))) - ((__imin == 0) ? 0 : 1))
  : (__idigits),
  digits10 = (digits * 301UL) / 1000,
  radix = 2

  ;
  static const bool



  is_specialized = true,
  is_signed = (__imin != 0),
  is_integer = true,
  is_exact = true,
  is_bounded = true,
  is_modulo = __ismod



  ;
};


template <class __number,
         int __Digits, int __Digits10,
         int __MinExp, int __MaxExp,
         int __MinExp10, int __MaxExp10,
         bool __IsIEC559,
         float_round_style __RoundStyle>
class _Floating_limits : public _Numeric_limits_base<__number>
{
public:




  static const int


  digits = __Digits,
  digits10 = __Digits10,

  radix = ( 2 ),
  min_exponent = __MinExp,
  max_exponent = __MaxExp,
  min_exponent10 = __MinExp10,
  max_exponent10 = __MaxExp10






  ;
  static const float_denorm_style has_denorm = denorm_indeterminate;
  static const float_round_style round_style = __RoundStyle;
  static const bool


  is_specialized = true,
  is_signed = true,


   has_infinity = true,
   has_quiet_NaN = true,
   has_signaling_NaN= true,






  has_denorm_loss = false,
  is_iec559 = __IsIEC559,
  is_bounded = true,
  traps = true,
  tinyness_before= false




  ;

};





template<class _Tp>
class numeric_limits : public _Numeric_limits_base<_Tp> {};





template<>
class numeric_limits<bool>
  : public _Integer_limits<bool, false, true, 1, false>
{};



template<>
class numeric_limits<char>
  : public _Integer_limits<char, 0, 255, -1, true>
{};


template<>
class numeric_limits<signed char>
  : public _Integer_limits<signed char, (-128), 127, -1, true>
{};


template<>
class numeric_limits<unsigned char>
  : public _Integer_limits<unsigned char, 0, 255, -1, true>
{};
# 281 "c:/marmalade/6.2/s3e/h/std/c++/stl/_limits.h"
template<>
class numeric_limits<short>
  : public _Integer_limits<short, (-0x7fff - 1), 0x7fff, -1, true>
{};

template<>
class numeric_limits<unsigned short>
  : public _Integer_limits<unsigned short, 0, 0xffff, -1, true>
{};







template<>
class numeric_limits<int>
  : public _Integer_limits<int, (-0x7fffffffL - 1), 0x7fffffffL, -1, true>
{};

template<>
class numeric_limits<unsigned int>
  : public _Integer_limits<unsigned int, 0, 0xffffffffUL, -1, true>
{};

template<>
class numeric_limits<long>
  : public _Integer_limits<long, (-0x7fffffffL - 1), 0x7fffffffL, -1, true>
{};

template<>
class numeric_limits<unsigned long>
  : public _Integer_limits<unsigned long, 0, 0xffffffffUL, -1, true>
{};
# 359 "c:/marmalade/6.2/s3e/h/std/c++/stl/_limits.h"
template<>
class numeric_limits<long long>
  : public _Numeric_limits_base<long long>
{
public:

  static long long ( min) () { return (-0x7fffffffffffffffLL -1LL); }
  static long long ( max) () { return 0x7fffffffffffffffLL; }




  static const int

  digits = ((int)((sizeof(long long) * (8))) - 1),
  digits10 = (digits * 301UL) / 1000,
  radix = 2

  ;
  static const bool



  is_specialized = true,
  is_signed = true,
  is_integer = true,
  is_exact = true,
  is_bounded = true,
  is_modulo = true



  ;
};

template<>
class numeric_limits<unsigned long long>
  : public _Numeric_limits_base<unsigned long long>
{
public:

  static unsigned long long ( min) () { return 0ULL; }
  static unsigned long long ( max) () { return 0xffffffffffffffffULL; }




  static const int

  digits = ((int)((sizeof(unsigned long long) * (8)))),
  digits10 = (digits * 301UL) / 1000,
  radix = 2

  ;
  static const bool



  is_specialized = true,
  is_signed = false,
  is_integer = true,
  is_exact = true,
  is_bounded = true,
  is_modulo = true



  ;
};







union _F_rep
{
  unsigned short rep[2];
  float val;
};
union _D_rep
{
  unsigned short rep[4];
  double val;
};


union _L_rep
{
  unsigned short rep[8];
  long double val;
};


template <class __dummy>
class _LimG
{
public:
  static const _F_rep _F_inf;
  static const _F_rep _F_qNaN;
  static const _F_rep _F_sNaN;
  static const _D_rep _D_inf;
  static const _D_rep _D_qNaN;
  static const _D_rep _D_sNaN;


  static const _L_rep _L_inf;
  static const _L_rep _L_qNaN;
  static const _L_rep _L_sNaN;

};





template<> class numeric_limits<float>
  : public _Floating_limits<float,
                            24,
                            6,
                            (-125),
                            128,
                            (-37),
                            38,
                            true,
                            round_to_nearest>
{
public:
  static float ( min) () { return 1.175494351e-38F; }
  static float denorm_min() { return 1.175494351e-38F; }
  static float ( max) () { return 3.402823466e+38F; }
  static float epsilon() { return 1.19209290e-7F; }
  static float round_error() { return 0.5f; }
  static float infinity() { return _LimG<bool>::_F_inf.val; }
  static float quiet_NaN() { return _LimG<bool>::_F_qNaN.val; }
  static float signaling_NaN() { return _LimG<bool>::_F_sNaN.val; }
};

template<> class numeric_limits<double>
  : public _Floating_limits<double,
                            53,
                            15,
                            (-1021),
                            1024,
                            (-307),
                            308,
                            true,
                            round_to_nearest>
{
public:
  static double ( min)() { return 2.22507385850720138e-308; }
  static double denorm_min() { return 2.22507385850720138e-308; }
  static double ( max)() { return 1.79769313486231571e+308; }
  static double epsilon() { return 2.2204460492503131e-16; }
  static double round_error() { return 0.5; }
  static double infinity() { return _LimG<bool>::_D_inf.val; }
  static double quiet_NaN(){ return _LimG<bool>::_D_qNaN.val; }
  static double signaling_NaN() { return _LimG<bool>::_D_sNaN.val; }
};



template<>
class numeric_limits<long double>
  : public _Floating_limits<long double,
                            53,
                            15,
                            (-1021),
                            1024,
                            (-307),
                            308,
                            false,
                            round_to_nearest>
{
public:
  static long double ( min) () { return 2.22507385850720138e-308L; }
  static long double denorm_min() { return 2.22507385850720138e-308L; }
  static long double ( max) () { return 1.79769313486231571e+308L; }
  static long double epsilon() { return 2.2204460492503131e-16L; }
  static long double round_error() { return 4; }
  static long double infinity() { return _LimG<bool>::_L_inf.val; }
  static long double quiet_NaN() { return _LimG<bool>::_L_qNaN.val; }
  static long double signaling_NaN() { return _LimG<bool>::_L_sNaN.val; }
};





}


# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_limits.c" 1
# 30 "c:/marmalade/6.2/s3e/h/std/c++/stl/_limits.c"
namespace _STL {







template <class __number> const bool _Numeric_limits_base<__number>:: is_specialized;
template <class __number> const int _Numeric_limits_base<__number>:: digits;
template <class __number> const int _Numeric_limits_base<__number>:: digits10;
template <class __number> const bool _Numeric_limits_base<__number>:: is_signed;
template <class __number> const bool _Numeric_limits_base<__number>:: is_integer;
template <class __number> const bool _Numeric_limits_base<__number>:: is_exact;
template <class __number> const int _Numeric_limits_base<__number>:: radix;
template <class __number> const int _Numeric_limits_base<__number>:: min_exponent;
template <class __number> const int _Numeric_limits_base<__number>:: max_exponent;
template <class __number> const int _Numeric_limits_base<__number>:: min_exponent10;
template <class __number> const int _Numeric_limits_base<__number>:: max_exponent10;
template <class __number> const bool _Numeric_limits_base<__number>:: has_infinity;
template <class __number> const bool _Numeric_limits_base<__number>:: has_quiet_NaN;
template <class __number> const bool _Numeric_limits_base<__number>:: has_signaling_NaN;
template <class __number> const float_denorm_style _Numeric_limits_base<__number>:: has_denorm;
template <class __number> const bool _Numeric_limits_base<__number>:: has_denorm_loss;
template <class __number> const bool _Numeric_limits_base<__number>:: is_iec559;
template <class __number> const bool _Numeric_limits_base<__number>:: is_bounded;
template <class __number> const bool _Numeric_limits_base<__number>:: is_modulo;
template <class __number> const bool _Numeric_limits_base<__number>:: traps;
template <class __number> const bool _Numeric_limits_base<__number>:: tinyness_before;
template <class __number> const float_round_style _Numeric_limits_base<__number>:: round_style;







template <class _Int, _Int __imin, _Int __imax, int __idigits, bool __ismod> const bool _Integer_limits<_Int, __imin, __imax, __idigits, __ismod>:: is_specialized;
template <class _Int, _Int __imin, _Int __imax, int __idigits, bool __ismod> const int _Integer_limits<_Int, __imin, __imax, __idigits, __ismod>:: digits;


template <class _Int, _Int __imin, _Int __imax, int __idigits, bool __ismod> const int _Integer_limits<_Int, __imin, __imax, __idigits, __ismod>:: digits10;
template <class _Int, _Int __imin, _Int __imax, int __idigits, bool __ismod> const bool _Integer_limits<_Int, __imin, __imax, __idigits, __ismod>:: is_signed;
template <class _Int, _Int __imin, _Int __imax, int __idigits, bool __ismod> const bool _Integer_limits<_Int, __imin, __imax, __idigits, __ismod>:: is_integer;
template <class _Int, _Int __imin, _Int __imax, int __idigits, bool __ismod> const bool _Integer_limits<_Int, __imin, __imax, __idigits, __ismod>:: is_exact;
template <class _Int, _Int __imin, _Int __imax, int __idigits, bool __ismod> const int _Integer_limits<_Int, __imin, __imax, __idigits, __ismod>:: radix;
template <class _Int, _Int __imin, _Int __imax, int __idigits, bool __ismod> const bool _Integer_limits<_Int, __imin, __imax, __idigits, __ismod>:: is_bounded;
template <class _Int, _Int __imin, _Int __imax, int __idigits, bool __ismod> const bool _Integer_limits<_Int, __imin, __imax, __idigits, __ismod>:: is_modulo;
# 91 "c:/marmalade/6.2/s3e/h/std/c++/stl/_limits.c"
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_round_style __RoundStyle> const bool _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __RoundStyle>:: is_specialized;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_round_style __RoundStyle> const int _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __RoundStyle>:: digits;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_round_style __RoundStyle> const int _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __RoundStyle>:: digits10;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_round_style __RoundStyle> const bool _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __RoundStyle>:: is_signed;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_round_style __RoundStyle> const int _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __RoundStyle>:: radix;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_round_style __RoundStyle> const int _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __RoundStyle>:: min_exponent;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_round_style __RoundStyle> const int _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __RoundStyle>:: max_exponent;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_round_style __RoundStyle> const int _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __RoundStyle>:: min_exponent10;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_round_style __RoundStyle> const int _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __RoundStyle>:: max_exponent10;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_round_style __RoundStyle> const bool _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __RoundStyle>:: has_infinity;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_round_style __RoundStyle> const bool _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __RoundStyle>:: has_quiet_NaN;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_round_style __RoundStyle> const bool _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __RoundStyle>:: has_signaling_NaN;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_round_style __RoundStyle> const float_denorm_style _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __RoundStyle>:: has_denorm;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_round_style __RoundStyle> const bool _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __RoundStyle>:: has_denorm_loss;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_round_style __RoundStyle> const bool _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __RoundStyle>:: is_iec559;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_round_style __RoundStyle> const bool _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __RoundStyle>:: is_bounded;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_round_style __RoundStyle> const bool _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __RoundStyle>:: traps;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_round_style __RoundStyle> const bool _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __RoundStyle>:: tinyness_before;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_round_style __RoundStyle> const float_round_style _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __RoundStyle>:: round_style;
# 290 "c:/marmalade/6.2/s3e/h/std/c++/stl/_limits.c"
}
# 553 "c:/marmalade/6.2/s3e/h/std/c++/stl/_limits.h" 2
# 31 "c:/marmalade/6.2/s3e/h/std/c++/stl/_num_put.c" 2


namespace _STL {





template <class _CharT, class _OutputIter,class _Float>
_OutputIter
_M_do_put_float(_OutputIter __s, ios_base& __f, _CharT __fill,_Float __x);





template <class _CharT, class _OutputIter>
_OutputIter
__copy_float_and_fill(const _CharT* __first, const _CharT* __last,
                      _OutputIter __out,
                      ios_base::fmtflags __flags,
                      streamsize __width, _CharT __fill,
                      _CharT __xplus, _CharT __xminus) {
  if (__width <= __last - __first)
    return copy(__first, __last, __out);
  else {
    streamsize __pad = __width - (__last - __first);
    ios_base::fmtflags __dir = __flags & ios_base::adjustfield;

    if (__dir == ios_base::left) {
      __out = copy(__first, __last, __out);
      return fill_n(__out, __pad, __fill);
    }
    else if (__dir == ios_base::internal && __first != __last &&
             (*__first == __xplus || *__first == __xminus)) {
      *__out++ = *__first++;
      __out = fill_n(__out, __pad, __fill);
      return copy(__first, __last, __out);
    }
    else {
      __out = fill_n(__out, __pad, __fill);
      return copy(__first, __last, __out);
    }
  }
}



template <class _OutputIter>
_OutputIter
__put_float(char* __ibuf, char* __iend, _OutputIter __out,
            ios_base& __f, wchar_t __fill,
            wchar_t __decimal_point,
            wchar_t __sep, const string& __grouping)
{
  const ctype<wchar_t>& __ct = *(ctype<wchar_t>*)__f._M_ctype_facet() ;

  wchar_t __wbuf[128];
  wchar_t* __eend = __convert_float_buffer(__ibuf, __iend, __wbuf,
                                           __ct, __decimal_point);
  if (!__grouping.empty()) {





    string __new_grouping = __grouping;
    wchar_t* __decimal_pos = find(__wbuf, __eend, __decimal_point);
    if (__grouping.size() == 1)
      __new_grouping.push_back(__grouping[0]);



    __new_grouping[0] += static_cast<char>(__eend - __decimal_pos);
    ptrdiff_t __len = __insert_grouping(__wbuf, __eend, __new_grouping,
     __sep,
     __ct.widen('+'), __ct.widen('-'),
     0);
    __eend = __wbuf + __len;
  }

  return __copy_float_and_fill (__wbuf, __eend, __out,
                               __f.flags(), __f.width(0), __fill,
                               __ct.widen('+'), __ct.widen('-'));
}



template <class _OutputIter>
_OutputIter
__put_float(char* __ibuf, char* __iend, _OutputIter __out,
            ios_base& __f, char __fill,
            char __decimal_point,
            char __sep, const string& __grouping)
{
  __adjust_float_buffer(__ibuf, __iend, __decimal_point);
  if (!__grouping.empty()) {
    string __new_grouping = __grouping;
    const char * __decimal_pos = find(__ibuf, __iend, __decimal_point);
    if (__grouping.size() == 1)
      __new_grouping.push_back(__grouping[0]);
    __new_grouping[0] += static_cast<char>((__iend - __decimal_pos));
    ptrdiff_t __len = __insert_grouping(__ibuf, __iend, __new_grouping,
     __sep, '+', '-', 0);
    __iend = __ibuf + __len;
  }

  return __copy_float_and_fill<char> (__ibuf, __iend, __out,
                               __f.flags(), __f.width(0), (unsigned char)__fill, '+', '-');
}

template <class _CharT, class _OutputIter, class _Float>
_OutputIter
_M_do_put_float(_OutputIter __s, ios_base& __f,
                _CharT __fill, _Float __x)
{
  string __buf;
  __buf.reserve(128);
  __write_float(__buf, __f.flags(), (int)__f.precision(), __x);

  const numpunct<_CharT>& __np = *(const numpunct<_CharT>*)__f._M_numpunct_facet();

  return __put_float(const_cast<char*>(__buf.c_str()),
                     const_cast<char*>(__buf.c_str()) + __buf.size(),
                     __s, __f, __fill,
                     __np.decimal_point(),
                   __np.thousands_sep(), __f._M_grouping());
}



template <class _CharT, class _OutputIter>
_OutputIter
__copy_integer_and_fill(const _CharT* __buf, ptrdiff_t __len,
                        _OutputIter __out,
                        ios_base::fmtflags __flg, streamsize __wid, _CharT __fill,
                        _CharT __xplus, _CharT __xminus)
{
  if (__len >= __wid)
    return copy(__buf, __buf + __len, __out);
  else {
    ptrdiff_t __pad = __wid - __len;
    ios_base::fmtflags __dir = __flg & ios_base::adjustfield;

    if (__dir == ios_base::left) {
      __out = copy(__buf, __buf + __len, __out);
      return fill_n(__out, __pad, __fill);
    }
    else if (__dir == ios_base::internal && __len != 0 &&
             (__buf[0] == __xplus || __buf[0] == __xminus)) {
      *__out++ = __buf[0];
      __out = fill_n(__out, __pad, __fill);
      return copy(__buf + 1, __buf + __len, __out);
    }
    else if (__dir == ios_base::internal && __len >= 2 &&
             (__flg & ios_base::showbase) &&
             (__flg & ios_base::basefield) == ios_base::hex) {
      *__out++ = __buf[0];
      *__out++ = __buf[1];
      __out = fill_n(__out, __pad, __fill);
      return copy(__buf + 2, __buf + __len, __out);
    }
    else {
      __out = fill_n(__out, __pad, __fill);
      return copy(__buf, __buf + __len, __out);
    }
  }
}



template <class _OutputIter>
_OutputIter
__put_integer(char* __buf, char* __iend, _OutputIter __s,
              ios_base& __f,
              ios_base::fmtflags __flags, wchar_t __fill)
{
  locale __loc = __f.getloc();

  const ctype<wchar_t>& __ct = *(const ctype<wchar_t>*)__f._M_ctype_facet();

  wchar_t __xplus = __ct.widen('+');
  wchar_t __xminus = __ct.widen('-');

  wchar_t __wbuf[64];
  __ct.widen(__buf, __iend, __wbuf);
  ptrdiff_t __len = __iend - __buf;
  wchar_t* __eend = __wbuf + __len;




  const numpunct<wchar_t>& __np = *(const numpunct<wchar_t>*)__f._M_numpunct_facet();
  const string& __grouping = __f._M_grouping();

  if (!__grouping.empty()) {
    int __basechars;
    if (__flags & ios_base::showbase)
      switch (__flags & ios_base::basefield) {
 case ios_base::hex: __basechars = 2; break;
 case ios_base::oct: __basechars = 1; break;
 default: __basechars = 0;
      }
    else
      __basechars = 0;

    __len = __insert_grouping(__wbuf, __eend, __grouping, __np.thousands_sep(),
         __xplus, __xminus, __basechars);
  }

  return __copy_integer_and_fill((wchar_t*)__wbuf, __len, __s,
                                 __flags, __f.width(0), __fill, __xplus, __xminus);
}



template <class _OutputIter>
_OutputIter
__put_integer(char* __buf, char* __iend, _OutputIter __s,
              ios_base& __f, ios_base::fmtflags __flags, char __fill)
{
  ptrdiff_t __len = __iend - __buf;
  char __grpbuf[64];




  const numpunct<char>& __np = *(const numpunct<char>*)__f._M_numpunct_facet();
  const string& __grouping = __f._M_grouping();

  if (!__grouping.empty()) {
    int __basechars;
    if (__flags & ios_base::showbase)
      switch (__flags & ios_base::basefield) {
 case ios_base::hex: __basechars = 2; break;
 case ios_base::oct: __basechars = 1; break;
 default: __basechars = 0;
      }
    else
      __basechars = 0;




    copy(__buf, __iend, (char *) __grpbuf);
    __buf = __grpbuf;
    __iend = __grpbuf + __len;
    __len = __insert_grouping(__buf, __iend, __grouping, __np.thousands_sep(),
                              '+', '-', __basechars);
  }

  return __copy_integer_and_fill(__buf, __len, __s, __flags, __f.width(0), __fill, (char)'+', (char)'-');
}


typedef long long __max_int_t;
typedef unsigned long long __umax_int_t;





extern const char __hex_char_table_lo[];
extern const char __hex_char_table_hi[];

template <class _Integer>
inline char*
__write_decimal_backward(char* __ptr, _Integer __x, ios_base::fmtflags __flags, const __true_type& )
{
  const bool __negative = __x < 0 ;
  __max_int_t __temp = __x;
  __umax_int_t __utemp = __negative?-__temp:__temp;

  for (; __utemp != 0; __utemp /= 10)
    *--__ptr = (int)(__utemp % 10) + '0';

  if (__negative)
    *--__ptr = '-';
  else if (__flags & ios_base::showpos)
    *--__ptr = '+';
  return __ptr;
}

template <class _Integer>
inline char*
__write_decimal_backward(char* __ptr, _Integer __x, ios_base::fmtflags __flags, const __false_type& )
{
  for (; __x != 0; __x /= 10)
    *--__ptr = (int)(__x % 10) + '0';

  if (__flags & ios_base::showpos)
    *--__ptr = '+';
  return __ptr;
}

template <class _Integer>
char*
__write_integer_backward(char* __buf, ios_base::fmtflags __flags, _Integer __x)
{
  char* __ptr = __buf;
  __umax_int_t __temp;

  if (__x == 0) {
    *--__ptr = '0';
    if ((__flags & ios_base::showpos) && ( (__flags & (ios_base::hex | ios_base::oct)) == 0 ))
      *--__ptr = '+';
  }
  else {

    switch (__flags & ios_base::basefield) {
    case ios_base::oct:
      __temp = __x;

      if ( sizeof(__x) < 8 && sizeof(__umax_int_t) >= 8 )
        __temp &= 0xFFFFFFFF;

      for (; __temp != 0; __temp >>=3)
        *--__ptr = (((unsigned)__temp)& 0x7) + '0';


      if (__flags & ios_base::showbase)
        *--__ptr = '0';
      break;
    case ios_base::hex:
      {
        const char* __table_ptr = (__flags & ios_base::uppercase) ?
          __hex_char_table_hi : __hex_char_table_lo;
      __temp = __x;

      if ( sizeof(__x) < 8 && sizeof(__umax_int_t) >= 8 )
        __temp &= 0xFFFFFFFF;

        for (; __temp != 0; __temp >>=4)
          *--__ptr = __table_ptr[((unsigned)__temp & 0xF)];

        if (__flags & ios_base::showbase) {
          *--__ptr = __table_ptr[16];
          *--__ptr = '0';
        }
      }
      break;
    default:
      {







 typedef typename __bool2type<numeric_limits<_Integer>::is_signed>::_Ret _IsSigned;
 __ptr = __write_decimal_backward(__ptr, __x, __flags, _IsSigned());

      }
      break;
    }
  }

  return __ptr;
}







template <class _CharT, class _OutputIterator>
locale::id num_put<_CharT, _OutputIterator>::id;
# 428 "c:/marmalade/6.2/s3e/h/std/c++/stl/_num_put.c"
template <class _CharT, class _OutputIter>
_OutputIter
num_put<_CharT, _OutputIter>::do_put(_OutputIter __s, ios_base& __f,
                                     char_type __fill, bool __val) const {
  if (!(__f.flags() & ios_base::boolalpha))
    return this->do_put(__s, __f, __fill, static_cast<long>(__val));

  locale __loc = __f.getloc();



  const numpunct<_CharT>& __np = *(const numpunct<_CharT>*)__f._M_numpunct_facet();

  basic_string<_CharT> __str = __val ? __np.truename() : __np.falsename();




  ios_base::fmtflags __flags = __f.flags();
  if ((__flags & ios_base::adjustfield) == ios_base::internal)
    __flags = (__flags & ~ios_base::adjustfield) | ios_base::right;

  return __copy_integer_and_fill(__str.c_str(), __str.size(), __s,
                                 __flags, __f.width(0), __fill,
                                 (_CharT) 0, (_CharT) 0);
}



template <class _CharT, class _OutputIter>
_OutputIter
num_put<_CharT, _OutputIter>::do_put(_OutputIter __s, ios_base& __f, _CharT __fill,
                                     long __val) const {

  char __buf[64];

  ios_base::fmtflags __flags = __f.flags();
  char* __ibeg = __write_integer_backward((char*)__buf+64, __flags, __val);
  return __put_integer(__ibeg, (char*)__buf+64, __s, __f, __flags, __fill);
}


template <class _CharT, class _OutputIter>
_OutputIter
num_put<_CharT, _OutputIter>::do_put(_OutputIter __s, ios_base& __f, _CharT __fill,
         unsigned long __val) const {
  char __buf[64];


  ios_base::fmtflags __flags = __f.flags();
  char* __ibeg = __write_integer_backward((char*)__buf+64, __flags, __val);
  return __put_integer(__ibeg, (char*)__buf+64, __s, __f, __flags, __fill);
}

template <class _CharT, class _OutputIter>
_OutputIter
num_put<_CharT, _OutputIter>::do_put(_OutputIter __s, ios_base& __f, _CharT __fill,
                                     double __val) const {
  return _M_do_put_float(__s, __f, __fill, __val);
}


template <class _CharT, class _OutputIter>
_OutputIter
num_put<_CharT, _OutputIter>::do_put(_OutputIter __s, ios_base& __f, _CharT __fill,
                                     long double __val) const {
  return _M_do_put_float(__s, __f, __fill, __val);
}



template <class _CharT, class _OutputIter>
_OutputIter
num_put<_CharT, _OutputIter>::do_put(_OutputIter __s, ios_base& __f, _CharT __fill,
                                     long long __val) const {
  char __buf[64];


  ios_base::fmtflags __flags = __f.flags();
  char* __ibeg = __write_integer_backward((char*)__buf+64, __flags, __val);
  return __put_integer(__ibeg, (char*)__buf+64, __s, __f, __flags, __fill);
}

template <class _CharT, class _OutputIter>
_OutputIter
num_put<_CharT, _OutputIter>::do_put(_OutputIter __s, ios_base& __f, _CharT __fill,
                                     unsigned long long __val) const {
  char __buf[64];


  ios_base::fmtflags __flags = __f.flags();
  char* __ibeg = __write_integer_backward((char*)__buf+64, __flags, __val);
  return __put_integer(__ibeg, (char*)__buf+64, __s, __f, __flags, __fill);
}





template <class _CharT, class _OutputIter>
_OutputIter
num_put<_CharT, _OutputIter>::do_put(_OutputIter __s, ios_base& __f, _CharT ,
         const void* __val) const {
  const ctype<_CharT>& __c_type = *(const ctype<_CharT>*)__f._M_ctype_facet();
  ios_base::fmtflags __save_flags = __f.flags();

  __f.setf(ios_base::hex, ios_base::basefield);
  __f.setf(ios_base::showbase);
  __f.setf(ios_base::internal, ios_base::adjustfield);
  __f.width((sizeof(void*) * 2) + 2);

  _OutputIter result = this->do_put(__s, __f, __c_type.widen('0'), reinterpret_cast<unsigned long long>(__val));



  __f.flags(__save_flags);
  return result;
}

}
# 179 "c:/marmalade/6.2/s3e/h/std/c++/stl/_num_put.h" 2
# 33 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ostream.c" 2


namespace _STL {




template <class _CharT, class _Traits>
bool
_M_init(basic_ostream<_CharT, _Traits>& __str) {
  if (__str.good()) {

    if (!__str.rdbuf())
      __str.setstate(ios_base::badbit);
    if (__str.tie())
      __str.tie()->flush();
    return __str.good();
  } else
    return false;
}
# 82 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ostream.c"
template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>&
basic_ostream<_CharT, _Traits>::operator<<(basic_streambuf<_CharT, _Traits>* __from)
{
  sentry __sentry(*this);
  if (__sentry) {
    if (__from) {
      bool __any_inserted = __from->gptr() != __from->egptr()
        ? this->_M_copy_buffered(__from, this->rdbuf())
        : this->_M_copy_unbuffered(__from, this->rdbuf());
      if (!__any_inserted)
        this->setstate(ios_base::failbit);
    }
    else
      this->setstate(ios_base::badbit);
  }

  return *this;
}







template <class _CharT, class _Traits>
bool basic_ostream<_CharT, _Traits>
  ::_M_copy_buffered(basic_streambuf<_CharT, _Traits>* __from,
                     basic_streambuf<_CharT, _Traits>* __to)
{
  bool __any_inserted = false;

  while (__from->egptr() != __from->gptr()) {
    const ptrdiff_t __avail = __from->egptr() - __from->gptr();

    streamsize __nwritten;
    {
      __nwritten = __to->sputn(__from->gptr(), __avail);
      __from->gbump((int)__nwritten);
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
      return __any_inserted;
    }

    if (__nwritten == __avail) {
      {
        if (this->_S_eof(__from->sgetc()))
          return true;
        else
          __any_inserted = true;
      }
      if (false) {
        this->_M_handle_exception(ios_base::failbit);
        return false;
      }
    }

    else if (__nwritten != 0)
      return true;

    else
      return __any_inserted;
  }



  return __any_inserted || this->_M_copy_unbuffered(__from, __to);
}

template <class _CharT, class _Traits>
bool basic_ostream<_CharT, _Traits>
  ::_M_copy_unbuffered(basic_streambuf<_CharT, _Traits>* __from,
                       basic_streambuf<_CharT, _Traits>* __to)
{
  bool __any_inserted = false;

  while (true) {
    int_type __c;
    {
      __c = __from->sbumpc();
    }
    if (false) {
      this->_M_handle_exception(ios_base::failbit);
      return __any_inserted;
    }

    if (this->_S_eof(__c))
      return __any_inserted;

    else {
      int_type __tmp;
      {
        __tmp = __to->sputc(__c);
      }
      if (false) {
        this->_M_handle_exception(ios_base::badbit);
        return __any_inserted;
      }

      if (this->_S_eof(__tmp)) {
        {
                        __from->sputbackc(__c);
        }
        if (false) {
          this->_M_handle_exception(ios_base::badbit);
          return __any_inserted;
        }
      }
      else
        __any_inserted = true;
    }
  }
}



template <class _CharT, class _Traits, class _Number>
basic_ostream<_CharT, _Traits>&
_M_put_num(basic_ostream<_CharT, _Traits>& __os, _Number __x)
{
  typedef typename basic_ostream<_CharT, _Traits>::sentry _Sentry;
  _Sentry __sentry(__os);
  bool __failed = true;

  if (__sentry) {
    {
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> > _NumPut;
      __failed = (use_facet<_NumPut>(__os.getloc())).put(
                                                         ostreambuf_iterator<_CharT, _Traits>(__os.rdbuf()),
                                                         __os, __os.fill(),
                                                         __x).failed();
    }
    if (false) {
      __os._M_handle_exception(ios_base::badbit);
    }
  }
  if (__failed)
    __os.setstate(ios_base::badbit);
  return __os;
}
# 238 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ostream.c"
template <class _CharT, class _Traits>
void basic_ostream<_CharT, _Traits>::_M_put_char(_CharT __c)
{
  sentry __sentry(*this);
  if (__sentry) {
    bool __failed = true;
    {
      streamsize __npad = this->width() > 0 ? this->width() - 1 : 0;

      if (__npad == 0)
        __failed = this->_S_eof(this->rdbuf()->sputc(__c));
      else if ((this->flags() & ios_base::adjustfield) == ios_base::left) {
        __failed = this->_S_eof(this->rdbuf()->sputc(__c));
        __failed = __failed ||
                   this->rdbuf()->_M_sputnc(this->fill(), __npad) != __npad;
      }
      else {
        __failed = this->rdbuf()->_M_sputnc(this->fill(), __npad) != __npad;
        __failed = __failed || this->_S_eof(this->rdbuf()->sputc(__c));
      }

      this->width(0);
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
    }

    if (__failed)
      this->setstate(ios_base::badbit);
  }
}

template <class _CharT, class _Traits>
void basic_ostream<_CharT, _Traits>::_M_put_nowiden(const _CharT* __s)
{
  sentry __sentry(*this);
  if (__sentry) {
    bool __failed = true;
    streamsize __n = _Traits::length(__s);
    streamsize __npad = this->width() > __n ? this->width() - __n : 0;

    {
      if (__npad == 0)
        __failed = this->rdbuf()->sputn(__s, __n) != __n;
      else if ((this->flags() & ios_base::adjustfield) == ios_base::left) {
        __failed = this->rdbuf()->sputn(__s, __n) != __n;
        __failed = __failed ||
                   this->rdbuf()->_M_sputnc(this->fill(), __npad) != __npad;
      }
      else {
        __failed = this->rdbuf()->_M_sputnc(this->fill(), __npad) != __npad;
        __failed = __failed || this->rdbuf()->sputn(__s, __n) != __n;
      }

      this->width(0);
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
    }

    if (__failed)
      this->setstate(ios_base::failbit);
  }
}

template <class _CharT, class _Traits>
void basic_ostream<_CharT, _Traits>::_M_put_widen(const char* __s)
{
  sentry __sentry(*this);
  if (__sentry) {
    bool __failed = true;
    streamsize __n = char_traits<char>::length(__s);
    streamsize __npad = this->width() > __n ? this->width() - __n : 0;

    {
      if (__npad == 0)
        __failed = !this->_M_put_widen_aux(__s, __n);
      else if ((this->flags() & ios_base::adjustfield) == ios_base::left) {
        __failed = !this->_M_put_widen_aux(__s, __n);
        __failed = __failed ||
                   this->rdbuf()->_M_sputnc(this->fill(), __npad) != __npad;
      }
      else {
        __failed = this->rdbuf()->_M_sputnc(this->fill(), __npad) != __npad;
        __failed = __failed || !this->_M_put_widen_aux(__s, __n);
      }

      this->width(0);
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
    }

    if (__failed)
      this->setstate(ios_base::failbit);
  }
}

template <class _CharT, class _Traits>
bool basic_ostream<_CharT, _Traits>::_M_put_widen_aux(const char* __s,
                                                      streamsize __n)
{
  basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();

  for ( ; __n > 0 ; --__n)
    if (this->_S_eof(__buf->sputc(this->widen(*__s++))))
      return false;
  return true;
}


template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>&
basic_ostream<_CharT, _Traits>::put(char_type __c)
{
  sentry __sentry(*this);
  bool __failed = true;

  if (__sentry) {
    {
      __failed = this->_S_eof(this->rdbuf()->sputc(__c));
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
    }
  }

  if (__failed)
    this->setstate(ios_base::badbit);

  return *this;
}


template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>&
basic_ostream<_CharT, _Traits>::write(const char_type* __s, streamsize __n)
{
  sentry __sentry(*this);
  bool __failed = true;

  if (__sentry) {
    {
      __failed = this->rdbuf()->sputn(__s, __n) != __n;
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
    }
  }

  if (__failed)
    this->setstate(ios_base::badbit);

  return *this;
}

}
# 358 "c:/marmalade/6.2/s3e/h/std/c++/stl/_ostream.h" 2
# 32 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istream.h" 2



# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istreambuf_iterator.h" 1
# 34 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istreambuf_iterator.h"
namespace _STL {


template <class _CharT, class _Traits>
extern basic_streambuf<_CharT, _Traits>* _M_get_istreambuf(basic_istream<_CharT, _Traits>& ) ;





template<class _CharT, class _Traits>
class istreambuf_iterator
{
public:
  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef typename _Traits::int_type int_type;
  typedef basic_streambuf<_CharT, _Traits> streambuf_type;
  typedef basic_istream<_CharT, _Traits> istream_type;

  typedef input_iterator_tag iterator_category;
  typedef _CharT value_type;
  typedef typename _Traits::off_type difference_type;
  typedef const _CharT* pointer;
  typedef const _CharT& reference;

public:
  istreambuf_iterator(streambuf_type* __p = 0) { this->_M_init(__p); }

  inline istreambuf_iterator(basic_istream<_CharT, _Traits>& __is);

  char_type operator*() const { this->_M_getc(); return _M_c; }
  istreambuf_iterator<_CharT, _Traits>& operator++() { this->_M_bumpc(); return *this; }
  istreambuf_iterator<_CharT, _Traits> operator++(int);

  bool equal(const istreambuf_iterator<_CharT, _Traits>& __i) const {
    if (this->_M_buf)
      this->_M_getc();
    if (__i._M_buf)
      __i._M_getc();
    return this->_M_eof == __i._M_eof;
  }

private:
  void _M_init(streambuf_type* __p) {
    _M_buf = __p;
    _M_eof = !__p;

    _M_have_c = false;
  }

  void _M_getc() const {
    if (_M_have_c)
      return;
    int_type __c = _M_buf->sgetc();

    _M_c = traits_type::to_char_type(__c);
    _M_eof = traits_type::eq_int_type(__c, traits_type::eof());
    _M_have_c = true;







  }

  void _M_bumpc() {
    _M_buf->sbumpc();
    _M_have_c = false;
  }

private:
  streambuf_type* _M_buf;
  mutable _CharT _M_c;
  mutable unsigned char _M_eof;
  mutable unsigned char _M_have_c;
};

template<class _CharT, class _Traits>
inline istreambuf_iterator<_CharT, _Traits>::istreambuf_iterator(basic_istream<_CharT, _Traits>& __is)
{ this->_M_init(_M_get_istreambuf(__is)); }

template<class _CharT, class _Traits>
inline bool operator==(const istreambuf_iterator<_CharT, _Traits>& __x,
                                  const istreambuf_iterator<_CharT, _Traits>& __y) {
  return __x.equal(__y);
}



template<class _CharT, class _Traits>
inline bool operator!=(const istreambuf_iterator<_CharT, _Traits>& __x,
                                  const istreambuf_iterator<_CharT, _Traits>& __y) {
  return !__x.equal(__y);
}
# 151 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istreambuf_iterator.h"
template <class _CharT, class _Traits>
istreambuf_iterator<_CharT, _Traits>
istreambuf_iterator<_CharT, _Traits>::operator++(int) {
  istreambuf_iterator<_CharT, _Traits> __tmp = *this;
  this->_M_bumpc();
  this->_M_have_c = false;
  return __tmp;
}

}
# 36 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istream.h" 2




namespace _STL {

template <class _CharT, class _Traits, class _Number>
ios_base::iostate
_M_get_num(basic_istream<_CharT, _Traits>& __that, _Number& __val);






struct _No_Skip_WS {};

template <class _CharT, class _Traits>
bool _M_init_skip(basic_istream<_CharT, _Traits>& __is);
template <class _CharT, class _Traits>
bool _M_init_noskip(basic_istream<_CharT, _Traits>& __is);
# 66 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istream.h"
template <class _CharT, class _Traits>
class basic_istream : virtual public basic_ios<_CharT, _Traits> {
public:

  typedef _CharT char_type;
  typedef typename _Traits::int_type int_type;
  typedef typename _Traits::pos_type pos_type;
  typedef typename _Traits::off_type off_type;
  typedef _Traits traits_type;
  typedef basic_ios<_CharT, _Traits> _Basic_ios;
  typedef basic_istream<_CharT, _Traits> _Self;

  typedef basic_ios<_CharT, _Traits>& ( *__ios_fn)(basic_ios<_CharT, _Traits>&);
  typedef ios_base& ( *__ios_base_fn)(ios_base&);
  typedef _Self& ( *__istream_fn)(_Self&);

public:
  explicit basic_istream(basic_streambuf<_CharT, _Traits>* __buf) :
    basic_ios<_CharT, _Traits>(), _M_gcount(0) {
    this->init(__buf);
  }
  ~basic_istream() {};

public:

public:

  _Self& operator>> (__istream_fn __f) { return __f(*this); }
  _Self& operator>> (__ios_fn __f) { __f(*this); return *this; }
  _Self& operator>> (__ios_base_fn __f) { __f(*this); return *this; }

public:
  _Self& operator>> (short& __val) {
    long __lval;
    unsigned short __uval;
   _M_get_num(*this, __lval);
    __val = static_cast<short>(__lval);
    __uval = __lval;


    if ((__val != __lval) && ((long)__uval != __lval))
      this->setstate(ios_base::failbit);
    return *this;
  }
  _Self& operator>> (int& __val) {
    long __lval;
    unsigned int __uval;
    _M_get_num(*this, __lval);
    __val = __lval;
    __uval = __lval;


    if ((__val != __lval) && ((long)__uval != __lval))
      this->setstate(ios_base::failbit);
    return *this;
  }
  _Self& operator>> (unsigned short& __val) { _M_get_num(*this, __val); return *this; }
  _Self& operator>> (unsigned int& __val) { _M_get_num(*this, __val); return *this; }
  _Self& operator>> (long& __val) { _M_get_num(*this, __val); return *this; }
  _Self& operator>> (unsigned long& __val) { _M_get_num(*this, __val); return *this; }

  _Self& operator>> (long long& __val) { _M_get_num(*this, __val); return *this; }
  _Self& operator>> (unsigned long long& __val) { _M_get_num(*this, __val); return *this; }

  _Self& operator>> (float& __val) { _M_get_num(*this, __val); return *this; }
  _Self& operator>> (double& __val) { _M_get_num(*this, __val); return *this; }

  _Self& operator>> (long double& __val) { _M_get_num(*this, __val); return *this; }


  _Self& operator>> (bool& __val) { _M_get_num(*this, __val); return *this; }

  _Self& operator>> (void*& __val) { _M_get_num(*this, __val); return *this; }

public:
  _Self& operator>>(basic_streambuf<_CharT, _Traits>*);

public:
  streamsize gcount() const { return _M_gcount; }
  int_type peek();

public:
  int_type get();
  _Self& get(char_type& __c);

public:
  _Self& get(char_type* __s, streamsize __n, char_type __delim);
  _Self& get(char_type* __s, streamsize __n)
    { return get(__s, __n, this->widen('\n')); }

public:
  _Self& get(basic_streambuf<_CharT, _Traits>& __buf,
                     char_type __delim);
  _Self& get(basic_streambuf<_CharT, _Traits>& __buf)
    { return get(__buf, this->widen('\n')); }

public:
  _Self& getline(char_type* __s, streamsize __n, char_type delim);
  _Self& getline(char_type* __s, streamsize __n)
    { return getline(__s, __n, this->widen('\n')); }

public:
  _Self& ignore();
  _Self& ignore(streamsize __n);



  _Self& ignore(streamsize __n, int_type __delim);

  _Self& read(char_type* __s, streamsize __n);
  streamsize readsome(char_type* __s, streamsize __n);

public:
  _Self& putback(char_type __c);
  _Self& unget();

public:
  int sync();

  pos_type tellg();
  _Self& seekg(pos_type __pos);
  _Self& seekg(off_type, ios_base::seekdir);

public:
  void _M_formatted_get(_CharT& __c);
  void _M_formatted_get(_CharT* __s);
  void _M_skip_whitespace(bool __set_failbit);

private:
  streamsize _M_gcount;

public:
# 209 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istream.h"
  class sentry {
    typedef sentry _Self;


  private:
    const bool _M_ok;


  public:
    typedef _Traits traits_type;

    explicit sentry(basic_istream<_CharT, _Traits>& __is,
                    bool __noskipws = false) :
      _M_ok((__noskipws || !(__is.flags() & ios_base::skipws)) ? _M_init_noskip(__is) : _M_init_skip(__is) )

      {}



    sentry(basic_istream<_CharT, _Traits>& __is, _No_Skip_WS) :
      _M_ok(_M_init_noskip(__is)) {}

    ~sentry() {}

    operator bool() const { return _M_ok; }

  private:
    sentry(const _Self&) : _M_ok(false) {}
    void operator=(const _Self&) {}
  };





};
# 258 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istream.h"
template <class _CharT, class _Traits>
inline basic_istream<_CharT, _Traits>&
operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c) {
  __in._M_formatted_get(__c);
  return __in;
}

template <class _Traits>
inline basic_istream<char, _Traits>&
operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c) {
  __in._M_formatted_get(reinterpret_cast<char&>(__c));
  return __in;
}

template <class _Traits>
inline basic_istream<char, _Traits>&
operator>>(basic_istream<char, _Traits>& __in, signed char& __c) {
  __in._M_formatted_get(reinterpret_cast<char&>(__c));
  return __in;
}

template <class _CharT, class _Traits>
inline basic_istream<_CharT, _Traits>&
operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s) {
  __in._M_formatted_get(__s);
  return __in;
}

template <class _Traits>
inline basic_istream<char, _Traits>&
operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s) {
  __in._M_formatted_get(reinterpret_cast<char*>(__s));
  return __in;
}

template <class _Traits>
inline basic_istream<char, _Traits>&
operator>>(basic_istream<char, _Traits>& __in, signed char* __s) {
  __in._M_formatted_get(reinterpret_cast<char*>(__s));
  return __in;
}



template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
ws(basic_istream<_CharT, _Traits>& __is);




template <class _CharT, class _Traits>
class basic_iostream
  : public basic_istream<_CharT, _Traits>,
    public basic_ostream<_CharT, _Traits>
{
public:
  typedef basic_ios<_CharT, _Traits> _Basic_ios;

  explicit basic_iostream(basic_streambuf<_CharT, _Traits>* __buf);
  virtual ~basic_iostream();
};
# 328 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istream.h"
template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>* _M_get_istreambuf(basic_istream<_CharT, _Traits>& __is)
{
  return __is.rdbuf();
}

}


# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istream.c" 1
# 32 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istream.c"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_num_get.h" 1
# 41 "c:/marmalade/6.2/s3e/h/std/c++/stl/_num_get.h"
namespace _STL {







template <class _CharT, class _InputIter = istreambuf_iterator<_CharT> >

class num_get: public locale::facet
{
  friend class _Locale;
public:
  typedef _CharT char_type;
  typedef _InputIter iter_type;

  explicit num_get(size_t __refs = 0): locale::facet(__refs) {}


  _InputIter get(_InputIter __in, _InputIter __end, ios_base& __str,
                ios_base::iostate& __err, bool& __val) const {
    return do_get(__in, __end, __str, __err, __val);
  }
# 79 "c:/marmalade/6.2/s3e/h/std/c++/stl/_num_get.h"
  _InputIter get(_InputIter __in, _InputIter __end, ios_base& __str,
                ios_base::iostate& __err, long& __val) const {
    return do_get(__in, __end, __str, __err, __val);
  }

  _InputIter get(_InputIter __in, _InputIter __end, ios_base& __str,
                ios_base::iostate& __err, unsigned short& __val) const {
    return do_get(__in, __end, __str, __err, __val);
  }

  _InputIter get(_InputIter __in, _InputIter __end, ios_base& __str,
                ios_base::iostate& __err, unsigned int& __val) const {
    return do_get(__in, __end, __str, __err, __val);
  }

  _InputIter get(_InputIter __in, _InputIter __end, ios_base& __str,
                ios_base::iostate& __err, unsigned long& __val) const {
    return do_get(__in, __end, __str, __err, __val);
  }



  _InputIter get(_InputIter __in, _InputIter __end, ios_base& __str,
                ios_base::iostate& __err, long long& __val) const {
    return do_get(__in, __end, __str, __err, __val);
  }

  _InputIter get(_InputIter __in, _InputIter __end, ios_base& __str,
                ios_base::iostate& __err, unsigned long long& __val) const {
    return do_get(__in, __end, __str, __err, __val);
  }



  _InputIter get(_InputIter __in, _InputIter __end, ios_base& __str,
                 ios_base::iostate& __err, float& __val) const {
    return do_get(__in, __end, __str, __err, __val);
  }

  _InputIter get(_InputIter __in, _InputIter __end, ios_base& __str,
                ios_base::iostate& __err, double& __val) const {
    return do_get(__in, __end, __str, __err, __val);
  }



  _InputIter get(_InputIter __in, _InputIter __end, ios_base& __str,
                ios_base::iostate& __err, long double& __val) const {
    return do_get(__in, __end, __str, __err, __val);
  }


  _InputIter get(_InputIter __in, _InputIter __end, ios_base& __str,
                ios_base::iostate& __err, void*& __val) const {
    return do_get(__in, __end, __str, __err, __val);
  }

  static locale::id id;

protected:
  ~num_get() {}

  typedef string string_type;
  typedef ctype<_CharT> _Ctype;
  typedef numpunct<_CharT> _Numpunct;


  virtual _InputIter do_get(_InputIter __in, _InputIter __end,
                           ios_base& __str, ios_base::iostate& __err, bool& __val) const;


  virtual _InputIter do_get(_InputIter __in, _InputIter __end, ios_base& __str,
                           ios_base::iostate& __err, long& __val) const;
  virtual _InputIter do_get(_InputIter __in, _InputIter __end, ios_base& __str,
                           ios_base::iostate& __err, unsigned short& __val) const;
  virtual _InputIter do_get(_InputIter __in, _InputIter __end, ios_base& __str,
                           ios_base::iostate& __err, unsigned int& __val) const;
  virtual _InputIter do_get(_InputIter __in, _InputIter __end, ios_base& __str,
                           ios_base::iostate& __err, unsigned long& __val) const;







  virtual _InputIter do_get(_InputIter __in, _InputIter __end, ios_base& __str,
                          ios_base::iostate& __err, float& __val) const;
  virtual _InputIter do_get(_InputIter __in, _InputIter __end, ios_base& __str,
                           ios_base::iostate& __err, double& __val) const;
  virtual _InputIter do_get(_InputIter __in, _InputIter __end, ios_base& __str,
                           ios_base::iostate& __err,
                           void*& __p) const;


  virtual _InputIter do_get(_InputIter __in, _InputIter __end, ios_base& __str,
                           ios_base::iostate& __err, long double& __val) const;




  virtual _InputIter do_get(_InputIter __in, _InputIter __end, ios_base& __str,
                            ios_base::iostate& __err, long long& __val) const;
  virtual _InputIter do_get(_InputIter __in, _InputIter __end, ios_base& __str,
                           ios_base::iostate& __err, unsigned long long& __val) const;


};
# 200 "c:/marmalade/6.2/s3e/h/std/c++/stl/_num_get.h"
extern bool __valid_grouping(const char*, const char*, const char*, const char*);

template <class _InputIter, class _Integer>
bool
__get_decimal_integer(_InputIter& __first, _InputIter& __last, _Integer& __val);

inline bool __get_fdigit(char& __c, const char*);
inline bool __get_fdigit_or_sep(char& __c, char __sep, const char *);

bool __get_fdigit(wchar_t&, const wchar_t*);
bool __get_fdigit_or_sep(wchar_t&, wchar_t, const wchar_t*);


inline void
_Initialize_get_float(const ctype<char>&,
                       char& Plus, char& Minus,
                       char& pow_e, char& pow_E,
                       char*)
{
  Plus = '+';
  Minus = '-';
  pow_e = 'e';
  pow_E = 'E';
}


void _Initialize_get_float(const ctype<wchar_t>&,
                                        wchar_t&, wchar_t&, wchar_t&, wchar_t&, wchar_t*);

void __string_to_float(const string&, float&);
void __string_to_float(const string&, double&);

void __string_to_float(const string&, long double&);
# 248 "c:/marmalade/6.2/s3e/h/std/c++/stl/_num_get.h"
}


# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_num_get.c" 1
# 35 "c:/marmalade/6.2/s3e/h/std/c++/stl/_num_get.c"
namespace _STL {

extern const unsigned char __digit_val_table[];

template < class _InputIter, class _Integer, class _CharT>
_InputIter
_M_do_get_integer(_InputIter&, _InputIter&, ios_base&, ios_base::iostate&, _Integer&, _CharT*);



inline bool __get_fdigit(char& __c, const char*)
  { return __c >= '0' && __c <= '9'; }

inline bool __get_fdigit_or_sep(char& __c, char __sep, const char *)
{
  if (__c == __sep) {
    __c = ',' ;
    return true ;
  } else
    return ( __c >= '0' && __c <= '9');
}

inline int
__get_digit_from_table(unsigned __index)
{
  return (__index > 127 ? 0xFF : __digit_val_table[__index]);
}

extern const char __narrow_atoms[];

template <class _InputIter, class _CharT>
int
_M_get_base_or_zero(_InputIter& __in, _InputIter& __end, ios_base& __str, _CharT*)
{
  _CharT __atoms[5];
  const ctype<_CharT>& __c_type = use_facet< ctype<_CharT> >(__str.getloc());


  __c_type.widen(__narrow_atoms, __narrow_atoms + 5, __atoms);

  bool __negative = false;
  _CharT __c = *__in;

  if (__c == __atoms[1] ) {
    __negative = true;
    ++__in;
  }
  else if (__c == __atoms[0] )
    ++__in;


  int __base;
  int __valid_zero = 0;

  ios_base::fmtflags __basefield = __str.flags() & ios_base::basefield;

  switch (__basefield) {
  case ios_base::oct:
    __base = 8;
    break;
  case ios_base::dec:
    __base = 10;
    break;
  case ios_base::hex:
    __base = 16;
    if (__in != __end && *__in == __atoms[2] ) {
      ++__in;
      if (__in != __end &&
          (*__in == __atoms[3] || *__in == __atoms[4] ))
        ++__in;
      else
        __valid_zero = 1;
    }
    break;
  default:
    if (__in != __end && *__in == __atoms[2] ) {
      ++__in;
      if (__in != __end &&
          (*__in == __atoms[3] || *__in == __atoms[4] )) {
        ++__in;
        __base = 16;
      }
      else
        {
          __base = 8;
          __valid_zero = 1;
        }
    }
    else
      __base = 10;
    break;
  }
  return (__base << 2) | ((int)__negative << 1) | __valid_zero;
}


template <class _InputIter, class _Integer>
bool
__get_integer(_InputIter& __first, _InputIter& __last,
       int __base, _Integer& __val,
       int __got, bool __is_negative, char __separator, const string& __grouping, const __true_type&)
{
  bool __ovflow = false;
  _Integer __result = 0;
  bool __is_group = !__grouping.empty();
  char __group_sizes[64];
  int __current_group_size = 0;
  char* __group_sizes_end = __group_sizes;

  _Integer __over_base = (numeric_limits<_Integer>::min)() / static_cast<_Integer>(__base);

   for ( ; __first != __last ; ++__first) {

     const char __c = *__first;

     if (__is_group && __c == __separator) {
       *__group_sizes_end++ = __current_group_size;
       __current_group_size = 0;
       continue;
     }

     int __n = __get_digit_from_table(__c);

     if (__n >= __base)
       break;

     ++__got;
     ++__current_group_size;

     if (__result < __over_base)
       __ovflow = true;
     else {
       _Integer __next = static_cast<_Integer>(__base * __result - __n);
       if (__result != 0)
  __ovflow = __ovflow || __next >= __result;
       __result = __next;
     }
   }

   if (__is_group && __group_sizes_end != __group_sizes) {
     *__group_sizes_end++ = __current_group_size;
   }


   if (__got > 0) {
       __val = __ovflow
  ? __is_negative ? (numeric_limits<_Integer>::min)()
  : (numeric_limits<_Integer>::max)()
  : (__is_negative ? __result : static_cast<_Integer>(-__result));
   }

  return ((__got > 0) && !__ovflow) && (__is_group == 0 || __valid_grouping(__group_sizes, __group_sizes_end,
             __grouping.data(), __grouping.data()+ __grouping.size())) ;
}

template <class _InputIter, class _Integer>
bool
__get_integer(_InputIter& __first, _InputIter& __last,
       int __base, _Integer& __val,
       int __got, bool __is_negative, char __separator, const string& __grouping, const __false_type&)
{
  bool __ovflow = false;
  _Integer __result = 0;
  bool __is_group = !__grouping.empty();
  char __group_sizes[64];
  int __current_group_size = 0;
  char* __group_sizes_end = __group_sizes;

  _Integer __over_base = (numeric_limits<_Integer>::max)() / static_cast<_Integer>(__base);

  for ( ; __first != __last ; ++__first) {

    const char __c = *__first;

    if (__is_group && __c == __separator) {
      *__group_sizes_end++ = __current_group_size;
      __current_group_size = 0;
      continue;
    }

    int __n = __get_digit_from_table(__c);

    if (__n >= __base)
      break;

    ++__got;
    ++__current_group_size;

    if (__result > __over_base)
      __ovflow = true;
    else {
      _Integer __next = static_cast<_Integer>(__base * __result + __n);
 if (__result != 0)
   __ovflow = __ovflow || __next <= __result;
 __result = __next;
      }
  }

  if (__is_group && __group_sizes_end != __group_sizes) {
      *__group_sizes_end++ = __current_group_size;
  }


  if (__got > 0) {
      __val = __ovflow
 ? (numeric_limits<_Integer>::max)()
 : (__is_negative ? static_cast<_Integer>(-__result) : __result);
  }

  return ((__got > 0) && !__ovflow) &&
    (__is_group == 0 || __valid_grouping(__group_sizes, __group_sizes_end,
      __grouping.data(), __grouping.data()+ __grouping.size())) ;
}


template <class _InputIter, class _Integer>
bool
__get_decimal_integer(_InputIter& __first, _InputIter& __last, _Integer& __val)
{
  string __grp;
  return __get_integer(__first, __last, 10, __val, 0, false, ' ', __grp, __false_type());
}

template <class _InputIter, class _Integer, class _CharT>
_InputIter
_M_do_get_integer(_InputIter& __in, _InputIter& __end, ios_base& __str,
                  ios_base::iostate& __err, _Integer& __val, _CharT* __pc)
{




  typedef typename __bool2type<numeric_limits<_Integer>::is_signed>::_Ret _IsSigned;


  const numpunct<_CharT>& __numpunct = *(const numpunct<_CharT>*)__str._M_numpunct_facet();
  const string& __grouping = __str._M_grouping();

  const int __base_or_zero = _M_get_base_or_zero(__in, __end, __str, __pc);
  int __got = __base_or_zero & 1;

  bool __result;

  if (__in == __end) {

    if (__got > 0) {
      __val = 0;
      __result = true;
    }
    else
      __result = false;
  } else {

    const bool __negative = __base_or_zero & 2;
    const int __base = __base_or_zero >> 2;







    __result = __get_integer(__in, __end, __base, __val, __got, __negative, __numpunct.thousands_sep(), __grouping, _IsSigned());

  }

  __err = static_cast<ios_base::iostate>(__result ? ios_base::goodbit : ios_base::failbit);

  if (__in == __end)
    __err |= ios_base::eofbit;
  return __in;
}


template <class _InputIter, class _CharT>
_InputIter
__copy_sign(_InputIter __first, _InputIter __last, string& __v,
            _CharT __xplus, _CharT __xminus) {
    if (__first != __last) {
    _CharT __c = *__first;
    if (__c == __xplus)
      ++__first;
    else if (__c == __xminus) {
      __v.push_back('-');
      ++__first;
    }
  }
  return __first;
}


template <class _InputIter, class _CharT>
bool
__copy_digits(_InputIter& __first, _InputIter& __last,
              string& __v, const _CharT* __digits)
{
  bool __ok = false;

  for ( ; __first != __last; ++__first) {
    _CharT __c = *__first;
    if (__get_fdigit(__c, __digits)) {
      __v.push_back((char)__c);
      __ok = true;
    }
    else
      break;
  }
  return __ok;
}

template <class _InputIter, class _CharT>
bool
__copy_grouped_digits(_InputIter& __first, _InputIter& __last,
        string& __v, const _CharT * __digits,
        _CharT __sep, const string& __grouping,
        bool& __grouping_ok)
{
  bool __ok = false;
  char __group_sizes[64];
  char*__group_sizes_end = __group_sizes;
  char __current_group_size = 0;

  for ( ; __first != __last; ++__first) {
    _CharT __c = *__first;
    bool __tmp = __get_fdigit_or_sep(__c, __sep, __digits);
    if (__tmp) {
      if (__c == ',') {
        *__group_sizes_end++ = __current_group_size;
        __current_group_size = 0;
      }
      else {
        __ok = true;
        __v.push_back((char)__c);
        ++__current_group_size;
      }
    }
    else
      break;
  }

  if (__group_sizes_end != __group_sizes)
    *__group_sizes_end++ = __current_group_size;
  __grouping_ok = __valid_grouping(__group_sizes, __group_sizes_end, __grouping.data(), __grouping.data() + __grouping.size());
  return __ok;
}


template <class _InputIter, class _CharT>
bool
_M_read_float(string& __buf, _InputIter& __in, _InputIter& __end, ios_base& __s, _CharT*)
{



  bool __digits_before_dot ;
  bool __digits_after_dot = false;
  bool __ok;

  bool __grouping_ok = true;

  const ctype<_CharT>& __ct = use_facet< ctype<_CharT> >(__s.getloc());

  const numpunct<_CharT>& __numpunct = *(const numpunct<_CharT>*)__s._M_numpunct_facet();
  const string& __grouping = __s._M_grouping();

  _CharT __dot = __numpunct.decimal_point();
  _CharT __sep = __numpunct.thousands_sep();

  _CharT __digits[10];
  _CharT __xplus;
  _CharT __xminus;

  _CharT __pow_e;
  _CharT __pow_E;

  _Initialize_get_float(__ct, __xplus, __xminus, __pow_e, __pow_E, __digits);


  __in = __copy_sign(__in, __end, __buf, __xplus, __xminus);


  if (__grouping.size() != 0)
    __digits_before_dot = __copy_grouped_digits(__in, __end, __buf, __digits,
      __sep, __grouping, __grouping_ok);
  else
    __digits_before_dot = __copy_digits(__in, __end, __buf, __digits);


  if (__in != __end && *__in == __dot) {
    __buf.push_back('.');
    ++__in;
    __digits_after_dot = __copy_digits(__in, __end, __buf, __digits);
  }


  __ok = __digits_before_dot || __digits_after_dot;


  if (__ok && __in != __end && (*__in == __pow_e || *__in == __pow_E)) {
    __buf.push_back('e');
    ++__in;
    __in = __copy_sign(__in, __end, __buf, __xplus, __xminus);
    __ok = __copy_digits(__in, __end, __buf, __digits);


  }

  return __ok;
}






template <class _CharT, class _InputIterator>
locale::id num_get<_CharT, _InputIterator>::id;
# 473 "c:/marmalade/6.2/s3e/h/std/c++/stl/_num_get.c"
template <class _CharT, class _InputIter>
_InputIter
num_get<_CharT, _InputIter>::do_get(_InputIter __in, _InputIter __end,
                                    ios_base& __s,
                                    ios_base::iostate& __err, bool& __x) const
{
  if (__s.flags() & ios_base::boolalpha) {
    locale __loc = __s.getloc();
    const _Numpunct& __np = *(const _Numpunct*)__s._M_numpunct_facet();



    const basic_string<_CharT> __truename = __np.truename();
    const basic_string<_CharT> __falsename = __np.falsename();
    bool __true_ok = true;
    bool __false_ok = true;

    size_t __n = 0;
    for ( ; __in != __end; ++__in) {
      _CharT __c = *__in;
      __true_ok = __true_ok && (__c == __truename[__n]);
      __false_ok = __false_ok && (__c == __falsename[__n]);
      ++__n;

      if ((!__true_ok && !__false_ok) ||
          (__true_ok && __n >= __truename.size()) ||
          (__false_ok && __n >= __falsename.size())) {
 ++__in;
        break;
      }
    }
    if (__true_ok && __n < __truename.size()) __true_ok = false;
    if (__false_ok && __n < __falsename.size()) __false_ok = false;

    if (__true_ok || __false_ok) {
      __err = ios_base::goodbit;
      __x = __true_ok;
    }
    else
      __err = ios_base::failbit;

    if (__in == __end)
      __err |= ios_base::eofbit;

    return __in;
  }

  else {
    long __lx;
    _InputIter __tmp = this->do_get(__in, __end, __s, __err, __lx);
    if (!(__err & ios_base::failbit)) {
      if (__lx == 0)
        __x = false;
      else if (__lx == 1)
        __x = true;
      else
        __err |= ios_base::failbit;
    }
    return __tmp;
  }
}
# 554 "c:/marmalade/6.2/s3e/h/std/c++/stl/_num_get.c"
template <class _CharT, class _InputIter>
_InputIter
num_get<_CharT, _InputIter>::do_get(_InputIter __in, _InputIter __end, ios_base& __str,
                                    ios_base::iostate& __err, long& __val) const {
  return _M_do_get_integer(__in, __end, __str, __err, __val, (_CharT*)0 );
}

template <class _CharT, class _InputIter>
_InputIter
num_get<_CharT, _InputIter>::do_get(_InputIter __in, _InputIter __end, ios_base& __str,
                                    ios_base::iostate& __err,
                                    unsigned short& __val) const {
  return _M_do_get_integer(__in, __end, __str, __err, __val, (_CharT*)0 );
}

template <class _CharT, class _InputIter>
_InputIter
num_get<_CharT, _InputIter>::do_get(_InputIter __in, _InputIter __end, ios_base& __str,
                                    ios_base::iostate& __err,
                                    unsigned int& __val) const {
  return _M_do_get_integer(__in, __end, __str, __err, __val, (_CharT*)0 );
}

template <class _CharT, class _InputIter>
_InputIter
num_get<_CharT, _InputIter>::do_get(_InputIter __in, _InputIter __end, ios_base& __str,
                                    ios_base::iostate& __err,
                                    unsigned long& __val) const {
  return _M_do_get_integer(__in, __end, __str, __err, __val, (_CharT*)0 );
}


template <class _CharT, class _InputIter>
_InputIter
num_get<_CharT, _InputIter>::do_get(_InputIter __in, _InputIter __end, ios_base& __str,
                                    ios_base::iostate& __err,
                                    float& __val) const {
  string __buf ;
  bool __ok = _M_read_float(__buf, __in, __end, __str, (_CharT*)0 );
  __string_to_float(__buf, __val);
  __err = static_cast<ios_base::iostate>(__ok ? ios_base::goodbit : ios_base::failbit);
  if (__in == __end)
    __err |= ios_base::eofbit;
  return __in;
}

template <class _CharT, class _InputIter>
_InputIter
num_get<_CharT, _InputIter>::do_get(_InputIter __in, _InputIter __end, ios_base& __str,
                                    ios_base::iostate& __err,
                                    double& __val) const {
  string __buf ;
  bool __ok = _M_read_float(__buf, __in, __end, __str, (_CharT*)0 );
  __string_to_float(__buf, __val);
  __err = static_cast<ios_base::iostate>(__ok ? ios_base::goodbit : ios_base::failbit);
  if (__in == __end)
    __err |= ios_base::eofbit;
  return __in;
}


template <class _CharT, class _InputIter>
_InputIter
num_get<_CharT, _InputIter>::do_get(_InputIter __in, _InputIter __end, ios_base& __str,
        ios_base::iostate& __err,
                                    long double& __val) const {
  string __buf ;
  bool __ok = _M_read_float(__buf, __in, __end, __str, (_CharT*)0 );
  __string_to_float(__buf, __val);
  __err = static_cast<ios_base::iostate>(__ok ? ios_base::goodbit : ios_base::failbit);
  if (__in == __end)
    __err |= ios_base::eofbit;
  return __in;
}


template <class _CharT, class _InputIter>
_InputIter
num_get<_CharT, _InputIter>::do_get(_InputIter __in, _InputIter __end, ios_base& __str,
                           ios_base::iostate& __err,
                           void*& __p) const {

  unsigned long long __val;



    iter_type __tmp = _M_do_get_integer(__in, __end, __str, __err, __val, (_CharT*)0 );
    if (!(__err & ios_base::failbit))
      __p = reinterpret_cast<void*>(__val);
    return __tmp;
  }




template <class _CharT, class _InputIter>
_InputIter
num_get<_CharT, _InputIter>::do_get(_InputIter __in, _InputIter __end, ios_base& __str,
                                    ios_base::iostate& __err,
                                    long long& __val) const {
  return _M_do_get_integer(__in, __end, __str, __err, __val, (_CharT*)0 );
}

template <class _CharT, class _InputIter>
_InputIter
num_get<_CharT, _InputIter>::do_get(_InputIter __in, _InputIter __end, ios_base& __str,
                                    ios_base::iostate& __err,
                                    unsigned long long& __val) const {
  return _M_do_get_integer(__in, __end, __str, __err, __val, (_CharT*)0 );
}



}
# 252 "c:/marmalade/6.2/s3e/h/std/c++/stl/_num_get.h" 2
# 33 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istream.c" 2
# 46 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istream.c"
namespace _STL {




template <class _Traits>
struct _Is_not_wspace {
  typedef typename _Traits::char_type argument_type;
  typedef bool result_type;

  const ctype<argument_type>* _M_ctype;

  _Is_not_wspace(const ctype<argument_type>* __c_type) : _M_ctype(__c_type) {}
  bool operator()(argument_type __c) const
    { return !_M_ctype->is(ctype_base::space, __c); }
};

template <class _Traits>
struct _Is_wspace_null {
  typedef typename _Traits::char_type argument_type;
  typedef bool result_type;

  const ctype<argument_type>* _M_ctype;

  _Is_wspace_null(const ctype<argument_type>* __c_type) : _M_ctype(__c_type) {}
  bool operator()(argument_type __c) const {
    return _Traits::eq(__c, argument_type()) ||
           _M_ctype->is(ctype_base::space, __c);
  }
};

template <class _Traits>
struct _Scan_for_wspace {
  typedef typename _Traits::char_type char_type;
  typedef char_type* first_argument_type;
  typedef char_type* second_argument_type;
  typedef char_type* result_type;

  const ctype<char_type>* _M_ctype;

  _Scan_for_wspace(const ctype<char_type>* __ctype) : _M_ctype(__ctype) {}
  const char_type*
  operator()(const char_type* __first, const char_type* __last) const {
    return _M_ctype->scan_is(ctype_base::space, __first, __last);
  }
};

template <class _Traits>
struct _Scan_wspace_null {
  typedef typename _Traits::char_type char_type;
  typedef char_type* first_argument_type;
  typedef char_type* second_argument_type;
  typedef char_type* result_type;

  const ctype<char_type>* _M_ctype;

  _Scan_wspace_null(const ctype<char_type>* __c_type) : _M_ctype(__c_type) {}
  const char_type*
  operator()(const char_type* __first, const char_type* __last) const {
    __last = find_if(__first, __last,
                     _Eq_char_bound<_Traits>(char_type()));
    return _M_ctype->scan_is(ctype_base::space, __first, __last);
  }
};

template <class _Traits>
struct _Scan_for_not_wspace {
  typedef typename _Traits::char_type char_type;
  typedef char_type* first_argument_type;
  typedef char_type* second_argument_type;
  typedef char_type* result_type;

  const ctype<char_type>* _M_ctype;

  _Scan_for_not_wspace(const ctype<char_type>* __c_type) : _M_ctype(__c_type) {}
  const char_type*
  operator()(const char_type* __first, const char_type* __last) const {
    return _M_ctype->scan_not(ctype_base::space, __first, __last);
  }
};

template <class _Traits>
struct _Scan_for_char_val
{
  typedef typename _Traits::char_type char_type;
  typedef char_type* first_argument_type;
  typedef char_type* second_argument_type;
  typedef char_type* result_type;

  char_type _M_val;

  _Scan_for_char_val(char_type __val) : _M_val(__val) {}

  const char_type*
  operator()(const char_type* __first, const char_type* __last) const {
    return find_if(__first, __last, _Eq_char_bound<_Traits>(_M_val));
  }
};

template <class _Traits>
struct _Scan_for_int_val
{
  typedef typename _Traits::char_type char_type;
  typedef typename _Traits::int_type int_type;
  typedef char_type* first_argument_type;
  typedef char_type* second_argument_type;
  typedef char_type* result_type;

  int_type _M_val;

  _Scan_for_int_val(int_type __val) : _M_val(__val) {}

  const char_type*
  operator()(const char_type* __first, const char_type* __last) const {
    return find_if(__first, __last,
                   _Eq_int_bound<_Traits>(_M_val));
  }
};




template <class _CharT, class _Traits>
bool
__pushback(basic_streambuf<_CharT, _Traits>* __buf, _CharT __c)
{
  bool ret;
  {
    const typename _Traits::int_type __eof = _Traits::eof();
    ret = !_Traits::eq_int_type(__buf->sputbackc(__c), __eof);
  }
  if (false) {
    ret = false;
  }
  return ret;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
ws(basic_istream<_CharT, _Traits>& __is)
{
  typedef typename basic_istream<_CharT, _Traits>::sentry _Sentry;
  _Sentry __sentry(__is, _No_Skip_WS());
  if (__sentry)
    __is._M_skip_whitespace(false);
  return __is;
}


template <class _CharT, class _Traits>
bool
_M_init_skip(basic_istream<_CharT, _Traits>& __is) {
  if (__is.good()) {
    if (__is.tie())
      __is.tie()->flush();

    __is._M_skip_whitespace(true);
  }

  if (!__is.good()) {
    __is.setstate(ios_base::failbit);
    return false;
  } else
    return true;
}

template <class _CharT, class _Traits>
bool
_M_init_noskip(basic_istream<_CharT, _Traits>& __is){
  if (__is.good()) {
    if (__is.tie())
      __is.tie()->flush();

    if (!__is.rdbuf())
      __is.setstate(ios_base::badbit);
  }
  else
    __is.setstate(ios_base::failbit);
  return __is.good();
}





template <class _CharT, class _Traits, class _Number>
ios_base::iostate
_M_get_num(basic_istream<_CharT, _Traits>& __that, _Number& __val)
{
  typedef typename basic_istream<_CharT, _Traits>::sentry _Sentry;
  ios_base::iostate __err = 0;
  _Sentry __sentry( __that );
  if (__sentry) {
    typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> > _Num_get;
    {
      ((const _Num_get&)use_facet<_Num_get>(__that.getloc())).get(istreambuf_iterator<_CharT, _Traits>(__that.rdbuf()),
     0, __that, __err, __val);
    }
    if (false) {
      __that._M_handle_exception(ios_base::badbit);
    }
    if (__err) __that.setstate(__err);
  }
  return __err;
}




template <class _CharT, class _Traits>
typename basic_istream<_CharT, _Traits>::int_type
basic_istream<_CharT, _Traits>::peek()
{
  typename _Traits::int_type __tmp = _Traits::eof();

  this->_M_gcount = 0;
  sentry __sentry(*this, _No_Skip_WS());

  if (__sentry) {
    {
      __tmp = this->rdbuf()->sgetc();
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
    }
    if (this->_S_eof(__tmp))
      this->setstate(ios_base::eofbit);
  }

  return __tmp;
}


template <class _CharT, class _Traits>
typename basic_istream<_CharT, _Traits>::int_type
basic_istream<_CharT, _Traits>::get()
{
  typename _Traits::int_type __tmp = _Traits::eof();
  sentry __sentry(*this, _No_Skip_WS());
  this->_M_gcount = 0;

  if (__sentry) {
    {
      __tmp = this->rdbuf()->sbumpc();
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
    }

    if (!this->_S_eof(__tmp))
      this->_M_gcount = 1;
  }

  if (_M_gcount == 0)
    this->setstate(ios_base::eofbit | ios_base::failbit);

  return __tmp;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::get(_CharT& __c)
{
  sentry __sentry(*this, _No_Skip_WS());
  this->_M_gcount = 0;

  if (__sentry) {
    typename _Traits::int_type __tmp = _Traits::eof();
    {
      __tmp = this->rdbuf()->sbumpc();
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
    }

    if (!this->_S_eof(__tmp)) {
      this->_M_gcount = 1;
      __c = _Traits::to_char_type(__tmp);
    }
  }

  if (this->_M_gcount == 0)
    this->setstate(ios_base::eofbit | ios_base::failbit);

  return *this;
}







template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::ignore()
{
  sentry __sentry(*this, _No_Skip_WS());
  this->_M_gcount = 0;

  if (__sentry) {
    int_type __c;
    {
      __c = this->rdbuf()->sbumpc();
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
      return *this;
    }

    if (!this->_S_eof(__c))
      this->_M_gcount = 1;
    else
      this->setstate(ios_base::eofbit);
  }

  return *this;
}



template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::putback(_CharT __c) {
  this->_M_gcount = 0;
  sentry __sentry(*this, _No_Skip_WS());

  if (__sentry) {
    typename _Traits::int_type __tmp = _Traits::eof();
    basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();

    if (__buf) {
      {
        __tmp = __buf->sputbackc(__c);
      }
      if (false) {
        this->_M_handle_exception(ios_base::badbit);
      }
    }
    if (this->_S_eof(__tmp))
      this->setstate(ios_base::badbit);
  }
  else
    this->setstate(ios_base::failbit);

  return *this;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::unget() {
  this->_M_gcount = 0;

  sentry __sentry(*this, _No_Skip_WS());

  if (__sentry) {
    basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();

    if (__buf) {
      {
        _CharT __tmp;
        __tmp = __buf->sungetc();
        if (this->_S_eof(__tmp))
          this->setstate(ios_base::badbit);
      }
      if (false) {
        this->_M_handle_exception(ios_base::badbit);
      }
    } else
      this->setstate(ios_base::badbit);
  }
  else
    this->setstate(ios_base::failbit);

  return *this;
}



template <class _CharT, class _Traits>
int basic_istream<_CharT, _Traits>::sync() {
  sentry __sentry(*this, _No_Skip_WS());

  basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();
  if (__buf) {
    if (__buf->pubsync() == -1) {
      this->setstate(ios_base::badbit);
      return -1;
    }
    else
      return 0;
  }
  else
    return -1;
}

template <class _CharT, class _Traits>
typename basic_istream<_CharT, _Traits>::pos_type
basic_istream<_CharT, _Traits>::tellg() {

  basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();
  return (__buf && !this->fail()) ? __buf->pubseekoff(0, ios_base::cur, ios_base::in)
    : pos_type(-1);
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::seekg(pos_type __pos) {
  sentry __sentry(*this, _No_Skip_WS());

  basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();
  if (!this->fail() && __buf)
    __buf->pubseekpos(__pos, ios_base::in);
  return *this;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::seekg(off_type __off, ios_base::seekdir __dir)
{
  sentry __sentry(*this, _No_Skip_WS());

  basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();
  if (!this->fail() && __buf)
    __buf->pubseekoff(__off, __dir, ios_base::in);
  return *this;
}



template <class _CharT, class _Traits>
void basic_istream<_CharT, _Traits>::_M_formatted_get(_CharT& __c)
{


  sentry __sentry(*this);

  if (__sentry) {
    typename _Traits::int_type __tmp = _Traits::eof();

    {
      __tmp = this->rdbuf()->sbumpc();
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
      return;
    }

    if (!this->_S_eof(__tmp))
      __c = _Traits::to_char_type(__tmp);
    else
      this->setstate(ios_base::eofbit | ios_base::failbit);
  }
}
# 521 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istream.c"
template < class _CharT, class _Traits, class _Is_Delim>
streamsize
_M_read_unbuffered(basic_istream<_CharT, _Traits>* __that, basic_streambuf<_CharT, _Traits>* __buf,
                       streamsize _Num, _CharT* __s,
                       _Is_Delim __is_delim,
                       bool __extract_delim, bool __append_null,
                       bool __is_getline)
{
  streamsize __n = 0;
  ios_base::iostate __status = 0;

  typedef typename basic_istream<_CharT, _Traits>::int_type int_type;

  {
# 564 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istream.c"
while (true) {

int_type __c = __buf->sbumpc();

if (__that->_S_eof(__c)) {
if (__n < _Num || __is_getline)
__status |= ios_base::eofbit;
break;
}

else if (__is_delim(__c)) {
if (__extract_delim) {

++__n;
}
break;
}

else {

*__s++ = _Traits::to_char_type(__c);
++__n;

}

if (__n == _Num) {
if (__is_getline)
__status |= ios_base::failbit;
break;
}




}



  }
  if (false) {
    __that->_M_handle_exception(ios_base::badbit);
    *__s = _CharT();
    return __n;
  }

  if (__append_null)
    *__s = _CharT();
  if (__status)
    __that->setstate(__status);
  return __n;
}





template < class _CharT, class _Traits, class _Is_Delim, class _Scan_Delim>
streamsize
_M_read_buffered(basic_istream<_CharT, _Traits>* __that, basic_streambuf<_CharT, _Traits>* __buf,
                     streamsize _Num, _CharT* __s,
                     _Is_Delim __is_delim, _Scan_Delim __scan_delim,
                     bool __extract_delim, bool __append_null,
                     bool __is_getline)
{
  streamsize __n = 0;
  ios_base::iostate __status = 0;
  bool __done = false;

  {
    while (__buf->_M_egptr() != __buf->_M_gptr() && !__done) {
      const _CharT* __first = __buf->_M_gptr();
      const _CharT* __last = __buf->_M_egptr();
      ptrdiff_t __request = _Num - __n;

      const _CharT* __p = __scan_delim(__first, __last);
      ptrdiff_t __chunk = (min) (ptrdiff_t(__p - __first), __request);
      _Traits::copy(__s, __first, __chunk);
      __s += __chunk;
      __n += __chunk;
      __buf->_M_gbump((int)__chunk);


      if (__p != __last && __p - __first <= __request) {
        if (__extract_delim) {
          __n += 1;
          __buf->_M_gbump(1);
        }
        __done = true;
      }


      else if(__n == _Num) {


        if (__is_getline) {
          if (__chunk == __last - __first) {
            if (__that->_S_eof(__buf->sgetc()))
              __status |= ios_base::eofbit;
          }
          else
            __status |= ios_base::failbit;
        }
        __done = true;
      }



      else {
 if (__that->_S_eof(__buf->sgetc())) {
          __status |= ios_base::eofbit;
          __done = true;
        }
      }
    }
  }
  if (false) {
    __that->_M_handle_exception(ios_base::badbit);
    __done = true;
  }

  if (__done) {
    if (__append_null)
        *__s = _CharT();
    if (__status != 0)
      __that->setstate(__status);
    return __n;
  }






  return __n + _M_read_unbuffered(__that, __buf, _Num - __n, __s, __is_delim,
                                  __extract_delim,__append_null,__is_getline);
}




template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::get(_CharT* __s, streamsize __n,
                                    _CharT __delim) {
  sentry __sentry(*this, _No_Skip_WS());
  this->_M_gcount = 0;

  if (__sentry) {
    if (__n > 0) {
      basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();

      if (__buf->egptr() != __buf->gptr())
        this->_M_gcount =
          _M_read_buffered(this, __buf, __n - 1, __s,
                           _Eq_char_bound<_Traits>(__delim),
                           _Scan_for_char_val<_Traits>(__delim),
                           false, true, false);
      else
        this->_M_gcount =
          _M_read_unbuffered(this, __buf, __n - 1, __s,
                             _Eq_char_bound<_Traits>(__delim),
                             false, true, false);
    }
  }

  if (this->_M_gcount == 0)
    this->setstate(ios_base::failbit);

  return *this;
}



template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::getline(_CharT* __s, streamsize __n,
                                        _CharT __delim) {
  sentry __sentry(*this, _No_Skip_WS());
  this->_M_gcount = 0;

  if (__sentry) {
    if (__n > 0) {
      basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();
      this->_M_gcount = __buf->egptr() != __buf->gptr()
        ? _M_read_buffered(this, __buf, __n - 1, __s,
                           _Eq_char_bound<_Traits>(__delim),
                           _Scan_for_char_val<_Traits>(__delim),
                           true, true, true)
        : _M_read_unbuffered(this, __buf, __n - 1, __s,
                             _Eq_char_bound<_Traits>(__delim),
                             true, true, true);
    }
  }

  if (this->_M_gcount == 0)
    this->setstate(ios_base::failbit);

  return *this;
}



template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::read(char_type* __s, streamsize __n)
{
  sentry __sentry(*this, _No_Skip_WS());
  this->_M_gcount = 0;

  if (__sentry && !this->eof()) {
    basic_streambuf<_CharT, _Traits>*__buf = this->rdbuf();
    if (__buf->gptr() != __buf->egptr())
      _M_gcount
        = _M_read_buffered(this, __buf, __n, __s,
                           _Constant_unary_fun<bool, int_type>(false),
                           _Project2nd<const _CharT*, const _CharT*>(),
                           false, false, false);
    else
      _M_gcount
        = _M_read_unbuffered(this, __buf, __n, __s,
                             _Constant_unary_fun<bool, int_type>(false),
                             false, false, false);
  }
  else
    this->setstate(ios_base::failbit);

  if (this->eof())
    this->setstate(ios_base::eofbit | ios_base::failbit);

  return *this;
}




template <class _CharT, class _Traits>
streamsize
basic_istream<_CharT, _Traits>::readsome(char_type* __s, streamsize __nmax)
{
  sentry __sentry(*this, _No_Skip_WS());
  this->_M_gcount = 0;

  if (__sentry && !this->eof() && __nmax >= 0) {

    basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();
    streamsize __avail = __buf->in_avail();


    if (__avail == -1)
      this->_M_setstate_nothrow(ios_base::eofbit);

    else if (__avail != 0) {

      if (__buf->gptr() != __buf->egptr())
        _M_gcount
          = _M_read_buffered(this, __buf, (min) (__avail, __nmax), __s,
                             _Constant_unary_fun<bool, int_type>(false),
                             _Project2nd<const _CharT*, const _CharT*>(),
                             false, false, false);
      else
        _M_gcount
          = _M_read_unbuffered(this, __buf, (min) (__avail, __nmax), __s,
                               _Constant_unary_fun<bool, int_type>(false),
                               false, false, false);
    }
  }
  else {

    if (this->eof())
      this->setstate(ios_base::eofbit | ios_base::failbit);
    else
      this->setstate(ios_base::failbit);
  }




  return _M_gcount;
}

template <class _CharT, class _Traits>
void basic_istream<_CharT, _Traits>::_M_formatted_get(_CharT* __s)
{
  sentry __sentry(*this);

  if (__sentry) {
    basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();
    streamsize __nmax = this->width() > 0
      ? this->width() - 1
      : (numeric_limits<streamsize>::max)() / sizeof(_CharT) - 1;

    streamsize __n = __buf->gptr() != __buf->egptr()
      ? _M_read_buffered(this, __buf, __nmax, __s,
                         _Is_wspace_null<_Traits>((const ctype<_CharT>*)this->_M_ctype_facet()),
                         _Scan_wspace_null<_Traits>((const ctype<_CharT>*)this->_M_ctype_facet()),
    false, true, false)
      : _M_read_unbuffered(this, __buf, __nmax, __s,
                           _Is_wspace_null<_Traits>((const ctype<_CharT>*)this->_M_ctype_facet()),
      false, true, false);
    if (__n == 0)
      this->setstate(ios_base::failbit);
  }
  this->width(0);
}






template < class _CharT, class _Traits, class _Is_Delim>
void
_M_ignore_unbuffered(basic_istream<_CharT, _Traits>* __that,
       basic_streambuf<_CharT, _Traits>* __buf,
       _Is_Delim __is_delim,
       bool __extract_delim, bool __set_failbit)
{
  bool __done = false;
  ios_base::iostate __status = 0;
  typedef typename basic_istream<_CharT, _Traits>::int_type int_type;

  {
    while (!__done) {
      int_type __c = __buf->sbumpc();

      if (__that->_S_eof(__c)) {
        __done = true;
        __status |= __set_failbit ? ios_base::eofbit | ios_base::failbit
                                  : ios_base::eofbit;
      }

      else if (__is_delim(__c)) {
        __done = true;
        if (!__extract_delim)
          if (__that->_S_eof(__buf->sputbackc(_Traits::to_char_type(__c))))
            __status |= ios_base::failbit;
      }
    }
  }
  if (false) {
    __that->_M_handle_exception(ios_base::badbit);
  }

  __that->setstate(__status);
}






template < class _CharT, class _Traits, class _Is_Delim, class _Scan_Delim>
void
_M_ignore_buffered(basic_istream<_CharT, _Traits>* __that,
     basic_streambuf<_CharT, _Traits>* __buf,
     _Is_Delim __is_delim, _Scan_Delim __scan_delim,
     bool __extract_delim, bool __set_failbit)
{
  bool __at_eof = false;
  bool __found_delim = false;

  {
    while (__buf->_M_egptr() != __buf->_M_gptr() && !__at_eof && !__found_delim) {
      const _CharT* __p = __scan_delim(__buf->_M_gptr(), __buf->_M_egptr());
      __buf->_M_gbump((int)(__p - __buf->_M_gptr()));

      if (__p != __buf->_M_egptr()) {
        if (__extract_delim)
          __buf->_M_gbump(1);
        __found_delim = true;
      }

      else
        __at_eof = __that->_S_eof(__buf->sgetc());
    }
  }
  if (false) {
    __that->_M_handle_exception(ios_base::badbit);
    return;
  }

  if (__at_eof) {
    __that->setstate(__set_failbit ? ios_base::eofbit | ios_base::failbit
                                   : ios_base::eofbit);
    return;
  }
  if (__found_delim)
    return;





  _M_ignore_unbuffered(__that, __buf, __is_delim, __extract_delim, __set_failbit);
}
# 971 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istream.c"
template < class _CharT, class _Traits, class _Max_Chars, class _Is_Delim>
streamsize
_M_ignore_unbuffered(basic_istream<_CharT, _Traits>* __that,
       basic_streambuf<_CharT, _Traits>* __buf,
       streamsize _Num, _Max_Chars __max_chars,
       _Is_Delim __is_delim,
       bool __extract_delim, bool __set_failbit)
{
  streamsize __n = 0;
  ios_base::iostate __status = 0;
  typedef typename basic_istream<_CharT, _Traits>::int_type int_type;

  {
    while (__max_chars(_Num, __n) > 0) {
      int_type __c = __buf->sbumpc();

      if (__that->_S_eof(__c)) {
        __status |= __set_failbit ? ios_base::eofbit | ios_base::failbit
                                  : ios_base::eofbit;
        break;
      }

      else if (__is_delim(__c)) {
        if (__extract_delim)
          ++__n;
        else if (__that->_S_eof(__buf->sputbackc(_Traits::to_char_type(__c))))
          __status |= ios_base::failbit;

        break;
      }

      ++__n;
    }
  }
  if (false) {
    __that->_M_handle_exception(ios_base::badbit);
  }

  if (__status)
    __that->setstate(__status);
  return __n;
}

template < class _CharT, class _Traits, class _Max_Chars, class _Is_Delim, class _Scan_Delim>
streamsize
_M_ignore_buffered(basic_istream<_CharT, _Traits>* __that,
     basic_streambuf<_CharT, _Traits>* __buf,
     streamsize _Num,
     _Max_Chars __max_chars,
     _Is_Delim __is_delim, _Scan_Delim __scan_delim,
     bool __extract_delim, bool __set_failbit)
{
  streamsize __n = 0;
  bool __at_eof = false;
  bool __done = false;

  {
    while (__buf->_M_egptr() != __buf->_M_gptr() && !__done) {
      ptrdiff_t __avail = __buf->_M_egptr() - __buf->_M_gptr();
      streamsize __m = __max_chars(_Num, __n);

      if (__avail >= __m) {
        const _CharT* __last = __buf->_M_gptr() + __m;
        const _CharT* __p = __scan_delim(__buf->_M_gptr(), __last);
        ptrdiff_t __chunk = __p - __buf->_M_gptr();
        __n += __chunk;
        __buf->_M_gbump((int)__chunk);

        if (__extract_delim && __p != __last) {
          __n += 1;
          __buf->_M_gbump(1);
        }

        __done = true;
      }

      else {
        const _CharT* __p = __scan_delim(__buf->_M_gptr(), __buf->_M_egptr());
        ptrdiff_t __chunk = __p - __buf->_M_gptr();
        __n += __chunk;
        __buf->_M_gbump((int)__chunk);

        if (__p != __buf->_M_egptr()) {
          if (__extract_delim) {
            __n += 1;
            __buf->_M_gbump(1);
          }

          __done = true;
        }


        else if (__that->_S_eof(__buf->sgetc())) {
          __done = true;
          __at_eof = true;
        }
      }
    }
  }
  if (false) {
    __that->_M_handle_exception(ios_base::badbit);
    return __n;
  }

  if (__at_eof)
    __that->setstate(__set_failbit ? ios_base::eofbit | ios_base::failbit
                                   : ios_base::eofbit);

  if (__done)
    return __n;






  return __n + _M_ignore_unbuffered( __that, __buf, _Num, __max_chars,
                                    __is_delim, __extract_delim, __set_failbit);
}


template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::ignore(streamsize __n)
{
  sentry __sentry(*this, _No_Skip_WS());
  this->_M_gcount = 0;

  if (__sentry) {
    basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();
    typedef _Constant_unary_fun<bool, int_type> _Const_bool;
    typedef _Constant_binary_fun<streamsize, streamsize, streamsize>
      _Const_streamsize;
    const streamsize __maxss = (numeric_limits<streamsize>::max)();

    if (__n == (numeric_limits<int>::max)()) {
      if (__buf->gptr() != __buf->egptr())
        _M_gcount
          = _M_ignore_buffered(this, __buf,
                               __maxss, _Const_streamsize(__maxss),
                               _Const_bool(false),
                               _Project2nd<const _CharT*, const _CharT*>(),
                               false, false);
      else
        _M_gcount = _M_ignore_unbuffered(this, __buf,
                                         __maxss, _Const_streamsize(__maxss),
                                         _Const_bool(false), false, false);
    }
    else {
      if (__buf->gptr() != __buf->egptr())
        _M_gcount
          = _M_ignore_buffered(this, __buf,
                               __n, minus<streamsize>(),
                               _Const_bool(false),
                               _Project2nd<const _CharT*, const _CharT*>(),
                               false, false);
      else
        _M_gcount = _M_ignore_unbuffered(this, __buf, __n, minus<streamsize>(),
                                         _Const_bool(false), false, false);
    }
  }

  return *this;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::ignore(streamsize __n, int_type __delim)
{
  sentry __sentry(*this, _No_Skip_WS());
  this->_M_gcount = 0;

  if (__sentry) {
    basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();
    typedef _Constant_unary_fun<bool, int_type> _Const_bool;
    typedef _Constant_binary_fun<streamsize, streamsize, streamsize>
      _Const_streamsize;
    const streamsize __maxss = (numeric_limits<streamsize>::max)();

    if (__n == (numeric_limits<int>::max)()) {
      if (__buf->gptr() != __buf->egptr())
        _M_gcount = _M_ignore_buffered(this, __buf,
                                       __maxss, _Const_streamsize(__maxss),
                                       _Eq_int_bound<_Traits>(__delim),
                                       _Scan_for_int_val<_Traits>(__delim),
                                       true, false);
      else
        _M_gcount = _M_ignore_unbuffered(this, __buf,
                                         __maxss, _Const_streamsize(__maxss),
                                         _Eq_int_bound<_Traits>(__delim),
                                         true, false);
    }
    else {
      if (__buf->gptr() != __buf->egptr())
        _M_gcount = _M_ignore_buffered(this, __buf,
                                       __n, minus<streamsize>(),
                                       _Eq_int_bound<_Traits>(
                                               __delim),
                                       _Scan_for_int_val<_Traits>(__delim),
                                       true, false);
      else
        _M_gcount = _M_ignore_unbuffered(this, __buf, __n, minus<streamsize>(),
                                         _Eq_int_bound<_Traits>(__delim),
                                         true, false);
    }
  }

  return *this;
}



template <class _CharT, class _Traits>
void basic_istream<_CharT, _Traits>::_M_skip_whitespace(bool __set_failbit)
{
  basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();
  if (!__buf)
    this->setstate(ios_base::badbit);
  else if (__buf->gptr() != __buf->egptr())
    _M_ignore_buffered(this, __buf,
                       _Is_not_wspace<_Traits>((const ctype<_CharT>*)this->_M_ctype_facet()),
                       _Scan_for_not_wspace<_Traits>((const ctype<_CharT>*)this->_M_ctype_facet()),
                       false, __set_failbit);
  else
    _M_ignore_unbuffered(this, __buf,
                         _Is_not_wspace<_Traits>((const ctype<_CharT>*)this->_M_ctype_facet()),
                         false, __set_failbit);
}
# 1208 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istream.c"
template < class _CharT, class _Traits, class _Is_Delim>
streamsize
_M_copy_unbuffered( basic_istream<_CharT, _Traits>* __that, basic_streambuf<_CharT, _Traits>* __src,
      basic_streambuf<_CharT, _Traits>* __dest,
      _Is_Delim __is_delim,
      bool __extract_delim, bool __rethrow)
{
  streamsize __extracted = 0;
  ios_base::iostate __status = 0;
  typedef typename basic_istream<_CharT, _Traits>::int_type int_type;
  int_type __c;

  {

    while (true) {


      __c = __src->sbumpc();


      if (__that->_S_eof(__c)) {
        __status |= ios_base::eofbit;
        break;
      }

      else if (__is_delim(__c)) {
        if (!__extract_delim && !__pushback(__src, _Traits::to_char_type(__c)))
          __status |= ios_base::failbit;
        break;
      }

      else {


        bool __failed = false;
        {
          if (!__that->_S_eof(__dest->sputc(__c)))
            ++__extracted;
          else
            __failed = true;
        }
        if (false) {
          __failed = true;
        }



        if (__failed && !__pushback(__src, _Traits::to_char_type(__c)))
          __status |= ios_base::failbit;


        if (__failed)
          break;
      }

    }

  }


  if (false) {

    if (__rethrow && __extracted == 0)
      __that->_M_handle_exception(ios_base::failbit);
  }
  __that->setstate(__status);
  return __extracted;
}






template < class _CharT, class _Traits, class _Is_Delim, class _Scan_Delim>
streamsize
_M_copy_buffered(basic_istream<_CharT, _Traits>* __that, basic_streambuf<_CharT, _Traits>* __src,
                     basic_streambuf<_CharT, _Traits>* __dest,
                     _Scan_Delim __scan_delim, _Is_Delim __is_delim,
                     bool __extract_delim, bool __rethrow)
{
  streamsize __extracted = 0;
  ios_base::iostate __status = 0;
  typedef typename basic_istream<_CharT, _Traits>::int_type int_type;
  int_type __c = _Traits::eof();
  _CharT* __first = __src->_M_gptr();
  ptrdiff_t __avail = __src->_M_egptr() - __first;

  bool __do_handle_exceptions;

  {
    while (true) {
      __do_handle_exceptions = false ;
      const _CharT* __last = __scan_delim(__first, __src->_M_egptr());


      streamsize __n = __dest->sputn(__first, __extract_delim && __last != __src->_M_egptr()
                                     ? (__last - __first) + 1
                                     : (__last - __first));
      __src->_M_gbump((int)__n);
      __extracted += __n;


      __do_handle_exceptions = true;

      if (__n < __avail)
        break;

      __c = __src->sgetc();



      __first = __src->_M_gptr();
      __avail = __src->_M_egptr() - __first;

      if (__avail > 0)
        {}
      else if (__that->_S_eof(__c)) {
        __status |= ios_base::eofbit;
        break;
      }
      else
        return __extracted + _M_copy_unbuffered(__that, __src, __dest, __is_delim,
                                                __extract_delim, __rethrow);
    }
  }

  if (false) {

    if (__rethrow && __do_handle_exceptions && __extracted == 0)
      __that->_M_handle_exception(ios_base::failbit);
  }

  if (__status)
    __that->setstate(__status);
  return __extracted;
}



template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>
  ::get(basic_streambuf<_CharT, _Traits>& __dest, _CharT __delim)
{
  sentry __sentry(*this, _No_Skip_WS());
  this->_M_gcount = 0;

  if (__sentry) {
    basic_streambuf<_CharT, _Traits>* __src = this->rdbuf();

    if (__src)
      this->_M_gcount = __src->egptr() != __src->gptr()
        ? _M_copy_buffered(this, __src, &__dest,
                           _Scan_for_char_val<_Traits>(__delim),
                           _Eq_char_bound<_Traits>(__delim),
                           false, false)
        : _M_copy_unbuffered(this, __src, &__dest,
                             _Eq_char_bound<_Traits>(__delim),
                             false, false);
  }

  if (this->_M_gcount == 0)
    this->setstate(ios_base::failbit);

  return *this;
}


template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>
  ::operator>>(basic_streambuf<_CharT, _Traits>* __dest)
{
  streamsize __n = 0;
  typedef typename basic_istream<_CharT, _Traits>::sentry _Sentry;
  _Sentry __sentry(*this);
  if (__sentry) {
    basic_streambuf<_CharT, _Traits>* __src = this->rdbuf();
    if (__src && __dest)
      __n = __src->egptr() != __src->gptr()
        ? _M_copy_buffered(this, __src, __dest,
                           _Project2nd<const _CharT*, const _CharT*>(),
                           _Constant_unary_fun<bool, int_type>(false),
                           false, true)
        : _M_copy_unbuffered(this, __src, __dest,
                             _Constant_unary_fun<bool, int_type>(false),
                             false, true);
  }

  if (__n == 0)
    this->setstate(ios_base::failbit);

  return *this;
}





template <class _CharT, class _Traits>
basic_iostream<_CharT, _Traits>
  ::basic_iostream(basic_streambuf<_CharT, _Traits>* __buf)
    : basic_ios<_CharT, _Traits>(),
      basic_istream<_CharT, _Traits>(__buf),
      basic_ostream<_CharT, _Traits>(__buf)
{
  this->init(__buf);
}

template <class _CharT, class _Traits>
basic_iostream<_CharT, _Traits>::~basic_iostream()
{}

}
# 338 "c:/marmalade/6.2/s3e/h/std/c++/stl/_istream.h" 2
# 35 "c:/marmalade/6.2/s3e/h/std/c++/iostream" 2

namespace _STL {
# 54 "c:/marmalade/6.2/s3e/h/std/c++/iostream"
extern istream cin;
extern ostream cout;
extern ostream cerr;
extern ostream clog;


extern wistream wcin;
extern wostream wcout;
extern wostream wcerr;
extern wostream wclog;





static ios_base::_Loc_init _LocInit;





static ios_base::Init _IosInit;


}
# 89 "c:/marmalade/6.2/s3e/h/std/c++/iostream"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_epilog.h" 1
# 10 "c:/marmalade/6.2/s3e/h/std/c++/stl/_epilog.h"
# 1 "c:/marmalade/6.2/s3e/h/std/c++/config/_epilog.h" 1
# 11 "c:/marmalade/6.2/s3e/h/std/c++/stl/_epilog.h" 2



# 1 "c:/marmalade/6.2/s3e/h/std/c++/stl/_config_compat_post.h" 1
# 15 "c:/marmalade/6.2/s3e/h/std/c++/stl/_epilog.h" 2
# 90 "c:/marmalade/6.2/s3e/h/std/c++/iostream" 2
# 4 "c:/users/1106786/dropbox/dropbox/pg life/project impact/code/demos/o-demo_8_magicdoor/src/audio.cpp" 2

AudioState Audio::g_Status_RN=STOPPED;

Audio::~Audio()
{
    s3eAudioStop();
    s3eFree(g_AudioData);
}

Audio::Audio(){}
int32 Audio::AudioStopCallback(void* systemData, void* userData)
{
 g_Status_RN = STOPPED;
    return 0;
}
void Audio::Init(char* filename)
{
 g_Status_RN = STOPPED;
 g_MP3Supported = (0);
 _Filename=filename;
 _FileHandle = s3eFileOpen(_Filename, "rb");
 g_AudioSize = s3eFileGetSize(_FileHandle);
    g_AudioData = s3eMallocBase(g_AudioSize);


    s3eFileRead(g_AudioData, g_AudioSize, 1, _FileHandle);

    s3eFileClose(_FileHandle);


 g_MP3Supported = s3eAudioIsCodecSupported(S3E_AUDIO_CODEC_MP3);
 s3eAudioRegister(S3E_AUDIO_STOP, AudioStopCallback, __null);
}

bool Audio::Update(bool play)
{
 if(play)
 {
  if (!g_MP3Supported)
   return false;
  if (g_Status_RN == STOPPED)
  {
   _STL::cout<<"Audio Stopped"<<_STL::endl;
   Play();
  }







 }
 else
 {
  if (g_Status_RN == PLAYING)
   Stop();
 }
 return true;
}

void Audio::Resume()
{
 if (s3eAudioResume() == S3E_RESULT_SUCCESS)
  g_Status_RN = PLAYING;
}

void Audio::Play()
{
 if (s3eAudioPlayFromBuffer(g_AudioData, g_AudioSize, 1) == S3E_RESULT_SUCCESS)
            g_Status_RN = PLAYING;
}

void Audio::Stop()
{
 s3eAudioStop();
    g_Status_RN = STOPPED;
}

void Audio::Pause()
{
 if (s3eAudioPause() == S3E_RESULT_SUCCESS)
  g_Status_RN = PAUSED;
}
